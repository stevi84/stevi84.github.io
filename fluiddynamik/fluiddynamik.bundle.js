/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./lib/twgl.js/twgl.js":
/*!*****************************!*\
  !*** ./lib/twgl.js/twgl.js ***!
  \*****************************/
/***/ (function(module) {

/*!
 * @license twgl.js 4.22.0 Copyright (c) 2015, Gregg Tavares All Rights Reserved.
 * Available via the MIT license.
 * see: http://github.com/greggman/twgl.js for details
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __nested_webpack_require_747__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_747__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__nested_webpack_require_747__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__nested_webpack_require_747__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__nested_webpack_require_747__.d = function(exports, name, getter) {
/******/ 		if(!__nested_webpack_require_747__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__nested_webpack_require_747__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__nested_webpack_require_747__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __nested_webpack_require_747__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__nested_webpack_require_747__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_747__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__nested_webpack_require_747__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__nested_webpack_require_747__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__nested_webpack_require_747__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__nested_webpack_require_747__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __nested_webpack_require_747__(__nested_webpack_require_747__.s = "./src/twgl-base.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/attributes.js":
/*!***************************!*\
  !*** ./src/attributes.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_4381__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

exports.__esModule = true;
exports.createAttribsFromArrays = createAttribsFromArrays;
exports.createBuffersFromArrays = createBuffersFromArrays;
exports.createBufferFromArray = createBufferFromArray;
exports.createBufferFromTypedArray = createBufferFromTypedArray;
exports.createBufferInfoFromArrays = createBufferInfoFromArrays;
exports.setAttribInfoBufferFromArray = setAttribInfoBufferFromArray;
exports.setAttributePrefix = setAttributePrefix;
exports.setAttributeDefaults_ = setDefaults;
exports.getNumComponents_ = getNumComponents;
exports.getArray_ = getArray;

var typedArrays = _interopRequireWildcard(__nested_webpack_require_4381__(/*! ./typedarrays.js */ "./src/typedarrays.js"));

var helper = _interopRequireWildcard(__nested_webpack_require_4381__(/*! ./helper.js */ "./src/helper.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
var STATIC_DRAW = 0x88e4;
var ARRAY_BUFFER = 0x8892;
var ELEMENT_ARRAY_BUFFER = 0x8893;
var BUFFER_SIZE = 0x8764;
var BYTE = 0x1400;
var UNSIGNED_BYTE = 0x1401;
var SHORT = 0x1402;
var UNSIGNED_SHORT = 0x1403;
var INT = 0x1404;
var UNSIGNED_INT = 0x1405;
var FLOAT = 0x1406;
/**
 * Low level attribute and buffer related functions
 *
 * You should generally not need to use these functions. They are provided
 * for those cases where you're doing something out of the ordinary
 * and you need lower level access.
 *
 * For backward compatibility they are available at both `twgl.attributes` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/attributes
 */
// make sure we don't see a global gl

var gl = undefined;
/* eslint-disable-line */

var defaults = {
  attribPrefix: ""
};
/**
 * Sets the default attrib prefix
 *
 * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`
 * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.
 *
 * In other words I'll create arrays of geometry like this
 *
 *     var arrays = {
 *       position: ...
 *       normal: ...
 *       texcoord: ...
 *     };
 *
 * But need those mapped to attributes and my attributes start with `a_`.
 *
 * @deprecated see {@link module:twgl.setDefaults}
 * @param {string} prefix prefix for attribs
 * @memberOf module:twgl/attributes
 */

function setAttributePrefix(prefix) {
  defaults.attribPrefix = prefix;
}

function setDefaults(newDefaults) {
  helper.copyExistingProperties(newDefaults, defaults);
}

function setBufferFromTypedArray(gl, type, buffer, array, drawType) {
  gl.bindBuffer(type, buffer);
  gl.bufferData(type, array, drawType || STATIC_DRAW);
}
/**
 * Given typed array creates a WebGLBuffer and copies the typed array
 * into it.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken
 * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.
 * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.
 * @return {WebGLBuffer} the created WebGLBuffer
 * @memberOf module:twgl/attributes
 */


function createBufferFromTypedArray(gl, typedArray, type, drawType) {
  if (helper.isBuffer(gl, typedArray)) {
    return typedArray;
  }

  type = type || ARRAY_BUFFER;
  var buffer = gl.createBuffer();
  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);
  return buffer;
}

function isIndices(name) {
  return name === "indices";
} // This is really just a guess. Though I can't really imagine using
// anything else? Maybe for some compression?


function getNormalizationForTypedArray(typedArray) {
  if (typedArray instanceof Int8Array) {
    return true;
  } // eslint-disable-line


  if (typedArray instanceof Uint8Array) {
    return true;
  } // eslint-disable-line


  return false;
} // This is really just a guess. Though I can't really imagine using
// anything else? Maybe for some compression?


function getNormalizationForTypedArrayType(typedArrayType) {
  if (typedArrayType === Int8Array) {
    return true;
  } // eslint-disable-line


  if (typedArrayType === Uint8Array) {
    return true;
  } // eslint-disable-line


  return false;
}

function getArray(array) {
  return array.length ? array : array.data;
}

var texcoordRE = /coord|texture/i;
var colorRE = /color|colour/i;

function guessNumComponentsFromName(name, length) {
  var numComponents;

  if (texcoordRE.test(name)) {
    numComponents = 2;
  } else if (colorRE.test(name)) {
    numComponents = 4;
  } else {
    numComponents = 3; // position, normals, indices ...
  }

  if (length % numComponents > 0) {
    throw new Error("Can not guess numComponents for attribute '".concat(name, "'. Tried ").concat(numComponents, " but ").concat(length, " values is not evenly divisible by ").concat(numComponents, ". You should specify it."));
  }

  return numComponents;
}

function getNumComponents(array, arrayName) {
  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);
}

function makeTypedArray(array, name) {
  if (typedArrays.isArrayBuffer(array)) {
    return array;
  }

  if (typedArrays.isArrayBuffer(array.data)) {
    return array.data;
  }

  if (Array.isArray(array)) {
    array = {
      data: array
    };
  }

  var Type = array.type;

  if (!Type) {
    if (isIndices(name)) {
      Type = Uint16Array;
    } else {
      Type = Float32Array;
    }
  }

  return new Type(array.data);
}
/**
 * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer
 * for the attribute.
 *
 * @typedef {Object} AttribInfo
 * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be
 *    disabled and set to this constant value and all other values will be ignored.
 * @property {number} [numComponents] the number of components for this attribute.
 * @property {number} [size] synonym for `numComponents`.
 * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`
 * @property {boolean} [normalize] whether or not to normalize the data. Default = false
 * @property {number} [offset] offset into buffer in bytes. Default = 0
 * @property {number} [stride] the stride in bytes per element. Default = 0
 * @property {number} [divisor] the divisor in instances. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor
 *    where as anything else = do call it with this value
 * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute
 * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW
 * @memberOf module:twgl
 */

/**
 * Use this type of array spec when TWGL can't guess the type or number of components of an array
 * @typedef {Object} FullArraySpec
 * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be
 *    disabled and set to this constant value and all other values will be ignored.
 * @property {(number|number[]|ArrayBufferView)} data The data of the array. A number alone becomes the number of elements of type.
 * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.
 *    If `coord` is in the name assumes `numComponents = 2`.
 *    If `color` is in the name assumes `numComponents = 4`.
 *    otherwise assumes `numComponents = 3`
 * @property {constructor} [type] type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).
 * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.
 * @property {number} [size] synonym for `numComponents`.
 * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.
 * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0
 * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0
 * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor
 *    where as anything else = do call it with this value
 * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.
 * @property {string} [name] synonym for `attrib`.
 * @property {string} [attribName] synonym for `attrib`.
 * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer
 *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`
 *    to provide this. Example:
 *
 *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {
 *           position: [1, 2, 3, ... ],
 *         });
 *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {
 *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1
 *         });
 *
 * @memberOf module:twgl
 */

/**
 * An individual array in {@link module:twgl.Arrays}
 *
 * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`
 * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will
 * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.
 *
 * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec
 * @memberOf module:twgl
 */

/**
 * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your
 * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.
 *
 *     Bare JavaScript Arrays
 *
 *         var arrays = {
 *            position: [-1, 1, 0],
 *            normal: [0, 1, 0],
 *            ...
 *         }
 *
 *     Bare TypedArrays
 *
 *         var arrays = {
 *            position: new Float32Array([-1, 1, 0]),
 *            color: new Uint8Array([255, 128, 64, 255]),
 *            ...
 *         }
 *
 * *   Will guess at `numComponents` if not specified based on name.
 *
 *     If `coord` is in the name assumes `numComponents = 2`
 *
 *     If `color` is in the name assumes `numComponents = 4`
 *
 *     otherwise assumes `numComponents = 3`
 *
 * Objects with various fields. See {@link module:twgl.FullArraySpec}.
 *
 *     var arrays = {
 *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
 *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
 *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
 *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
 *     };
 *
 * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays
 * @memberOf module:twgl
 */

/**
 * Creates a set of attribute data and WebGLBuffers from set of arrays
 *
 * Given
 *
 *      var arrays = {
 *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
 *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
 *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
 *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },
 *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
 *      };
 *
 * returns something like
 *
 *      var attribs = {
 *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
 *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
 *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
 *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },
 *      };
 *
 * notes:
 *
 * *   Arrays can take various forms
 *
 *     Bare JavaScript Arrays
 *
 *         var arrays = {
 *            position: [-1, 1, 0],
 *            normal: [0, 1, 0],
 *            ...
 *         }
 *
 *     Bare TypedArrays
 *
 *         var arrays = {
 *            position: new Float32Array([-1, 1, 0]),
 *            color: new Uint8Array([255, 128, 64, 255]),
 *            ...
 *         }
 *
 * *   Will guess at `numComponents` if not specified based on name.
 *
 *     If `coord` is in the name assumes `numComponents = 2`
 *
 *     If `color` is in the name assumes `numComponents = 4`
 *
 *     otherwise assumes `numComponents = 3`
 *
 * @param {WebGLRenderingContext} gl The webgl rendering context.
 * @param {module:twgl.Arrays} arrays The arrays
 * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from
 *   This lets you share buffers. Any arrays you supply will override
 *   the buffers from srcBufferInfo.
 * @return {Object.<string, module:twgl.AttribInfo>} the attribs
 * @memberOf module:twgl/attributes
 */


function createAttribsFromArrays(gl, arrays) {
  var attribs = {};
  Object.keys(arrays).forEach(function (arrayName) {
    if (!isIndices(arrayName)) {
      var array = arrays[arrayName];
      var attribName = array.attrib || array.name || array.attribName || defaults.attribPrefix + arrayName;

      if (array.value) {
        if (!Array.isArray(array.value) && !typedArrays.isArrayBuffer(array.value)) {
          throw new Error('array.value is not array or typedarray');
        }

        attribs[attribName] = {
          value: array.value
        };
      } else {
        var buffer;
        var type;
        var normalization;
        var numComponents;

        if (array.buffer && array.buffer instanceof WebGLBuffer) {
          buffer = array.buffer;
          numComponents = array.numComponents || array.size;
          type = array.type;
          normalization = array.normalize;
        } else if (typeof array === "number" || typeof array.data === "number") {
          var numValues = array.data || array;
          var arrayType = array.type || Float32Array;
          var numBytes = numValues * arrayType.BYTES_PER_ELEMENT;
          type = typedArrays.getGLTypeForTypedArrayType(arrayType);
          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);
          numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);
          buffer = gl.createBuffer();
          gl.bindBuffer(ARRAY_BUFFER, buffer);
          gl.bufferData(ARRAY_BUFFER, numBytes, array.drawType || STATIC_DRAW);
        } else {
          var typedArray = makeTypedArray(array, arrayName);
          buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);
          type = typedArrays.getGLTypeForTypedArray(typedArray);
          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);
          numComponents = getNumComponents(array, arrayName);
        }

        attribs[attribName] = {
          buffer: buffer,
          numComponents: numComponents,
          type: type,
          normalize: normalization,
          stride: array.stride || 0,
          offset: array.offset || 0,
          divisor: array.divisor === undefined ? undefined : array.divisor,
          drawType: array.drawType
        };
      }
    }
  });
  gl.bindBuffer(ARRAY_BUFFER, null);
  return attribs;
}
/**
 * Sets the contents of a buffer attached to an attribInfo
 *
 * This is helper function to dynamically update a buffer.
 *
 * Let's say you make a bufferInfo
 *
 *     var arrays = {
 *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),
 *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),
 *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),
 *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),
 *     };
 *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);
 *
 *  And you want to dynamically update the positions. You could do this
 *
 *     // assuming arrays.position has already been updated with new data.
 *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);
 *
 * @param {WebGLRenderingContext} gl
 * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix
 *   the name of the attribute will include the prefix.
 * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything
 *    else will have to be converted to a typed array before it can be used by WebGL. During init time that
 *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.
 * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer
 *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`
 *    for the portion of the array you want to use.
 *
 *        var someArray = new Float32Array(1000); // an array with 1000 floats
 *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray
 *
 *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`
 * @memberOf module:twgl/attributes
 */


function setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {
  array = makeTypedArray(array);

  if (offset !== undefined) {
    gl.bindBuffer(ARRAY_BUFFER, attribInfo.buffer);
    gl.bufferSubData(ARRAY_BUFFER, offset, array);
  } else {
    setBufferFromTypedArray(gl, ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);
  }
}

function getBytesPerValueForGLType(gl, type) {
  if (type === BYTE) return 1; // eslint-disable-line

  if (type === UNSIGNED_BYTE) return 1; // eslint-disable-line

  if (type === SHORT) return 2; // eslint-disable-line

  if (type === UNSIGNED_SHORT) return 2; // eslint-disable-line

  if (type === INT) return 4; // eslint-disable-line

  if (type === UNSIGNED_INT) return 4; // eslint-disable-line

  if (type === FLOAT) return 4; // eslint-disable-line

  return 0;
} // Tries to get the number of elements from a set of arrays.


var positionKeys = ['position', 'positions', 'a_position'];

function getNumElementsFromNonIndexedArrays(arrays) {
  var key;
  var ii;

  for (ii = 0; ii < positionKeys.length; ++ii) {
    key = positionKeys[ii];

    if (key in arrays) {
      break;
    }
  }

  if (ii === positionKeys.length) {
    key = Object.keys(arrays)[0];
  }

  var array = arrays[key];
  var length = getArray(array).length;
  var numComponents = getNumComponents(array, key);
  var numElements = length / numComponents;

  if (length % numComponents > 0) {
    throw new Error("numComponents ".concat(numComponents, " not correct for length ").concat(length));
  }

  return numElements;
}

function getNumElementsFromAttributes(gl, attribs) {
  var key;
  var ii;

  for (ii = 0; ii < positionKeys.length; ++ii) {
    key = positionKeys[ii];

    if (key in attribs) {
      break;
    }

    key = defaults.attribPrefix + key;

    if (key in attribs) {
      break;
    }
  }

  if (ii === positionKeys.length) {
    key = Object.keys(attribs)[0];
  }

  var attrib = attribs[key];
  gl.bindBuffer(ARRAY_BUFFER, attrib.buffer);
  var numBytes = gl.getBufferParameter(ARRAY_BUFFER, BUFFER_SIZE);
  gl.bindBuffer(ARRAY_BUFFER, null);
  var bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);
  var totalElements = numBytes / bytesPerValue;
  var numComponents = attrib.numComponents || attrib.size; // TODO: check stride

  var numElements = totalElements / numComponents;

  if (numElements % 1 !== 0) {
    throw new Error("numComponents ".concat(numComponents, " not correct for length ").concat(length));
  }

  return numElements;
}
/**
 * @typedef {Object} BufferInfo
 * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.
 * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..
 * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.
 * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`
 * @memberOf module:twgl
 */

/**
 * Creates a BufferInfo from an object of arrays.
 *
 * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to
 * {@link module:twgl:drawBufferInfo}.
 *
 * Given an object like
 *
 *     var arrays = {
 *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
 *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
 *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
 *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
 *     };
 *
 *  Creates an BufferInfo like this
 *
 *     bufferInfo = {
 *       numElements: 4,        // or whatever the number of elements is
 *       indices: WebGLBuffer,  // this property will not exist if there are no indices
 *       attribs: {
 *         position: { buffer: WebGLBuffer, numComponents: 3, },
 *         normal:   { buffer: WebGLBuffer, numComponents: 3, },
 *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },
 *       },
 *     };
 *
 *  The properties of arrays can be JavaScript arrays in which case the number of components
 *  will be guessed.
 *
 *     var arrays = {
 *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],
 *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],
 *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],
 *        indices:  [0, 1, 2, 1, 2, 3],
 *     };
 *
 *  They can also be TypedArrays
 *
 *     var arrays = {
 *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),
 *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),
 *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),
 *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),
 *     };
 *
 *  Or AugmentedTypedArrays
 *
 *     var positions = createAugmentedTypedArray(3, 4);
 *     var texcoords = createAugmentedTypedArray(2, 4);
 *     var normals   = createAugmentedTypedArray(3, 4);
 *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);
 *
 *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);
 *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);
 *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);
 *     indices.push([0, 1, 2, 1, 2, 3]);
 *
 *     var arrays = {
 *        position: positions,
 *        texcoord: texcoords,
 *        normal:   normals,
 *        indices:  indices,
 *     };
 *
 * For the last example it is equivalent to
 *
 *     var bufferInfo = {
 *       attribs: {
 *         position: { numComponents: 3, buffer: gl.createBuffer(), },
 *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },
 *         normal: { numComponents: 3, buffer: gl.createBuffer(), },
 *       },
 *       indices: gl.createBuffer(),
 *       numElements: 6,
 *     };
 *
 *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);
 *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);
 *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);
 *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);
 *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);
 *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);
 *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);
 *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {module:twgl.Arrays} arrays Your data
 * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing
 *        buffer info to start from. WebGLBuffers etc specified
 *        in the srcBufferInfo will be used in a new BufferInfo
 *        with any arrays specified overriding the ones in
 *        srcBufferInfo.
 * @return {module:twgl.BufferInfo} A BufferInfo
 * @memberOf module:twgl/attributes
 */


function createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {
  var newAttribs = createAttribsFromArrays(gl, arrays);
  var bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});
  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);
  var indices = arrays.indices;

  if (indices) {
    var newIndices = makeTypedArray(indices, "indices");
    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER);
    bufferInfo.numElements = newIndices.length;
    bufferInfo.elementType = typedArrays.getGLTypeForTypedArray(newIndices);
  } else if (!bufferInfo.numElements) {
    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);
  }

  return bufferInfo;
}
/**
 * Creates a buffer from an array, typed array, or array spec
 *
 * Given something like this
 *
 *     [1, 2, 3],
 *
 * or
 *
 *     new Uint16Array([1,2,3]);
 *
 * or
 *
 *     {
 *        data: [1, 2, 3],
 *        type: Uint8Array,
 *     }
 *
 * returns a WebGLBuffer that contains the given data.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
 * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.
 * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.
 * @return {WebGLBuffer} a WebGLBuffer containing the data in array.
 * @memberOf module:twgl/attributes
 */


function createBufferFromArray(gl, array, arrayName) {
  var type = arrayName === "indices" ? ELEMENT_ARRAY_BUFFER : ARRAY_BUFFER;
  var typedArray = makeTypedArray(array, arrayName);
  return createBufferFromTypedArray(gl, typedArray, type);
}
/**
 * Creates buffers from arrays or typed arrays
 *
 * Given something like this
 *
 *     var arrays = {
 *        positions: [1, 2, 3],
 *        normals: [0, 0, 1],
 *     }
 *
 * returns something like
 *
 *     buffers = {
 *       positions: WebGLBuffer,
 *       normals: WebGLBuffer,
 *     }
 *
 * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
 * @param {module:twgl.Arrays} arrays
 * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array
 * @memberOf module:twgl/attributes
 */


function createBuffersFromArrays(gl, arrays) {
  var buffers = {};
  Object.keys(arrays).forEach(function (key) {
    buffers[key] = createBufferFromArray(gl, arrays[key], key);
  }); // Ugh!

  if (arrays.indices) {
    buffers.numElements = arrays.indices.length;
    buffers.elementType = typedArrays.getGLTypeForTypedArray(makeTypedArray(arrays.indices), 'indices');
  } else {
    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);
  }

  return buffers;
}

/***/ }),

/***/ "./src/draw.js":
/*!*********************!*\
  !*** ./src/draw.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_34410__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

exports.__esModule = true;
exports.drawBufferInfo = drawBufferInfo;
exports.drawObjectList = drawObjectList;

var programs = _interopRequireWildcard(__nested_webpack_require_34410__(/*! ./programs.js */ "./src/programs.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
var TRIANGLES = 0x0004;
var UNSIGNED_SHORT = 0x1403;
/**
 * Drawing related functions
 *
 * For backward compatibility they are available at both `twgl.draw` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/draw
 */

/**
 * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate
 *
 * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself
 * but calling this means if you switch from indexed data to non-indexed
 * data you don't have to remember to update your draw call.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or
 *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}
 * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`
 * @param {number} [count] An optional count. Defaults to bufferInfo.numElements
 * @param {number} [offset] An optional offset. Defaults to 0.
 * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called
 * @memberOf module:twgl/draw
 */

function drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {
  type = type === undefined ? TRIANGLES : type;
  var indices = bufferInfo.indices;
  var elementType = bufferInfo.elementType;
  var numElements = count === undefined ? bufferInfo.numElements : count;
  offset = offset === undefined ? 0 : offset;

  if (elementType || indices) {
    if (instanceCount !== undefined) {
      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset, instanceCount);
    } else {
      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset);
    }
  } else {
    if (instanceCount !== undefined) {
      gl.drawArraysInstanced(type, offset, numElements, instanceCount);
    } else {
      gl.drawArrays(type, offset, numElements);
    }
  }
}
/**
 * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.
 *
 * You need either a `BufferInfo` or a `VertexArrayInfo`.
 *
 * @typedef {Object} DrawObject
 * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`
 * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...
 * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}
 * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}
 * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}
 * @property {Object<string, ?>} uniforms The values for the uniforms.
 *   You can pass multiple objects by putting them in an array. For example
 *
 *     var sharedUniforms = {
 *       u_fogNear: 10,
 *       u_projection: ...
 *       ...
 *     };
 *
 *     var localUniforms = {
 *       u_world: ...
 *       u_diffuseColor: ...
 *     };
 *
 *     var drawObj = {
 *       ...
 *       uniforms: [sharedUniforms, localUniforms],
 *     };
 *
 * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.
 * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.
 * @property {number} [instanceCount] the number of instances. Defaults to undefined.
 * @memberOf module:twgl
 */

/**
 * Draws a list of objects
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {DrawObject[]} objectsToDraw an array of objects to draw.
 * @memberOf module:twgl/draw
 */


function drawObjectList(gl, objectsToDraw) {
  var lastUsedProgramInfo = null;
  var lastUsedBufferInfo = null;
  objectsToDraw.forEach(function (object) {
    if (object.active === false) {
      return;
    }

    var programInfo = object.programInfo;
    var bufferInfo = object.vertexArrayInfo || object.bufferInfo;
    var bindBuffers = false;
    var type = object.type === undefined ? TRIANGLES : object.type;

    if (programInfo !== lastUsedProgramInfo) {
      lastUsedProgramInfo = programInfo;
      gl.useProgram(programInfo.program); // We have to rebind buffers when changing programs because we
      // only bind buffers the program uses. So if 2 programs use the same
      // bufferInfo but the 1st one uses only positions the when the
      // we switch to the 2nd one some of the attributes will not be on.

      bindBuffers = true;
    } // Setup all the needed attributes.


    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {
      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {
        gl.bindVertexArray(null);
      }

      lastUsedBufferInfo = bufferInfo;
      programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);
    } // Set the uniforms.


    programs.setUniforms(programInfo, object.uniforms); // Draw

    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);
  });

  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {
    gl.bindVertexArray(null);
  }
}

/***/ }),

/***/ "./src/framebuffers.js":
/*!*****************************!*\
  !*** ./src/framebuffers.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_42817__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

exports.__esModule = true;
exports.bindFramebufferInfo = bindFramebufferInfo;
exports.createFramebufferInfo = createFramebufferInfo;
exports.resizeFramebufferInfo = resizeFramebufferInfo;

var textures = _interopRequireWildcard(__nested_webpack_require_42817__(/*! ./textures.js */ "./src/textures.js"));

var helper = _interopRequireWildcard(__nested_webpack_require_42817__(/*! ./helper.js */ "./src/helper.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * Framebuffer related functions
 *
 * For backward compatibility they are available at both `twgl.framebuffer` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/framebuffers
 */
// make sure we don't see a global gl
var gl = undefined;
/* eslint-disable-line */

var FRAMEBUFFER = 0x8d40;
var RENDERBUFFER = 0x8d41;
var TEXTURE_2D = 0x0de1;
var UNSIGNED_BYTE = 0x1401;
/* PixelFormat */

var DEPTH_COMPONENT = 0x1902;
var RGBA = 0x1908;
var DEPTH_COMPONENT24 = 0x81a6;
var DEPTH_COMPONENT32F = 0x8cac;
var DEPTH24_STENCIL8 = 0x88f0;
var DEPTH32F_STENCIL8 = 0x8cad;
/* Framebuffer Object. */

var RGBA4 = 0x8056;
var RGB5_A1 = 0x8057;
var RGB565 = 0x8D62;
var DEPTH_COMPONENT16 = 0x81A5;
var STENCIL_INDEX = 0x1901;
var STENCIL_INDEX8 = 0x8D48;
var DEPTH_STENCIL = 0x84F9;
var COLOR_ATTACHMENT0 = 0x8CE0;
var DEPTH_ATTACHMENT = 0x8D00;
var STENCIL_ATTACHMENT = 0x8D20;
var DEPTH_STENCIL_ATTACHMENT = 0x821A;
/* TextureWrapMode */

var CLAMP_TO_EDGE = 0x812F;
/* TextureMagFilter */

var LINEAR = 0x2601;
/**
 * The options for a framebuffer attachment.
 *
 * Note: For a `format` that is a texture include all the texture
 * options from {@link module:twgl.TextureOptions} for example
 * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}
 * `auto` defaults to `false` for attachment textures but `min` and `mag` default
 * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`
 *
 * @typedef {Object} AttachmentOptions
 * @property {number} [attachmentPoint] The attachment point. Defaults
 *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type
 *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending
 *   on the format or attachment type.
 * @property {number} [format] The format. If one of `gl.RGBA4`,
 *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,
 *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a
 *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`
 * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.
 * @property {number} [target] The texture target for `gl.framebufferTexture2D`.
 *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.
 * @property {number} [samples] The number of samples. Default = 1
 * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.
 * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.
 *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`
 * @property {(WebGLRenderbuffer | WebGLTexture)} [attachment] An existing renderbuffer or texture.
 *    If provided will attach this Object. This allows you to share
 *    attachments across framebuffers.
 * @memberOf module:twgl
 * @mixes module:twgl.TextureOptions
 */

var defaultAttachments = [{
  format: RGBA,
  type: UNSIGNED_BYTE,
  min: LINEAR,
  wrap: CLAMP_TO_EDGE
}, {
  format: DEPTH_STENCIL
}];
var attachmentsByFormat = {};
attachmentsByFormat[DEPTH_STENCIL] = DEPTH_STENCIL_ATTACHMENT;
attachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;
attachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;
attachmentsByFormat[DEPTH_COMPONENT] = DEPTH_ATTACHMENT;
attachmentsByFormat[DEPTH_COMPONENT16] = DEPTH_ATTACHMENT;
attachmentsByFormat[DEPTH_COMPONENT24] = DEPTH_ATTACHMENT;
attachmentsByFormat[DEPTH_COMPONENT32F] = DEPTH_ATTACHMENT;
attachmentsByFormat[DEPTH24_STENCIL8] = DEPTH_STENCIL_ATTACHMENT;
attachmentsByFormat[DEPTH32F_STENCIL8] = DEPTH_STENCIL_ATTACHMENT;

function getAttachmentPointForFormat(format, internalFormat) {
  return attachmentsByFormat[format] || attachmentsByFormat[internalFormat];
}

var renderbufferFormats = {};
renderbufferFormats[RGBA4] = true;
renderbufferFormats[RGB5_A1] = true;
renderbufferFormats[RGB565] = true;
renderbufferFormats[DEPTH_STENCIL] = true;
renderbufferFormats[DEPTH_COMPONENT16] = true;
renderbufferFormats[STENCIL_INDEX] = true;
renderbufferFormats[STENCIL_INDEX8] = true;

function isRenderbufferFormat(format) {
  return renderbufferFormats[format];
}
/**
 * @typedef {Object} FramebufferInfo
 * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo
 * @property {Array.<(WebGLRenderbuffer | WebGLTexture)>} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.
 * @property {number} width The width of the framebuffer and its attachments
 * @property {number} height The width of the framebuffer and its attachments
 * @memberOf module:twgl
 */

/**
 * Creates a framebuffer and attachments.
 *
 * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.
 *
 * The simplest usage
 *
 *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer
 *     const fbi = twgl.createFramebufferInfo(gl);
 *
 * More complex usage
 *
 *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer
 *     const attachments = [
 *       { format: RGB565, mag: NEAREST },
 *       { format: STENCIL_INDEX8 },
 *     ]
 *     const fbi = twgl.createFramebufferInfo(gl, attachments);
 *
 * Passing in a specific size
 *
 *     const width = 256;
 *     const height = 256;
 *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);
 *
 * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.
 * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an
 *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.
 * @param {number} [width] the width for the attachments. Default = size of drawingBuffer
 * @param {number} [height] the height for the attachments. Default = size of drawingBuffer
 * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.
 * @memberOf module:twgl/framebuffers
 */


function createFramebufferInfo(gl, attachments, width, height) {
  var target = FRAMEBUFFER;
  var fb = gl.createFramebuffer();
  gl.bindFramebuffer(target, fb);
  width = width || gl.drawingBufferWidth;
  height = height || gl.drawingBufferHeight;
  attachments = attachments || defaultAttachments;
  var colorAttachmentCount = 0;
  var framebufferInfo = {
    framebuffer: fb,
    attachments: [],
    width: width,
    height: height
  };
  attachments.forEach(function (attachmentOptions) {
    var attachment = attachmentOptions.attachment;
    var samples = attachmentOptions.samples;
    var format = attachmentOptions.format;
    var attachmentPoint = attachmentOptions.attachmentPoint || getAttachmentPointForFormat(format, attachmentOptions.internalFormat);

    if (!attachmentPoint) {
      attachmentPoint = COLOR_ATTACHMENT0 + colorAttachmentCount++;
    }

    if (!attachment) {
      if (samples !== undefined || isRenderbufferFormat(format)) {
        attachment = gl.createRenderbuffer();
        gl.bindRenderbuffer(RENDERBUFFER, attachment);

        if (samples > 1) {
          gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);
        } else {
          gl.renderbufferStorage(RENDERBUFFER, format, width, height);
        }
      } else {
        var textureOptions = Object.assign({}, attachmentOptions);
        textureOptions.width = width;
        textureOptions.height = height;

        if (textureOptions.auto === undefined) {
          textureOptions.auto = false;
          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR;
          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR;
          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE;
          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE;
        }

        attachment = textures.createTexture(gl, textureOptions);
      }
    }

    if (helper.isRenderbuffer(gl, attachment)) {
      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);
    } else if (helper.isTexture(gl, attachment)) {
      if (attachmentOptions.layer !== undefined) {
        gl.framebufferTextureLayer(target, attachmentPoint, attachment, attachmentOptions.level || 0, attachmentOptions.layer);
      } else {
        gl.framebufferTexture2D(target, attachmentPoint, attachmentOptions.target || TEXTURE_2D, attachment, attachmentOptions.level || 0);
      }
    } else {
      throw new Error('unknown attachment type');
    }

    framebufferInfo.attachments.push(attachment);
  });
  return framebufferInfo;
}
/**
 * Resizes the attachments of a framebuffer.
 *
 * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}
 * because TWGL has no idea the format/type of each attachment.
 *
 * The simplest usage
 *
 *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer
 *     const fbi = twgl.createFramebufferInfo(gl);
 *
 *     ...
 *
 *     function render() {
 *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {
 *         // resize the attachments
 *         twgl.resizeFramebufferInfo(gl, fbi);
 *       }
 *
 * More complex usage
 *
 *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer
 *     const attachments = [
 *       { format: RGB565, mag: NEAREST },
 *       { format: STENCIL_INDEX8 },
 *     ]
 *     const fbi = twgl.createFramebufferInfo(gl, attachments);
 *
 *     ...
 *
 *     function render() {
 *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {
 *         // resize the attachments to match
 *         twgl.resizeFramebufferInfo(gl, fbi, attachments);
 *       }
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.
 * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.
 * @param {number} [width] the width for the attachments. Default = size of drawingBuffer
 * @param {number} [height] the height for the attachments. Default = size of drawingBuffer
 * @memberOf module:twgl/framebuffers
 */


function resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {
  width = width || gl.drawingBufferWidth;
  height = height || gl.drawingBufferHeight;
  framebufferInfo.width = width;
  framebufferInfo.height = height;
  attachments = attachments || defaultAttachments;
  attachments.forEach(function (attachmentOptions, ndx) {
    var attachment = framebufferInfo.attachments[ndx];
    var format = attachmentOptions.format;
    var samples = attachmentOptions.samples;

    if (samples !== undefined || helper.isRenderbuffer(gl, attachment)) {
      gl.bindRenderbuffer(RENDERBUFFER, attachment);

      if (samples > 1) {
        gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);
      } else {
        gl.renderbufferStorage(RENDERBUFFER, format, width, height);
      }
    } else if (helper.isTexture(gl, attachment)) {
      textures.resizeTexture(gl, attachment, attachmentOptions, width, height);
    } else {
      throw new Error('unknown attachment type');
    }
  });
}
/**
 * Binds a framebuffer
 *
 * This function pretty much solely exists because I spent hours
 * trying to figure out why something I wrote wasn't working only
 * to realize I forget to set the viewport dimensions.
 * My hope is this function will fix that.
 *
 * It is effectively the same as
 *
 *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);
 *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.
 *   If falsy will bind the canvas.
 * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.
 * @memberOf module:twgl/framebuffers
 */


function bindFramebufferInfo(gl, framebufferInfo, target) {
  target = target || FRAMEBUFFER;

  if (framebufferInfo) {
    gl.bindFramebuffer(target, framebufferInfo.framebuffer);
    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);
  } else {
    gl.bindFramebuffer(target, null);
    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
  }
}

/***/ }),

/***/ "./src/helper.js":
/*!***********************!*\
  !*** ./src/helper.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.copyExistingProperties = copyExistingProperties;
exports.copyNamedProperties = copyNamedProperties;
exports.error = error;
exports.warn = warn;
exports.isBuffer = isBuffer;
exports.isRenderbuffer = isRenderbuffer;
exports.isShader = isShader;
exports.isTexture = isTexture;
exports.isSampler = isSampler;

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/* eslint no-console: "off" */

/**
 * Copy named properties
 *
 * @param {string[]} names names of properties to copy
 * @param {object} src object to copy properties from
 * @param {object} dst object to copy properties to
 * @private
 */
function copyNamedProperties(names, src, dst) {
  names.forEach(function (name) {
    var value = src[name];

    if (value !== undefined) {
      dst[name] = value;
    }
  });
}
/**
 * Copies properties from source to dest only if a matching key is in dest
 *
 * @param {Object.<string, ?>} src the source
 * @param {Object.<string, ?>} dst the dest
 * @private
 */


function copyExistingProperties(src, dst) {
  Object.keys(dst).forEach(function (key) {
    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {
      /* eslint no-prototype-builtins: 0 */
      dst[key] = src[key];
    }
  });
}

function error() {
  var _console;

  (_console = console).error.apply(_console, arguments);
}

function warn() {
  var _console2;

  (_console2 = console).warn.apply(_console2, arguments);
}

function isBuffer(gl, t) {
  return typeof WebGLBuffer !== 'undefined' && t instanceof WebGLBuffer;
}

function isRenderbuffer(gl, t) {
  return typeof WebGLRenderbuffer !== 'undefined' && t instanceof WebGLRenderbuffer;
}

function isShader(gl, t) {
  return typeof WebGLShader !== 'undefined' && t instanceof WebGLShader;
}

function isTexture(gl, t) {
  return typeof WebGLTexture !== 'undefined' && t instanceof WebGLTexture;
}

function isSampler(gl, t) {
  return typeof WebGLSampler !== 'undefined' && t instanceof WebGLSampler;
}

/***/ }),

/***/ "./src/programs.js":
/*!*************************!*\
  !*** ./src/programs.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_61972__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

exports.__esModule = true;
exports.createAttributeSetters = createAttributeSetters;
exports.createProgram = createProgram;
exports.createProgramFromScripts = createProgramFromScripts;
exports.createProgramFromSources = createProgramFromSources;
exports.createProgramInfo = createProgramInfo;
exports.createProgramInfoFromProgram = createProgramInfoFromProgram;
exports.createUniformSetters = createUniformSetters;
exports.createUniformBlockSpecFromProgram = createUniformBlockSpecFromProgram;
exports.createUniformBlockInfoFromProgram = createUniformBlockInfoFromProgram;
exports.createUniformBlockInfo = createUniformBlockInfo;
exports.createTransformFeedback = createTransformFeedback;
exports.createTransformFeedbackInfo = createTransformFeedbackInfo;
exports.bindTransformFeedbackInfo = bindTransformFeedbackInfo;
exports.setAttributes = setAttributes;
exports.setBuffersAndAttributes = setBuffersAndAttributes;
exports.setUniforms = setUniforms;
exports.setUniformBlock = setUniformBlock;
exports.setBlockUniforms = setBlockUniforms;
exports.bindUniformBlock = bindUniformBlock;
exports.setUniformsAndBindTextures = void 0;

var utils = _interopRequireWildcard(__nested_webpack_require_61972__(/*! ./utils.js */ "./src/utils.js"));

var helper = _interopRequireWildcard(__nested_webpack_require_61972__(/*! ./helper.js */ "./src/helper.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Low level shader program related functions
 *
 * You should generally not need to use these functions. They are provided
 * for those cases where you're doing something out of the ordinary
 * and you need lower level access.
 *
 * For backward compatibility they are available at both `twgl.programs` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/programs
 */
var error = helper.error;
var warn = helper.warn;

function getElementById(id) {
  return typeof document !== 'undefined' && document.getElementById ? document.getElementById(id) : null;
}

var TEXTURE0 = 0x84c0;
var DYNAMIC_DRAW = 0x88e8;
var ARRAY_BUFFER = 0x8892;
var ELEMENT_ARRAY_BUFFER = 0x8893;
var UNIFORM_BUFFER = 0x8a11;
var TRANSFORM_FEEDBACK_BUFFER = 0x8c8e;
var TRANSFORM_FEEDBACK = 0x8e22;
var COMPILE_STATUS = 0x8b81;
var LINK_STATUS = 0x8b82;
var FRAGMENT_SHADER = 0x8b30;
var VERTEX_SHADER = 0x8b31;
var SEPARATE_ATTRIBS = 0x8c8d;
var ACTIVE_UNIFORMS = 0x8b86;
var ACTIVE_ATTRIBUTES = 0x8b89;
var TRANSFORM_FEEDBACK_VARYINGS = 0x8c83;
var ACTIVE_UNIFORM_BLOCKS = 0x8a36;
var UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8a44;
var UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;
var UNIFORM_BLOCK_DATA_SIZE = 0x8a40;
var UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8a43;
var FLOAT = 0x1406;
var FLOAT_VEC2 = 0x8B50;
var FLOAT_VEC3 = 0x8B51;
var FLOAT_VEC4 = 0x8B52;
var INT = 0x1404;
var INT_VEC2 = 0x8B53;
var INT_VEC3 = 0x8B54;
var INT_VEC4 = 0x8B55;
var BOOL = 0x8B56;
var BOOL_VEC2 = 0x8B57;
var BOOL_VEC3 = 0x8B58;
var BOOL_VEC4 = 0x8B59;
var FLOAT_MAT2 = 0x8B5A;
var FLOAT_MAT3 = 0x8B5B;
var FLOAT_MAT4 = 0x8B5C;
var SAMPLER_2D = 0x8B5E;
var SAMPLER_CUBE = 0x8B60;
var SAMPLER_3D = 0x8B5F;
var SAMPLER_2D_SHADOW = 0x8B62;
var FLOAT_MAT2x3 = 0x8B65;
var FLOAT_MAT2x4 = 0x8B66;
var FLOAT_MAT3x2 = 0x8B67;
var FLOAT_MAT3x4 = 0x8B68;
var FLOAT_MAT4x2 = 0x8B69;
var FLOAT_MAT4x3 = 0x8B6A;
var SAMPLER_2D_ARRAY = 0x8DC1;
var SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
var SAMPLER_CUBE_SHADOW = 0x8DC5;
var UNSIGNED_INT = 0x1405;
var UNSIGNED_INT_VEC2 = 0x8DC6;
var UNSIGNED_INT_VEC3 = 0x8DC7;
var UNSIGNED_INT_VEC4 = 0x8DC8;
var INT_SAMPLER_2D = 0x8DCA;
var INT_SAMPLER_3D = 0x8DCB;
var INT_SAMPLER_CUBE = 0x8DCC;
var INT_SAMPLER_2D_ARRAY = 0x8DCF;
var UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
var UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
var UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
var UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
var TEXTURE_2D = 0x0DE1;
var TEXTURE_CUBE_MAP = 0x8513;
var TEXTURE_3D = 0x806F;
var TEXTURE_2D_ARRAY = 0x8C1A;
var typeMap = {};
/**
 * Returns the corresponding bind point for a given sampler type
 */

function getBindPointForSamplerType(gl, type) {
  return typeMap[type].bindPoint;
} // This kind of sucks! If you could compose functions as in `var fn = gl[name];`
// this code could be a lot smaller but that is sadly really slow (T_T)


function floatSetter(gl, location) {
  return function (v) {
    gl.uniform1f(location, v);
  };
}

function floatArraySetter(gl, location) {
  return function (v) {
    gl.uniform1fv(location, v);
  };
}

function floatVec2Setter(gl, location) {
  return function (v) {
    gl.uniform2fv(location, v);
  };
}

function floatVec3Setter(gl, location) {
  return function (v) {
    gl.uniform3fv(location, v);
  };
}

function floatVec4Setter(gl, location) {
  return function (v) {
    gl.uniform4fv(location, v);
  };
}

function intSetter(gl, location) {
  return function (v) {
    gl.uniform1i(location, v);
  };
}

function intArraySetter(gl, location) {
  return function (v) {
    gl.uniform1iv(location, v);
  };
}

function intVec2Setter(gl, location) {
  return function (v) {
    gl.uniform2iv(location, v);
  };
}

function intVec3Setter(gl, location) {
  return function (v) {
    gl.uniform3iv(location, v);
  };
}

function intVec4Setter(gl, location) {
  return function (v) {
    gl.uniform4iv(location, v);
  };
}

function uintSetter(gl, location) {
  return function (v) {
    gl.uniform1ui(location, v);
  };
}

function uintArraySetter(gl, location) {
  return function (v) {
    gl.uniform1uiv(location, v);
  };
}

function uintVec2Setter(gl, location) {
  return function (v) {
    gl.uniform2uiv(location, v);
  };
}

function uintVec3Setter(gl, location) {
  return function (v) {
    gl.uniform3uiv(location, v);
  };
}

function uintVec4Setter(gl, location) {
  return function (v) {
    gl.uniform4uiv(location, v);
  };
}

function floatMat2Setter(gl, location) {
  return function (v) {
    gl.uniformMatrix2fv(location, false, v);
  };
}

function floatMat3Setter(gl, location) {
  return function (v) {
    gl.uniformMatrix3fv(location, false, v);
  };
}

function floatMat4Setter(gl, location) {
  return function (v) {
    gl.uniformMatrix4fv(location, false, v);
  };
}

function floatMat23Setter(gl, location) {
  return function (v) {
    gl.uniformMatrix2x3fv(location, false, v);
  };
}

function floatMat32Setter(gl, location) {
  return function (v) {
    gl.uniformMatrix3x2fv(location, false, v);
  };
}

function floatMat24Setter(gl, location) {
  return function (v) {
    gl.uniformMatrix2x4fv(location, false, v);
  };
}

function floatMat42Setter(gl, location) {
  return function (v) {
    gl.uniformMatrix4x2fv(location, false, v);
  };
}

function floatMat34Setter(gl, location) {
  return function (v) {
    gl.uniformMatrix3x4fv(location, false, v);
  };
}

function floatMat43Setter(gl, location) {
  return function (v) {
    gl.uniformMatrix4x3fv(location, false, v);
  };
}

function samplerSetter(gl, type, unit, location) {
  var bindPoint = getBindPointForSamplerType(gl, type);
  return utils.isWebGL2(gl) ? function (textureOrPair) {
    var texture;
    var sampler;

    if (helper.isTexture(gl, textureOrPair)) {
      texture = textureOrPair;
      sampler = null;
    } else {
      texture = textureOrPair.texture;
      sampler = textureOrPair.sampler;
    }

    gl.uniform1i(location, unit);
    gl.activeTexture(TEXTURE0 + unit);
    gl.bindTexture(bindPoint, texture);
    gl.bindSampler(unit, sampler);
  } : function (texture) {
    gl.uniform1i(location, unit);
    gl.activeTexture(TEXTURE0 + unit);
    gl.bindTexture(bindPoint, texture);
  };
}

function samplerArraySetter(gl, type, unit, location, size) {
  var bindPoint = getBindPointForSamplerType(gl, type);
  var units = new Int32Array(size);

  for (var ii = 0; ii < size; ++ii) {
    units[ii] = unit + ii;
  }

  return utils.isWebGL2(gl) ? function (textures) {
    gl.uniform1iv(location, units);
    textures.forEach(function (textureOrPair, index) {
      gl.activeTexture(TEXTURE0 + units[index]);
      var texture;
      var sampler;

      if (helper.isTexture(gl, textureOrPair)) {
        texture = textureOrPair;
        sampler = null;
      } else {
        texture = textureOrPair.texture;
        sampler = textureOrPair.sampler;
      }

      gl.bindSampler(unit, sampler);
      gl.bindTexture(bindPoint, texture);
    });
  } : function (textures) {
    gl.uniform1iv(location, units);
    textures.forEach(function (texture, index) {
      gl.activeTexture(TEXTURE0 + units[index]);
      gl.bindTexture(bindPoint, texture);
    });
  };
}

typeMap[FLOAT] = {
  Type: Float32Array,
  size: 4,
  setter: floatSetter,
  arraySetter: floatArraySetter
};
typeMap[FLOAT_VEC2] = {
  Type: Float32Array,
  size: 8,
  setter: floatVec2Setter,
  cols: 2
};
typeMap[FLOAT_VEC3] = {
  Type: Float32Array,
  size: 12,
  setter: floatVec3Setter,
  cols: 3
};
typeMap[FLOAT_VEC4] = {
  Type: Float32Array,
  size: 16,
  setter: floatVec4Setter,
  cols: 4
};
typeMap[INT] = {
  Type: Int32Array,
  size: 4,
  setter: intSetter,
  arraySetter: intArraySetter
};
typeMap[INT_VEC2] = {
  Type: Int32Array,
  size: 8,
  setter: intVec2Setter,
  cols: 2
};
typeMap[INT_VEC3] = {
  Type: Int32Array,
  size: 12,
  setter: intVec3Setter,
  cols: 3
};
typeMap[INT_VEC4] = {
  Type: Int32Array,
  size: 16,
  setter: intVec4Setter,
  cols: 4
};
typeMap[UNSIGNED_INT] = {
  Type: Uint32Array,
  size: 4,
  setter: uintSetter,
  arraySetter: uintArraySetter
};
typeMap[UNSIGNED_INT_VEC2] = {
  Type: Uint32Array,
  size: 8,
  setter: uintVec2Setter,
  cols: 2
};
typeMap[UNSIGNED_INT_VEC3] = {
  Type: Uint32Array,
  size: 12,
  setter: uintVec3Setter,
  cols: 3
};
typeMap[UNSIGNED_INT_VEC4] = {
  Type: Uint32Array,
  size: 16,
  setter: uintVec4Setter,
  cols: 4
};
typeMap[BOOL] = {
  Type: Uint32Array,
  size: 4,
  setter: intSetter,
  arraySetter: intArraySetter
};
typeMap[BOOL_VEC2] = {
  Type: Uint32Array,
  size: 8,
  setter: intVec2Setter,
  cols: 2
};
typeMap[BOOL_VEC3] = {
  Type: Uint32Array,
  size: 12,
  setter: intVec3Setter,
  cols: 3
};
typeMap[BOOL_VEC4] = {
  Type: Uint32Array,
  size: 16,
  setter: intVec4Setter,
  cols: 4
};
typeMap[FLOAT_MAT2] = {
  Type: Float32Array,
  size: 32,
  setter: floatMat2Setter,
  rows: 2,
  cols: 2
};
typeMap[FLOAT_MAT3] = {
  Type: Float32Array,
  size: 48,
  setter: floatMat3Setter,
  rows: 3,
  cols: 3
};
typeMap[FLOAT_MAT4] = {
  Type: Float32Array,
  size: 64,
  setter: floatMat4Setter,
  rows: 4,
  cols: 4
};
typeMap[FLOAT_MAT2x3] = {
  Type: Float32Array,
  size: 32,
  setter: floatMat23Setter,
  rows: 2,
  cols: 3
};
typeMap[FLOAT_MAT2x4] = {
  Type: Float32Array,
  size: 32,
  setter: floatMat24Setter,
  rows: 2,
  cols: 4
};
typeMap[FLOAT_MAT3x2] = {
  Type: Float32Array,
  size: 48,
  setter: floatMat32Setter,
  rows: 3,
  cols: 2
};
typeMap[FLOAT_MAT3x4] = {
  Type: Float32Array,
  size: 48,
  setter: floatMat34Setter,
  rows: 3,
  cols: 4
};
typeMap[FLOAT_MAT4x2] = {
  Type: Float32Array,
  size: 64,
  setter: floatMat42Setter,
  rows: 4,
  cols: 2
};
typeMap[FLOAT_MAT4x3] = {
  Type: Float32Array,
  size: 64,
  setter: floatMat43Setter,
  rows: 4,
  cols: 3
};
typeMap[SAMPLER_2D] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_2D
};
typeMap[SAMPLER_CUBE] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_CUBE_MAP
};
typeMap[SAMPLER_3D] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_3D
};
typeMap[SAMPLER_2D_SHADOW] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_2D
};
typeMap[SAMPLER_2D_ARRAY] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_2D_ARRAY
};
typeMap[SAMPLER_2D_ARRAY_SHADOW] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_2D_ARRAY
};
typeMap[SAMPLER_CUBE_SHADOW] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_CUBE_MAP
};
typeMap[INT_SAMPLER_2D] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_2D
};
typeMap[INT_SAMPLER_3D] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_3D
};
typeMap[INT_SAMPLER_CUBE] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_CUBE_MAP
};
typeMap[INT_SAMPLER_2D_ARRAY] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_2D_ARRAY
};
typeMap[UNSIGNED_INT_SAMPLER_2D] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_2D
};
typeMap[UNSIGNED_INT_SAMPLER_3D] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_3D
};
typeMap[UNSIGNED_INT_SAMPLER_CUBE] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_CUBE_MAP
};
typeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = {
  Type: null,
  size: 0,
  setter: samplerSetter,
  arraySetter: samplerArraySetter,
  bindPoint: TEXTURE_2D_ARRAY
};

function floatAttribSetter(gl, index) {
  return function (b) {
    if (b.value) {
      gl.disableVertexAttribArray(index);

      switch (b.value.length) {
        case 4:
          gl.vertexAttrib4fv(index, b.value);
          break;

        case 3:
          gl.vertexAttrib3fv(index, b.value);
          break;

        case 2:
          gl.vertexAttrib2fv(index, b.value);
          break;

        case 1:
          gl.vertexAttrib1fv(index, b.value);
          break;

        default:
          throw new Error('the length of a float constant value must be between 1 and 4!');
      }
    } else {
      gl.bindBuffer(ARRAY_BUFFER, b.buffer);
      gl.enableVertexAttribArray(index);
      gl.vertexAttribPointer(index, b.numComponents || b.size, b.type || FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);

      if (b.divisor !== undefined) {
        gl.vertexAttribDivisor(index, b.divisor);
      }
    }
  };
}

function intAttribSetter(gl, index) {
  return function (b) {
    if (b.value) {
      gl.disableVertexAttribArray(index);

      if (b.value.length === 4) {
        gl.vertexAttrib4iv(index, b.value);
      } else {
        throw new Error('The length of an integer constant value must be 4!');
      }
    } else {
      gl.bindBuffer(ARRAY_BUFFER, b.buffer);
      gl.enableVertexAttribArray(index);
      gl.vertexAttribIPointer(index, b.numComponents || b.size, b.type || INT, b.stride || 0, b.offset || 0);

      if (b.divisor !== undefined) {
        gl.vertexAttribDivisor(index, b.divisor);
      }
    }
  };
}

function uintAttribSetter(gl, index) {
  return function (b) {
    if (b.value) {
      gl.disableVertexAttribArray(index);

      if (b.value.length === 4) {
        gl.vertexAttrib4uiv(index, b.value);
      } else {
        throw new Error('The length of an unsigned integer constant value must be 4!');
      }
    } else {
      gl.bindBuffer(ARRAY_BUFFER, b.buffer);
      gl.enableVertexAttribArray(index);
      gl.vertexAttribIPointer(index, b.numComponents || b.size, b.type || UNSIGNED_INT, b.stride || 0, b.offset || 0);

      if (b.divisor !== undefined) {
        gl.vertexAttribDivisor(index, b.divisor);
      }
    }
  };
}

function matAttribSetter(gl, index, typeInfo) {
  var defaultSize = typeInfo.size;
  var count = typeInfo.count;
  return function (b) {
    gl.bindBuffer(ARRAY_BUFFER, b.buffer);
    var numComponents = b.size || b.numComponents || defaultSize;
    var size = numComponents / count;
    var type = b.type || FLOAT;
    var typeInfo = typeMap[type];
    var stride = typeInfo.size * numComponents;
    var normalize = b.normalize || false;
    var offset = b.offset || 0;
    var rowOffset = stride / count;

    for (var i = 0; i < count; ++i) {
      gl.enableVertexAttribArray(index + i);
      gl.vertexAttribPointer(index + i, size, type, normalize, stride, offset + rowOffset * i);

      if (b.divisor !== undefined) {
        gl.vertexAttribDivisor(index + i, b.divisor);
      }
    }
  };
}

var attrTypeMap = {};
attrTypeMap[FLOAT] = {
  size: 4,
  setter: floatAttribSetter
};
attrTypeMap[FLOAT_VEC2] = {
  size: 8,
  setter: floatAttribSetter
};
attrTypeMap[FLOAT_VEC3] = {
  size: 12,
  setter: floatAttribSetter
};
attrTypeMap[FLOAT_VEC4] = {
  size: 16,
  setter: floatAttribSetter
};
attrTypeMap[INT] = {
  size: 4,
  setter: intAttribSetter
};
attrTypeMap[INT_VEC2] = {
  size: 8,
  setter: intAttribSetter
};
attrTypeMap[INT_VEC3] = {
  size: 12,
  setter: intAttribSetter
};
attrTypeMap[INT_VEC4] = {
  size: 16,
  setter: intAttribSetter
};
attrTypeMap[UNSIGNED_INT] = {
  size: 4,
  setter: uintAttribSetter
};
attrTypeMap[UNSIGNED_INT_VEC2] = {
  size: 8,
  setter: uintAttribSetter
};
attrTypeMap[UNSIGNED_INT_VEC3] = {
  size: 12,
  setter: uintAttribSetter
};
attrTypeMap[UNSIGNED_INT_VEC4] = {
  size: 16,
  setter: uintAttribSetter
};
attrTypeMap[BOOL] = {
  size: 4,
  setter: intAttribSetter
};
attrTypeMap[BOOL_VEC2] = {
  size: 8,
  setter: intAttribSetter
};
attrTypeMap[BOOL_VEC3] = {
  size: 12,
  setter: intAttribSetter
};
attrTypeMap[BOOL_VEC4] = {
  size: 16,
  setter: intAttribSetter
};
attrTypeMap[FLOAT_MAT2] = {
  size: 4,
  setter: matAttribSetter,
  count: 2
};
attrTypeMap[FLOAT_MAT3] = {
  size: 9,
  setter: matAttribSetter,
  count: 3
};
attrTypeMap[FLOAT_MAT4] = {
  size: 16,
  setter: matAttribSetter,
  count: 4
}; // make sure we don't see a global gl

var gl = undefined;
/* eslint-disable-line */

var errorRE = /ERROR:\s*\d+:(\d+)/gi;

function addLineNumbersWithError(src) {
  var log = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var lineOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  // Note: Error message formats are not defined by any spec so this may or may not work.
  var matches = _toConsumableArray(log.matchAll(errorRE));

  var lineNoToErrorMap = new Map(matches.map(function (m, ndx) {
    var lineNo = parseInt(m[1]);
    var next = matches[ndx + 1];
    var end = next ? next.index : log.length;
    var msg = log.substring(m.index, end);
    return [lineNo - 1, msg];
  }));
  return src.split('\n').map(function (line, lineNo) {
    var err = lineNoToErrorMap.get(lineNo);
    return "".concat(lineNo + 1 + lineOffset, ": ").concat(line).concat(err ? "\n\n^^^ ".concat(err) : '');
  }).join('\n');
}
/**
 * Error Callback
 * @callback ErrorCallback
 * @param {string} msg error message.
 * @param {number} [lineOffset] amount to add to line number
 * @memberOf module:twgl
 */


var spaceRE = /^[ \t]*\n/;
/**
 * Loads a shader.
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {string} shaderSource The shader source.
 * @param {number} shaderType The type of shader.
 * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors.
 * @return {WebGLShader} The created shader.
 * @private
 */

function loadShader(gl, shaderSource, shaderType, opt_errorCallback) {
  var errFn = opt_errorCallback || error; // Create the shader object

  var shader = gl.createShader(shaderType); // Remove the first end of line because WebGL 2.0 requires
  // #version 300 es
  // as the first line. No whitespace allowed before that line
  // so
  //
  // <script>
  // #version 300 es
  // </script>
  //
  // Has one line before it which is invalid according to GLSL ES 3.00
  //

  var lineOffset = 0;

  if (spaceRE.test(shaderSource)) {
    lineOffset = 1;
    shaderSource = shaderSource.replace(spaceRE, '');
  } // Load the shader source


  gl.shaderSource(shader, shaderSource); // Compile the shader

  gl.compileShader(shader); // Check the compile status

  var compiled = gl.getShaderParameter(shader, COMPILE_STATUS);

  if (!compiled) {
    // Something went wrong during compilation; get the error
    var lastError = gl.getShaderInfoLog(shader);
    errFn("".concat(addLineNumbersWithError(shaderSource, lastError, lineOffset), "\nError compiling ").concat(utils.glEnumToString(gl, shaderType), ": ").concat(lastError));
    gl.deleteShader(shader);
    return null;
  }

  return shader;
}
/**
 * @typedef {Object} ProgramOptions
 * @property {function(string)} [errorCallback] callback for errors
 * @property {Object.<string,number>} [attribLocations] a attribute name to location map
 * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed
 *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise
 *   you can pass an array of names.
 * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.
 * @memberOf module:twgl
 */

/**
 * Gets the program options based on all these optional arguments
 * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in
 * @private
 */


function getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {
  var transformFeedbackVaryings;
  var transformFeedbackMode;

  if (typeof opt_locations === 'function') {
    opt_errorCallback = opt_locations;
    opt_locations = undefined;
  }

  if (typeof opt_attribs === 'function') {
    opt_errorCallback = opt_attribs;
    opt_attribs = undefined;
  } else if (opt_attribs && !Array.isArray(opt_attribs)) {
    // If we have an errorCallback we can just return this object
    // Otherwise we need to construct one with default errorCallback
    if (opt_attribs.errorCallback) {
      return opt_attribs;
    }

    var opt = opt_attribs;
    opt_errorCallback = opt.errorCallback;
    opt_attribs = opt.attribLocations;
    transformFeedbackVaryings = opt.transformFeedbackVaryings;
    transformFeedbackMode = opt.transformFeedbackMode;
  }

  var options = {
    errorCallback: opt_errorCallback || error,
    transformFeedbackVaryings: transformFeedbackVaryings,
    transformFeedbackMode: transformFeedbackMode
  };

  if (opt_attribs) {
    var attribLocations = {};

    if (Array.isArray(opt_attribs)) {
      opt_attribs.forEach(function (attrib, ndx) {
        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;
      });
    } else {
      attribLocations = opt_attribs;
    }

    options.attribLocations = attribLocations;
  }

  return options;
}

var defaultShaderType = ["VERTEX_SHADER", "FRAGMENT_SHADER"];

function getShaderTypeFromScriptType(gl, scriptType) {
  if (scriptType.indexOf("frag") >= 0) {
    return FRAGMENT_SHADER;
  } else if (scriptType.indexOf("vert") >= 0) {
    return VERTEX_SHADER;
  }

  return undefined;
}

function deleteShaders(gl, shaders) {
  shaders.forEach(function (shader) {
    gl.deleteShader(shader);
  });
}
/**
 * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the
 * program and calls useProgram.
 *
 * NOTE: There are 4 signatures for this function
 *
 *     twgl.createProgram(gl, [vs, fs], options);
 *     twgl.createProgram(gl, [vs, fs], opt_errFunc);
 *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);
 *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source
 * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {WebGLProgram?} the created program or null if error.
 * @memberOf module:twgl/programs
 */


function createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {
  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
  var realShaders = [];
  var newShaders = [];

  for (var ndx = 0; ndx < shaders.length; ++ndx) {
    var shader = shaders[ndx];

    if (typeof shader === 'string') {
      var elem = getElementById(shader);
      var src = elem ? elem.text : shader;
      var type = gl[defaultShaderType[ndx]];

      if (elem && elem.type) {
        type = getShaderTypeFromScriptType(gl, elem.type) || type;
      }

      shader = loadShader(gl, src, type, progOptions.errorCallback);
      newShaders.push(shader);
    }

    if (helper.isShader(gl, shader)) {
      realShaders.push(shader);
    }
  }

  if (realShaders.length !== shaders.length) {
    progOptions.errorCallback("not enough shaders for program");
    deleteShaders(gl, newShaders);
    return null;
  }

  var program = gl.createProgram();
  realShaders.forEach(function (shader) {
    gl.attachShader(program, shader);
  });

  if (progOptions.attribLocations) {
    Object.keys(progOptions.attribLocations).forEach(function (attrib) {
      gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);
    });
  }

  var varyings = progOptions.transformFeedbackVaryings;

  if (varyings) {
    if (varyings.attribs) {
      varyings = varyings.attribs;
    }

    if (!Array.isArray(varyings)) {
      varyings = Object.keys(varyings);
    }

    gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || SEPARATE_ATTRIBS);
  }

  gl.linkProgram(program); // Check the link status

  var linked = gl.getProgramParameter(program, LINK_STATUS);

  if (!linked) {
    // something went wrong with the link
    var lastError = gl.getProgramInfoLog(program);
    progOptions.errorCallback("".concat(realShaders.map(function (shader) {
      var src = addLineNumbersWithError(gl.getShaderSource(shader), '', 0);
      var type = gl.getShaderParameter(shader, gl.SHADER_TYPE);
      return "".concat(utils.glEnumToString(gl, type), "\n").concat(src, "}");
    }).join('\n'), "\nError in program linking: ").concat(lastError));
    gl.deleteProgram(program);
    deleteShaders(gl, newShaders);
    return null;
  }

  return program;
}
/**
 * Loads a shader from a script tag.
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {string} scriptId The id of the script tag.
 * @param {number} [opt_shaderType] The type of shader. If not passed in it will
 *     be derived from the type of the script tag.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors.
 * @return {WebGLShader?} The created shader or null if error.
 * @private
 */


function createShaderFromScript(gl, scriptId, opt_shaderType, opt_errorCallback) {
  var shaderSource = "";
  var shaderScript = getElementById(scriptId);

  if (!shaderScript) {
    throw new Error("unknown script element: ".concat(scriptId));
  }

  shaderSource = shaderScript.text;
  var shaderType = opt_shaderType || getShaderTypeFromScriptType(gl, shaderScript.type);

  if (!shaderType) {
    throw new Error('unknown shader type');
  }

  return loadShader(gl, shaderSource, shaderType, opt_errorCallback);
}
/**
 * Creates a program from 2 script tags.
 *
 * NOTE: There are 4 signatures for this function
 *
 *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);
 *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);
 *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);
 *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {string[]} shaderScriptIds Array of ids of the script
 *        tags for the shaders. The first is assumed to be the
 *        vertex shader, the second the fragment shader.
 * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {WebGLProgram?} the created program or null if error.
 * @memberOf module:twgl/programs
 */


function createProgramFromScripts(gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {
  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
  var shaders = [];

  for (var ii = 0; ii < shaderScriptIds.length; ++ii) {
    var shader = createShaderFromScript(gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);

    if (!shader) {
      return null;
    }

    shaders.push(shader);
  }

  return createProgram(gl, shaders, progOptions);
}
/**
 * Creates a program from 2 sources.
 *
 * NOTE: There are 4 signatures for this function
 *
 *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);
 *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);
 *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);
 *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {string[]} shaderSources Array of sources for the
 *        shaders. The first is assumed to be the vertex shader,
 *        the second the fragment shader.
 * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {WebGLProgram?} the created program or null if error.
 * @memberOf module:twgl/programs
 */


function createProgramFromSources(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {
  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
  var shaders = [];

  for (var ii = 0; ii < shaderSources.length; ++ii) {
    var shader = loadShader(gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);

    if (!shader) {
      return null;
    }

    shaders.push(shader);
  }

  return createProgram(gl, shaders, progOptions);
}
/**
 * Returns true if attribute/uniform is a reserved/built in
 *
 * It makes no sense to me why GL returns these because it's
 * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`
 * with names that start with `gl_` (and `webgl_` in WebGL)
 *
 * I can only assume they are there because they might count
 * when computing the number of uniforms/attributes used when you want to
 * know if you are near the limit. That doesn't really make sense
 * to me but the fact that these get returned are in the spec.
 *
 * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or
 *    `gl.getActiveAttrib`.
 * @return {bool} true if it's reserved
 * @private
 */


function isBuiltIn(info) {
  var name = info.name;
  return name.startsWith("gl_") || name.startsWith("webgl_");
}

var tokenRE = /(\.|\[|]|\w+)/g;

var isDigit = function isDigit(s) {
  return s >= '0' && s <= '9';
};

function addSetterToUniformTree(fullPath, setter, node, uniformSetters) {
  var tokens = fullPath.split(tokenRE).filter(function (s) {
    return s !== '';
  });
  var tokenNdx = 0;
  var path = '';

  for (;;) {
    var token = tokens[tokenNdx++]; // has to be name or number

    path += token;
    var isArrayIndex = isDigit(token[0]);
    var accessor = isArrayIndex ? parseInt(token) : token;

    if (isArrayIndex) {
      path += tokens[tokenNdx++]; // skip ']'
    }

    var isLastToken = tokenNdx === tokens.length;

    if (isLastToken) {
      node[accessor] = setter;
      break;
    } else {
      var _token = tokens[tokenNdx++]; // has to be . or [

      var isArray = _token === '[';
      var child = node[accessor] || (isArray ? [] : {});
      node[accessor] = child;
      node = child;

      uniformSetters[path] = uniformSetters[path] || function (node) {
        return function (value) {
          setUniformTree(node, value);
        };
      }(child);

      path += _token;
    }
  }
}
/**
 * Creates setter functions for all uniforms of a shader
 * program.
 *
 * @see {@link module:twgl.setUniforms}
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {WebGLProgram} program the program to create setters for.
 * @returns {Object.<string, function>} an object with a setter by name for each uniform
 * @memberOf module:twgl/programs
 */


function createUniformSetters(gl, program) {
  var textureUnit = 0;
  /**
   * Creates a setter for a uniform of the given program with it's
   * location embedded in the setter.
   * @param {WebGLProgram} program
   * @param {WebGLUniformInfo} uniformInfo
   * @returns {function} the created setter.
   */

  function createUniformSetter(program, uniformInfo, location) {
    var isArray = uniformInfo.name.endsWith("[0]");
    var type = uniformInfo.type;
    var typeInfo = typeMap[type];

    if (!typeInfo) {
      throw new Error("unknown type: 0x".concat(type.toString(16))); // we should never get here.
    }

    var setter;

    if (typeInfo.bindPoint) {
      // it's a sampler
      var unit = textureUnit;
      textureUnit += uniformInfo.size;

      if (isArray) {
        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);
      } else {
        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);
      }
    } else {
      if (typeInfo.arraySetter && isArray) {
        setter = typeInfo.arraySetter(gl, location);
      } else {
        setter = typeInfo.setter(gl, location);
      }
    }

    setter.location = location;
    return setter;
  }

  var uniformSetters = {};
  var uniformTree = {};
  var numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);

  for (var ii = 0; ii < numUniforms; ++ii) {
    var uniformInfo = gl.getActiveUniform(program, ii);

    if (isBuiltIn(uniformInfo)) {
      continue;
    }

    var name = uniformInfo.name; // remove the array suffix.

    if (name.endsWith("[0]")) {
      name = name.substr(0, name.length - 3);
    }

    var location = gl.getUniformLocation(program, uniformInfo.name); // the uniform will have no location if it's in a uniform block

    if (location) {
      var setter = createUniformSetter(program, uniformInfo, location);
      uniformSetters[name] = setter;
      addSetterToUniformTree(name, setter, uniformTree, uniformSetters);
    }
  }

  return uniformSetters;
}
/**
 * @typedef {Object} TransformFeedbackInfo
 * @property {number} index index of transform feedback
 * @property {number} type GL type
 * @property {number} size 1 - 4
 * @memberOf module:twgl
 */

/**
 * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {WebGLProgram} program an existing WebGLProgram.
 * @return {Object<string, module:twgl.TransformFeedbackInfo>}
 * @memberOf module:twgl
 */


function createTransformFeedbackInfo(gl, program) {
  var info = {};
  var numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);

  for (var ii = 0; ii < numVaryings; ++ii) {
    var varying = gl.getTransformFeedbackVarying(program, ii);
    info[varying.name] = {
      index: ii,
      type: varying.type,
      size: varying.size
    };
  }

  return info;
}
/**
 * Binds buffers for transform feedback.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.
 * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.
 * @memberOf module:twgl
 */


function bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {
  if (transformFeedbackInfo.transformFeedbackInfo) {
    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;
  }

  if (bufferInfo.attribs) {
    bufferInfo = bufferInfo.attribs;
  }

  for (var name in bufferInfo) {
    var varying = transformFeedbackInfo[name];

    if (varying) {
      var buf = bufferInfo[name];

      if (buf.offset) {
        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);
      } else {
        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);
      }
    }
  }
}
/**
 * Creates a transform feedback and sets the buffers
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}
 * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.
 * @return {WebGLTransformFeedback} the created transform feedback
 * @memberOf module:twgl
 */


function createTransformFeedback(gl, programInfo, bufferInfo) {
  var tf = gl.createTransformFeedback();
  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);
  gl.useProgram(programInfo.program);
  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);
  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);
  return tf;
}
/**
 * @typedef {Object} UniformData
 * @property {string} name The name of the uniform
 * @property {number} type The WebGL type enum for this uniform
 * @property {number} size The number of elements for this uniform
 * @property {number} blockNdx The block index this uniform appears in
 * @property {number} offset The byte offset in the block for this uniform's value
 * @memberOf module:twgl
 */

/**
 * The specification for one UniformBlockObject
 *
 * @typedef {Object} BlockSpec
 * @property {number} index The index of the block.
 * @property {number} size The size in bytes needed for the block
 * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices
 *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.
 * @property {bool} usedByVertexShader Self explanatory
 * @property {bool} usedByFragmentShader Self explanatory
 * @property {bool} used Self explanatory
 * @memberOf module:twgl
 */

/**
 * A `UniformBlockSpec` represents the data needed to create and bind
 * UniformBlockObjects for a given program
 *
 * @typedef {Object} UniformBlockSpec
 * @property {Object.<string, module:twgl.BlockSpec>} blockSpecs The BlockSpec for each block by block name
 * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.
 * @memberOf module:twgl
 */

/**
 * Creates a UniformBlockSpec for the given program.
 *
 * A UniformBlockSpec represents the data needed to create and bind
 * UniformBlockObjects
 *
 * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context
 * @param {WebGLProgram} program A WebGLProgram for a successfully linked program
 * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec
 * @memberOf module:twgl/programs
 */


function createUniformBlockSpecFromProgram(gl, program) {
  var numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);
  var uniformData = [];
  var uniformIndices = [];

  for (var ii = 0; ii < numUniforms; ++ii) {
    uniformIndices.push(ii);
    uniformData.push({});
    var uniformInfo = gl.getActiveUniform(program, ii);
    uniformData[ii].name = uniformInfo.name;
  }

  [["UNIFORM_TYPE", "type"], ["UNIFORM_SIZE", "size"], // num elements
  ["UNIFORM_BLOCK_INDEX", "blockNdx"], ["UNIFORM_OFFSET", "offset"]].forEach(function (pair) {
    var pname = pair[0];
    var key = pair[1];
    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function (value, ndx) {
      uniformData[ndx][key] = value;
    });
  });
  var blockSpecs = {};
  var numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);

  for (var _ii = 0; _ii < numUniformBlocks; ++_ii) {
    var name = gl.getActiveUniformBlockName(program, _ii);
    var blockSpec = {
      index: gl.getUniformBlockIndex(program, name),
      usedByVertexShader: gl.getActiveUniformBlockParameter(program, _ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),
      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, _ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),
      size: gl.getActiveUniformBlockParameter(program, _ii, UNIFORM_BLOCK_DATA_SIZE),
      uniformIndices: gl.getActiveUniformBlockParameter(program, _ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES)
    };
    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;
    blockSpecs[name] = blockSpec;
  }

  return {
    blockSpecs: blockSpecs,
    uniformData: uniformData
  };
}

var arraySuffixRE = /\[\d+\]\.$/; // better way to check?

var pad = function pad(v, padding) {
  return ((v + (padding - 1)) / padding | 0) * padding;
};

function createUniformBlockUniformSetter(view, isArray, rows, cols) {
  if (isArray || rows) {
    cols = cols || 1;
    var numElements = view.length;
    var totalRows = numElements / 4;
    return function (value) {
      var dst = 0;
      var src = 0;

      for (var row = 0; row < totalRows; ++row) {
        for (var col = 0; col < cols; ++col) {
          view[dst++] = value[src++];
        }

        dst += 4 - cols;
      }
    };
  } else {
    return function (value) {
      if (value.length) {
        view.set(value);
      } else {
        view[0] = value;
      }
    };
  }
}
/**
 * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values
 * and a corresponding WebGLBuffer to hold those values on the GPU
 *
 * @typedef {Object} UniformBlockInfo
 * @property {string} name The name of the block
 * @property {ArrayBuffer} array The array buffer that contains the uniform values
 * @property {Float32Array} asFloat A float view on the array buffer. This is useful
 *    inspecting the contents of the buffer in the debugger.
 * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.
 * @property {number} [offset] offset into buffer
 * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.
 *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset
 *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`
 *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an
 *   `Int32Array` view, etc.
 * @property {Object<string, function>} setters A setter for this uniform.
 *   The reason to use setters is elements of arrays are padded to vec4 sizes which
 *   means if you want to set an array of 4 floats you'd need to set 16 values
 *   (or set elements 0, 4, 8, 12). In other words
 *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`
 *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in
 *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)
 *   or via {@link module:twgl.setBlockUniforms}
 * @memberOf module:twgl
 */

/**
 * Creates a `UniformBlockInfo` for the specified block
 *
 * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy
 * `UniformBlockInfo` is returned**. This is because when debugging GLSL
 * it is common to comment out large portions of a shader or for example set
 * the final output to a constant. When that happens blocks get optimized out.
 * If this function did not create dummy blocks your code would crash when debugging.
 *
 * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext
 * @param {WebGLProgram} program A WebGLProgram
 * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned
 *     from {@link module:twgl.createUniformBlockSpecFromProgram}.
 * @param {string} blockName The name of the block.
 * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo
 * @memberOf module:twgl/programs
 */


function createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {
  var blockSpecs = uniformBlockSpec.blockSpecs;
  var uniformData = uniformBlockSpec.uniformData;
  var blockSpec = blockSpecs[blockName];

  if (!blockSpec) {
    warn("no uniform block object named:", blockName);
    return {
      name: blockName,
      uniforms: {}
    };
  }

  var array = new ArrayBuffer(blockSpec.size);
  var buffer = gl.createBuffer();
  var uniformBufferIndex = blockSpec.index;
  gl.bindBuffer(UNIFORM_BUFFER, buffer);
  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);
  var prefix = blockName + ".";

  if (arraySuffixRE.test(prefix)) {
    prefix = prefix.replace(arraySuffixRE, ".");
  }

  var uniforms = {};
  var setters = {};
  var setterTree = {};
  blockSpec.uniformIndices.forEach(function (uniformNdx) {
    var data = uniformData[uniformNdx];
    var name = data.name;

    if (name.startsWith(prefix)) {
      name = name.substr(prefix.length);
    }

    var isArray = name.endsWith('[0]');

    if (isArray) {
      name = name.substr(0, name.length - 3);
    }

    var typeInfo = typeMap[data.type];
    var Type = typeInfo.Type;
    var byteLength = isArray ? pad(typeInfo.size, 16) * data.size : typeInfo.size * data.size;
    var uniformView = new Type(array, data.offset, byteLength / Type.BYTES_PER_ELEMENT);
    uniforms[name] = uniformView; // Note: I'm not sure what to do here. The original
    // idea was to create TypedArray views into each part
    // of the block. This is useful, for example if you have
    // a block with { mat4: model; mat4 view; mat4 projection; }
    // you'll get a Float32Array for each one suitable for
    // passing to most JS math libraries including twgl's and glMatrix.js.
    //
    // But, if you have a an array of structures, especially if that
    // array is large, you get a whole bunch of TypedArray views.
    // Every one of them has overhead and switching between them all
    // is probably a cache miss. In that case it would really be better
    // to just have one view (asFloat) and have all the setters
    // just reference the correct portion. But, then you can't easily
    // treat a matrix, or a vec4, as a standalone thing like you can
    // with all the views.
    //
    // Another problem with the views is they are not shared. With
    // uniforms you have one set of setters. With UniformBlockInfo
    // you have a set of setters *pre block instance*. That's because
    // TypedArray views can't be mapped to different buffers.
    //
    // My gut right now is if you really want the speed and compactness
    // then you should probably roll your own solution. TWGL's goal
    // here is ease of use as AFAICT there is no simple generic efficient
    // solution.

    var setter = createUniformBlockUniformSetter(uniformView, isArray, typeInfo.rows, typeInfo.cols);
    setters[name] = setter;
    addSetterToUniformTree(name, setter, setterTree, setters);
  });
  return {
    name: blockName,
    array: array,
    asFloat: new Float32Array(array),
    // for debugging
    buffer: buffer,
    uniforms: uniforms,
    setters: setters
  };
}
/**
 * Creates a `UniformBlockInfo` for the specified block
 *
 * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy
 * `UniformBlockInfo` is returned**. This is because when debugging GLSL
 * it is common to comment out large portions of a shader or for example set
 * the final output to a constant. When that happens blocks get optimized out.
 * If this function did not create dummy blocks your code would crash when debugging.
 *
 * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext
 * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`
 *     as returned from {@link module:twgl.createProgramInfo}
 * @param {string} blockName The name of the block.
 * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo
 * @memberOf module:twgl/programs
 */


function createUniformBlockInfo(gl, programInfo, blockName) {
  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);
}
/**
 * Binds a uniform block to the matching uniform block point.
 * Matches by blocks by name so blocks must have the same name not just the same
 * structure.
 *
 * If you have changed any values and you upload the values into the corresponding WebGLBuffer
 * call {@link module:twgl.setUniformBlock} instead.
 *
 * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.
 * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`
 *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as
 *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.
 * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from
 *     {@link module:twgl.createUniformBlockInfo}.
 * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name
 *     no buffer is bound.
 * @memberOf module:twgl/programs
 */


function bindUniformBlock(gl, programInfo, uniformBlockInfo) {
  var uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;
  var blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];

  if (blockSpec) {
    var bufferBindIndex = blockSpec.index;
    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);
    return true;
  }

  return false;
}
/**
 * Uploads the current uniform values to the corresponding WebGLBuffer
 * and binds that buffer to the program's corresponding bind point for the uniform block object.
 *
 * If you haven't changed any values and you only need to bind the uniform block object
 * call {@link module:twgl.bindUniformBlock} instead.
 *
 * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.
 * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`
 *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as
 *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.
 * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from
 *     {@link module:twgl.createUniformBlockInfo}.
 * @memberOf module:twgl/programs
 */


function setUniformBlock(gl, programInfo, uniformBlockInfo) {
  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {
    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);
  }
}
/**
 * Sets values of a uniform block object
 *
 * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.
 * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given
 *    type of uniform. So for example given a block like
 *
 *       uniform SomeBlock {
 *         float someFloat;
 *         vec2 someVec2;
 *         vec3 someVec3Array[2];
 *         int someInt;
 *       }
 *
 *  You can set the values of the uniform block with
 *
 *       twgl.setBlockUniforms(someBlockInfo, {
 *          someFloat: 12.3,
 *          someVec2: [1, 2],
 *          someVec3Array: [1, 2, 3, 4, 5, 6],
 *          someInt: 5,
 *       }
 *
 *  Arrays can be JavaScript arrays or typed arrays
 *
 *  You can also fill out structure and array values either via
 *  shortcut. Example
 *
 *     // -- in shader --
 *     struct Light {
 *       float intensity;
 *       vec4 color;
 *       float nearFar[2];
 *     };
 *     uniform Lights {
 *       Light lights[2];
 *     };
 *
 *     // in JavaScript
 *
 *     twgl.setBlockUniforms(someBlockInfo, {
 *       lights: [
 *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },
 *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },
 *       ],
 *     });
 *
 *   or the more traditional way
 *
 *     twgl.setBlockUniforms(someBlockInfo, {
 *       "lights[0].intensity": 5.0,
 *       "lights[0].color": [1, 0, 0, 1],
 *       "lights[0].nearFar": [0.1, 10],
 *       "lights[1].intensity": 2.0,
 *       "lights[1].color": [0, 0, 1, 1],
 *       "lights[1].nearFar": [0.2, 15],
 *     });
 *
 *   You can also specify partial paths
 *
 *     twgl.setBlockUniforms(someBlockInfo, {
 *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },
 *     });
 *
 *   But you can not specify leaf array indices.
 *
 *     twgl.setBlockUniforms(someBlockInfo, {
 *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf
 *       'lights[1].nearFar': [0.2, 15], // GOOD
 *     });
 *
 *  **IMPORTANT!**, packing in a UniformBlock is unintuitive.
 *  For example the actual layout of `someVec3Array` above in memory
 *  is `1, 2, 3, unused, 4, 5, 6, unused`. twgl takes in 6 values
 *  as shown about and copies them, skipping the padding. This might
 *  be confusing if you're already familiar with Uniform blocks.
 *
 *  If you want to deal with the padding yourself you can access the array
 *  buffer views directly. eg:
 *
 *      someBlockInfo.someVec3Array.set([1, 2, 3, 0, 4, 5, 6, 0]);
 *
 *  Any name that doesn't match will be ignored
 * @memberOf module:twgl/programs
 */


function setBlockUniforms(uniformBlockInfo, values) {
  var setters = uniformBlockInfo.setters;

  for (var name in values) {
    var setter = setters[name];

    if (setter) {
      var value = values[name];
      setter(value);
    }
  }
}

function setUniformTree(tree, values) {
  for (var name in values) {
    var prop = tree[name];

    if (typeof prop === 'function') {
      prop(values[name]);
    } else {
      setUniformTree(tree[name], values[name]);
    }
  }
}
/**
 * Set uniforms and binds related textures.
 *
 * example:
 *
 *     const programInfo = createProgramInfo(
 *         gl, ["some-vs", "some-fs"]);
 *
 *     const tex1 = gl.createTexture();
 *     const tex2 = gl.createTexture();
 *
 *     ... assume we setup the textures with data ...
 *
 *     const uniforms = {
 *       u_someSampler: tex1,
 *       u_someOtherSampler: tex2,
 *       u_someColor: [1,0,0,1],
 *       u_somePosition: [0,1,1],
 *       u_someMatrix: [
 *         1,0,0,0,
 *         0,1,0,0,
 *         0,0,1,0,
 *         0,0,0,0,
 *       ],
 *     };
 *
 *     gl.useProgram(program);
 *
 * This will automatically bind the textures AND set the
 * uniforms.
 *
 *     twgl.setUniforms(programInfo, uniforms);
 *
 * For the example above it is equivalent to
 *
 *     var texUnit = 0;
 *     gl.activeTexture(gl.TEXTURE0 + texUnit);
 *     gl.bindTexture(gl.TEXTURE_2D, tex1);
 *     gl.uniform1i(u_someSamplerLocation, texUnit++);
 *     gl.activeTexture(gl.TEXTURE0 + texUnit);
 *     gl.bindTexture(gl.TEXTURE_2D, tex2);
 *     gl.uniform1i(u_someSamplerLocation, texUnit++);
 *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);
 *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);
 *     gl.uniformMatrix4fv(u_someMatrix, false, [
 *         1,0,0,0,
 *         0,1,0,0,
 *         0,0,1,0,
 *         0,0,0,0,
 *       ]);
 *
 * Note it is perfectly reasonable to call `setUniforms` multiple times. For example
 *
 *     const uniforms = {
 *       u_someSampler: tex1,
 *       u_someOtherSampler: tex2,
 *     };
 *
 *     const moreUniforms {
 *       u_someColor: [1,0,0,1],
 *       u_somePosition: [0,1,1],
 *       u_someMatrix: [
 *         1,0,0,0,
 *         0,1,0,0,
 *         0,0,1,0,
 *         0,0,0,0,
 *       ],
 *     };
 *
 *     twgl.setUniforms(programInfo, uniforms);
 *     twgl.setUniforms(programInfo, moreUniforms);
 *
 * You can also add WebGLSamplers to uniform samplers as in
 *
 *     const uniforms = {
 *       u_someSampler: {
 *         texture: someWebGLTexture,
 *         sampler: someWebGLSampler,
 *       },
 *     };
 *
 * In which case both the sampler and texture will be bound to the
 * same unit.
 *
 * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from
 *        `createUniformSetters`.
 * @param {Object.<string, ?>} values an object with values for the
 *        uniforms.
 *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example
 *
 *     const sharedUniforms = {
 *       u_fogNear: 10,
 *       u_projection: ...
 *       ...
 *     };
 *
 *     const localUniforms = {
 *       u_world: ...
 *       u_diffuseColor: ...
 *     };
 *
 *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);
 *
 *     // is the same as
 *
 *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);
 *
 *     // is the same as
 *
 *     twgl.setUniforms(programInfo, sharedUniforms);
 *     twgl.setUniforms(programInfo, localUniforms};
 *
 *   You can also fill out structure and array values either via
 *   shortcut. Example
 *
 *     // -- in shader --
 *     struct Light {
 *       float intensity;
 *       vec4 color;
 *       float nearFar[2];
 *     };
 *     uniform Light lights[2];
 *
 *     // in JavaScript
 *
 *     twgl.setUniforms(programInfo, {
 *       lights: [
 *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },
 *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },
 *       ],
 *     });
 *
 *   or the more traditional way
 *
 *     twgl.setUniforms(programInfo, {
 *       "lights[0].intensity": 5.0,
 *       "lights[0].color": [1, 0, 0, 1],
 *       "lights[0].nearFar": [0.1, 10],
 *       "lights[1].intensity": 2.0,
 *       "lights[1].color": [0, 0, 1, 1],
 *       "lights[1].nearFar": [0.2, 15],
 *     });
 *
 *   You can also specify partial paths
 *
 *     twgl.setUniforms(programInfo, {
 *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },
 *     });
 *
 *   But you can not specify leaf array indices
 *
 *     twgl.setUniforms(programInfo, {
 *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf
 *       'lights[1].nearFar': [0.2, 15], // GOOD
 *     });
 *
 * @memberOf module:twgl/programs
 */


function setUniforms(setters) {
  // eslint-disable-line
  var actualSetters = setters.uniformSetters || setters;
  var numArgs = arguments.length <= 1 ? 0 : arguments.length - 1;

  for (var aNdx = 0; aNdx < numArgs; ++aNdx) {
    var values = aNdx + 1 < 1 || arguments.length <= aNdx + 1 ? undefined : arguments[aNdx + 1];

    if (Array.isArray(values)) {
      var numValues = values.length;

      for (var ii = 0; ii < numValues; ++ii) {
        setUniforms(actualSetters, values[ii]);
      }
    } else {
      for (var name in values) {
        var setter = actualSetters[name];

        if (setter) {
          setter(values[name]);
        }
      }
    }
  }
}
/**
 * Alias for `setUniforms`
 * @function
 * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from
 *        `createUniformSetters`.
 * @param {Object.<string, ?>} values an object with values for the
 * @memberOf module:twgl/programs
 */


var setUniformsAndBindTextures = setUniforms;
/**
 * Creates setter functions for all attributes of a shader
 * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.
 *
 * @see {@link module:twgl.setAttributes} for example
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {WebGLProgram} program the program to create setters for.
 * @return {Object.<string, function>} an object with a setter for each attribute by name.
 * @memberOf module:twgl/programs
 */

exports.setUniformsAndBindTextures = setUniformsAndBindTextures;

function createAttributeSetters(gl, program) {
  var attribSetters = {};
  var numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);

  for (var ii = 0; ii < numAttribs; ++ii) {
    var attribInfo = gl.getActiveAttrib(program, ii);

    if (isBuiltIn(attribInfo)) {
      continue;
    }

    var index = gl.getAttribLocation(program, attribInfo.name);
    var typeInfo = attrTypeMap[attribInfo.type];
    var setter = typeInfo.setter(gl, index, typeInfo);
    setter.location = index;
    attribSetters[attribInfo.name] = setter;
  }

  return attribSetters;
}
/**
 * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})
 *
 * Example:
 *
 *     const program = createProgramFromScripts(
 *         gl, ["some-vs", "some-fs");
 *
 *     const attribSetters = createAttributeSetters(program);
 *
 *     const positionBuffer = gl.createBuffer();
 *     const texcoordBuffer = gl.createBuffer();
 *
 *     const attribs = {
 *       a_position: {buffer: positionBuffer, numComponents: 3},
 *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},
 *     };
 *
 *     gl.useProgram(program);
 *
 * This will automatically bind the buffers AND set the
 * attributes.
 *
 *     setAttributes(attribSetters, attribs);
 *
 * Properties of attribs. For each attrib you can add
 * properties:
 *
 * *   type: the type of data in the buffer. Default = gl.FLOAT
 * *   normalize: whether or not to normalize the data. Default = false
 * *   stride: the stride. Default = 0
 * *   offset: offset into the buffer. Default = 0
 * *   divisor: the divisor for instances. Default = undefined
 *
 * For example if you had 3 value float positions, 2 value
 * float texcoord and 4 value uint8 colors you'd setup your
 * attribs like this
 *
 *     const attribs = {
 *       a_position: {buffer: positionBuffer, numComponents: 3},
 *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},
 *       a_color: {
 *         buffer: colorBuffer,
 *         numComponents: 4,
 *         type: gl.UNSIGNED_BYTE,
 *         normalize: true,
 *       },
 *     };
 *
 * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters
 * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.
 * @memberOf module:twgl/programs
 * @deprecated use {@link module:twgl.setBuffersAndAttributes}
 */


function setAttributes(setters, buffers) {
  for (var name in buffers) {
    var setter = setters[name];

    if (setter) {
      setter(buffers[name]);
    }
  }
}
/**
 * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate
 *
 * Example:
 *
 *     const programInfo = createProgramInfo(
 *         gl, ["some-vs", "some-fs");
 *
 *     const arrays = {
 *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
 *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
 *     };
 *
 *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);
 *
 *     gl.useProgram(programInfo.program);
 *
 * This will automatically bind the buffers AND set the
 * attributes.
 *
 *     setBuffersAndAttributes(gl, programInfo, bufferInfo);
 *
 * For the example above it is equivalent to
 *
 *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
 *     gl.enableVertexAttribArray(a_positionLocation);
 *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);
 *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);
 *     gl.enableVertexAttribArray(a_texcoordLocation);
 *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
 * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}
 * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.
 *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}
 * @memberOf module:twgl/programs
 */


function setBuffersAndAttributes(gl, programInfo, buffers) {
  if (buffers.vertexArrayObject) {
    gl.bindVertexArray(buffers.vertexArrayObject);
  } else {
    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);

    if (buffers.indices) {
      gl.bindBuffer(ELEMENT_ARRAY_BUFFER, buffers.indices);
    }
  }
}
/**
 * @typedef {Object} ProgramInfo
 * @property {WebGLProgram} program A shader program
 * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,
 * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,
 * @property {module:twgl.UniformBlockSpec} [uniformBlockSpec] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..
 * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks
 * @memberOf module:twgl
 */

/**
 * Creates a ProgramInfo from an existing program.
 *
 * A ProgramInfo contains
 *
 *     programInfo = {
 *        program: WebGLProgram,
 *        uniformSetters: object of setters as returned from createUniformSetters,
 *        attribSetters: object of setters as returned from createAttribSetters,
 *     }
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {WebGLProgram} program an existing WebGLProgram.
 * @return {module:twgl.ProgramInfo} The created ProgramInfo.
 * @memberOf module:twgl/programs
 */


function createProgramInfoFromProgram(gl, program) {
  var uniformSetters = createUniformSetters(gl, program);
  var attribSetters = createAttributeSetters(gl, program);
  var programInfo = {
    program: program,
    uniformSetters: uniformSetters,
    attribSetters: attribSetters
  };

  if (utils.isWebGL2(gl)) {
    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);
    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);
  }

  return programInfo;
}
/**
 * Creates a ProgramInfo from 2 sources.
 *
 * A ProgramInfo contains
 *
 *     programInfo = {
 *        program: WebGLProgram,
 *        uniformSetters: object of setters as returned from createUniformSetters,
 *        attribSetters: object of setters as returned from createAttribSetters,
 *     }
 *
 * NOTE: There are 4 signatures for this function
 *
 *     twgl.createProgramInfo(gl, [vs, fs], options);
 *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);
 *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);
 *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {string[]} shaderSources Array of sources for the
 *        shaders or ids. The first is assumed to be the vertex shader,
 *        the second the fragment shader.
 * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile
 * @memberOf module:twgl/programs
 */


function createProgramInfo(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {
  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
  var good = true;
  shaderSources = shaderSources.map(function (source) {
    // Lets assume if there is no \n it's an id
    if (source.indexOf("\n") < 0) {
      var script = getElementById(source);

      if (!script) {
        progOptions.errorCallback("no element with id: " + source);
        good = false;
      } else {
        source = script.text;
      }
    }

    return source;
  });

  if (!good) {
    return null;
  }

  var program = createProgramFromSources(gl, shaderSources, progOptions);

  if (!program) {
    return null;
  }

  return createProgramInfoFromProgram(gl, program);
}

/***/ }),

/***/ "./src/textures.js":
/*!*************************!*\
  !*** ./src/textures.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_135038__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

exports.__esModule = true;
exports.setTextureDefaults_ = setDefaults;
exports.createSampler = createSampler;
exports.createSamplers = createSamplers;
exports.setSamplerParameters = setSamplerParameters;
exports.createTexture = createTexture;
exports.setEmptyTexture = setEmptyTexture;
exports.setTextureFromArray = setTextureFromArray;
exports.loadTextureFromUrl = loadTextureFromUrl;
exports.setTextureFromElement = setTextureFromElement;
exports.setTextureFilteringForSize = setTextureFilteringForSize;
exports.setTextureParameters = setTextureParameters;
exports.setDefaultTextureColor = setDefaultTextureColor;
exports.createTextures = createTextures;
exports.resizeTexture = resizeTexture;
exports.canGenerateMipmap = canGenerateMipmap;
exports.canFilter = canFilter;
exports.getNumComponentsForFormat = getNumComponentsForFormat;
exports.getBytesPerElementForInternalFormat = getBytesPerElementForInternalFormat;
exports.getFormatAndTypeForInternalFormat = getFormatAndTypeForInternalFormat;

var utils = _interopRequireWildcard(__nested_webpack_require_135038__(/*! ./utils.js */ "./src/utils.js"));

var typedArrays = _interopRequireWildcard(__nested_webpack_require_135038__(/*! ./typedarrays.js */ "./src/typedarrays.js"));

var helper = _interopRequireWildcard(__nested_webpack_require_135038__(/*! ./helper.js */ "./src/helper.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * Low level texture related functions
 *
 * You should generally not need to use these functions. They are provided
 * for those cases where you're doing something out of the ordinary
 * and you need lower level access.
 *
 * For backward compatibility they are available at both `twgl.textures` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/textures
 */
// make sure we don't see a global gl
var gl = undefined;
/* eslint-disable-line */

var defaults = {
  textureColor: new Uint8Array([128, 192, 255, 255]),
  textureOptions: {},
  crossOrigin: undefined
};
var isArrayBuffer = typedArrays.isArrayBuffer; // Should we make this on demand?

var getShared2DContext = function () {
  var s_ctx;
  return function getShared2DContext() {
    s_ctx = s_ctx || (typeof document !== 'undefined' && document.createElement ? document.createElement("canvas").getContext("2d") : null);
    return s_ctx;
  };
}(); // NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but
//       not only does Firefox NOT support it but Firefox freezes immediately
//       if you try to create one instead of just returning null and continuing.
//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext("2d"));  // OffscreenCanvas may not support 2d
// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2
// we can use the various unpack settings. Otherwise we could try using
// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap
// is async and the current TWGL code expects a non-Async result though that
// might not be a problem. ImageBitmap though is not available in Edge or Safari
// as of 2018-01-02

/* PixelFormat */


var ALPHA = 0x1906;
var RGB = 0x1907;
var RGBA = 0x1908;
var LUMINANCE = 0x1909;
var LUMINANCE_ALPHA = 0x190A;
var DEPTH_COMPONENT = 0x1902;
var DEPTH_STENCIL = 0x84F9;
/* TextureWrapMode */
// const REPEAT                         = 0x2901;
// const MIRRORED_REPEAT                = 0x8370;

var CLAMP_TO_EDGE = 0x812f;
/* TextureMagFilter */

var NEAREST = 0x2600;
var LINEAR = 0x2601;
/* TextureMinFilter */
// const NEAREST_MIPMAP_NEAREST         = 0x2700;
// const LINEAR_MIPMAP_NEAREST          = 0x2701;
// const NEAREST_MIPMAP_LINEAR          = 0x2702;
// const LINEAR_MIPMAP_LINEAR           = 0x2703;

/* Texture Target */

var TEXTURE_2D = 0x0de1;
var TEXTURE_CUBE_MAP = 0x8513;
var TEXTURE_3D = 0x806f;
var TEXTURE_2D_ARRAY = 0x8c1a;
/* Cubemap Targets */

var TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
var TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
var TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
var TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
var TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
var TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a;
/* Texture Parameters */

var TEXTURE_MIN_FILTER = 0x2801;
var TEXTURE_MAG_FILTER = 0x2800;
var TEXTURE_WRAP_S = 0x2802;
var TEXTURE_WRAP_T = 0x2803;
var TEXTURE_WRAP_R = 0x8072;
var TEXTURE_MIN_LOD = 0x813a;
var TEXTURE_MAX_LOD = 0x813b;
var TEXTURE_BASE_LEVEL = 0x813c;
var TEXTURE_MAX_LEVEL = 0x813d;
/* Pixel store */

var UNPACK_ALIGNMENT = 0x0cf5;
var UNPACK_ROW_LENGTH = 0x0cf2;
var UNPACK_IMAGE_HEIGHT = 0x806e;
var UNPACK_SKIP_PIXELS = 0x0cf4;
var UNPACK_SKIP_ROWS = 0x0cf3;
var UNPACK_SKIP_IMAGES = 0x806d;
var UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;
var UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;
var UNPACK_FLIP_Y_WEBGL = 0x9240;
var R8 = 0x8229;
var R8_SNORM = 0x8F94;
var R16F = 0x822D;
var R32F = 0x822E;
var R8UI = 0x8232;
var R8I = 0x8231;
var RG16UI = 0x823A;
var RG16I = 0x8239;
var RG32UI = 0x823C;
var RG32I = 0x823B;
var RG8 = 0x822B;
var RG8_SNORM = 0x8F95;
var RG16F = 0x822F;
var RG32F = 0x8230;
var RG8UI = 0x8238;
var RG8I = 0x8237;
var R16UI = 0x8234;
var R16I = 0x8233;
var R32UI = 0x8236;
var R32I = 0x8235;
var RGB8 = 0x8051;
var SRGB8 = 0x8C41;
var RGB565 = 0x8D62;
var RGB8_SNORM = 0x8F96;
var R11F_G11F_B10F = 0x8C3A;
var RGB9_E5 = 0x8C3D;
var RGB16F = 0x881B;
var RGB32F = 0x8815;
var RGB8UI = 0x8D7D;
var RGB8I = 0x8D8F;
var RGB16UI = 0x8D77;
var RGB16I = 0x8D89;
var RGB32UI = 0x8D71;
var RGB32I = 0x8D83;
var RGBA8 = 0x8058;
var SRGB8_ALPHA8 = 0x8C43;
var RGBA8_SNORM = 0x8F97;
var RGB5_A1 = 0x8057;
var RGBA4 = 0x8056;
var RGB10_A2 = 0x8059;
var RGBA16F = 0x881A;
var RGBA32F = 0x8814;
var RGBA8UI = 0x8D7C;
var RGBA8I = 0x8D8E;
var RGB10_A2UI = 0x906F;
var RGBA16UI = 0x8D76;
var RGBA16I = 0x8D88;
var RGBA32I = 0x8D82;
var RGBA32UI = 0x8D70;
var DEPTH_COMPONENT16 = 0x81A5;
var DEPTH_COMPONENT24 = 0x81A6;
var DEPTH_COMPONENT32F = 0x8CAC;
var DEPTH32F_STENCIL8 = 0x8CAD;
var DEPTH24_STENCIL8 = 0x88F0;
/* DataType */

var BYTE = 0x1400;
var UNSIGNED_BYTE = 0x1401;
var SHORT = 0x1402;
var UNSIGNED_SHORT = 0x1403;
var INT = 0x1404;
var UNSIGNED_INT = 0x1405;
var FLOAT = 0x1406;
var UNSIGNED_SHORT_4_4_4_4 = 0x8033;
var UNSIGNED_SHORT_5_5_5_1 = 0x8034;
var UNSIGNED_SHORT_5_6_5 = 0x8363;
var HALF_FLOAT = 0x140B;
var HALF_FLOAT_OES = 0x8D61; // Thanks Khronos for making this different >:(

var UNSIGNED_INT_2_10_10_10_REV = 0x8368;
var UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
var UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
var FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
var UNSIGNED_INT_24_8 = 0x84FA;
var RG = 0x8227;
var RG_INTEGER = 0x8228;
var RED = 0x1903;
var RED_INTEGER = 0x8D94;
var RGB_INTEGER = 0x8D98;
var RGBA_INTEGER = 0x8D99;
var formatInfo = {};
{
  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle
  // the name.
  var f = formatInfo;
  f[ALPHA] = {
    numColorComponents: 1
  };
  f[LUMINANCE] = {
    numColorComponents: 1
  };
  f[LUMINANCE_ALPHA] = {
    numColorComponents: 2
  };
  f[RGB] = {
    numColorComponents: 3
  };
  f[RGBA] = {
    numColorComponents: 4
  };
  f[RED] = {
    numColorComponents: 1
  };
  f[RED_INTEGER] = {
    numColorComponents: 1
  };
  f[RG] = {
    numColorComponents: 2
  };
  f[RG_INTEGER] = {
    numColorComponents: 2
  };
  f[RGB] = {
    numColorComponents: 3
  };
  f[RGB_INTEGER] = {
    numColorComponents: 3
  };
  f[RGBA] = {
    numColorComponents: 4
  };
  f[RGBA_INTEGER] = {
    numColorComponents: 4
  };
  f[DEPTH_COMPONENT] = {
    numColorComponents: 1
  };
  f[DEPTH_STENCIL] = {
    numColorComponents: 2
  };
}
/**
 * @typedef {Object} TextureFormatDetails
 * @property {number} textureFormat format to pass texImage2D and similar functions.
 * @property {boolean} colorRenderable true if you can render to this format of texture.
 * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.
 * @property {number[]} type Array of possible types you can pass to texImage2D and similar function
 * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element
 * @private
 */

var s_textureInternalFormatInfo;

function getTextureInternalFormatInfo(internalFormat) {
  if (!s_textureInternalFormatInfo) {
    // NOTE: these properties need unique names so we can let Uglify mangle the name.
    var t = {}; // unsized formats

    t[ALPHA] = {
      textureFormat: ALPHA,
      colorRenderable: true,
      textureFilterable: true,
      bytesPerElement: [1, 2, 2, 4],
      type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT]
    };
    t[LUMINANCE] = {
      textureFormat: LUMINANCE,
      colorRenderable: true,
      textureFilterable: true,
      bytesPerElement: [1, 2, 2, 4],
      type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT]
    };
    t[LUMINANCE_ALPHA] = {
      textureFormat: LUMINANCE_ALPHA,
      colorRenderable: true,
      textureFilterable: true,
      bytesPerElement: [2, 4, 4, 8],
      type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT]
    };
    t[RGB] = {
      textureFormat: RGB,
      colorRenderable: true,
      textureFilterable: true,
      bytesPerElement: [3, 6, 6, 12, 2],
      type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_5_6_5]
    };
    t[RGBA] = {
      textureFormat: RGBA,
      colorRenderable: true,
      textureFilterable: true,
      bytesPerElement: [4, 8, 8, 16, 2, 2],
      type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_5_5_5_1]
    };
    t[DEPTH_COMPONENT] = {
      textureFormat: DEPTH_COMPONENT,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [2, 4],
      type: [UNSIGNED_INT, UNSIGNED_SHORT]
    }; // sized formats

    t[R8] = {
      textureFormat: RED,
      colorRenderable: true,
      textureFilterable: true,
      bytesPerElement: [1],
      type: [UNSIGNED_BYTE]
    };
    t[R8_SNORM] = {
      textureFormat: RED,
      colorRenderable: false,
      textureFilterable: true,
      bytesPerElement: [1],
      type: [BYTE]
    };
    t[R16F] = {
      textureFormat: RED,
      colorRenderable: false,
      textureFilterable: true,
      bytesPerElement: [4, 2],
      type: [FLOAT, HALF_FLOAT]
    };
    t[R32F] = {
      textureFormat: RED,
      colorRenderable: false,
      textureFilterable: false,
      bytesPerElement: [4],
      type: [FLOAT]
    };
    t[R8UI] = {
      textureFormat: RED_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [1],
      type: [UNSIGNED_BYTE]
    };
    t[R8I] = {
      textureFormat: RED_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [1],
      type: [BYTE]
    };
    t[R16UI] = {
      textureFormat: RED_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [2],
      type: [UNSIGNED_SHORT]
    };
    t[R16I] = {
      textureFormat: RED_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [2],
      type: [SHORT]
    };
    t[R32UI] = {
      textureFormat: RED_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [4],
      type: [UNSIGNED_INT]
    };
    t[R32I] = {
      textureFormat: RED_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [4],
      type: [INT]
    };
    t[RG8] = {
      textureFormat: RG,
      colorRenderable: true,
      textureFilterable: true,
      bytesPerElement: [2],
      type: [UNSIGNED_BYTE]
    };
    t[RG8_SNORM] = {
      textureFormat: RG,
      colorRenderable: false,
      textureFilterable: true,
      bytesPerElement: [2],
      type: [BYTE]
    };
    t[RG16F] = {
      textureFormat: RG,
      colorRenderable: false,
      textureFilterable: true,
      bytesPerElement: [8, 4],
      type: [FLOAT, HALF_FLOAT]
    };
    t[RG32F] = {
      textureFormat: RG,
      colorRenderable: false,
      textureFilterable: false,
      bytesPerElement: [8],
      type: [FLOAT]
    };
    t[RG8UI] = {
      textureFormat: RG_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [2],
      type: [UNSIGNED_BYTE]
    };
    t[RG8I] = {
      textureFormat: RG_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [2],
      type: [BYTE]
    };
    t[RG16UI] = {
      textureFormat: RG_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [4],
      type: [UNSIGNED_SHORT]
    };
    t[RG16I] = {
      textureFormat: RG_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [4],
      type: [SHORT]
    };
    t[RG32UI] = {
      textureFormat: RG_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [8],
      type: [UNSIGNED_INT]
    };
    t[RG32I] = {
      textureFormat: RG_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [8],
      type: [INT]
    };
    t[RGB8] = {
      textureFormat: RGB,
      colorRenderable: true,
      textureFilterable: true,
      bytesPerElement: [3],
      type: [UNSIGNED_BYTE]
    };
    t[SRGB8] = {
      textureFormat: RGB,
      colorRenderable: false,
      textureFilterable: true,
      bytesPerElement: [3],
      type: [UNSIGNED_BYTE]
    };
    t[RGB565] = {
      textureFormat: RGB,
      colorRenderable: true,
      textureFilterable: true,
      bytesPerElement: [3, 2],
      type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_6_5]
    };
    t[RGB8_SNORM] = {
      textureFormat: RGB,
      colorRenderable: false,
      textureFilterable: true,
      bytesPerElement: [3],
      type: [BYTE]
    };
    t[R11F_G11F_B10F] = {
      textureFormat: RGB,
      colorRenderable: false,
      textureFilterable: true,
      bytesPerElement: [12, 6, 4],
      type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_10F_11F_11F_REV]
    };
    t[RGB9_E5] = {
      textureFormat: RGB,
      colorRenderable: false,
      textureFilterable: true,
      bytesPerElement: [12, 6, 4],
      type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_5_9_9_9_REV]
    };
    t[RGB16F] = {
      textureFormat: RGB,
      colorRenderable: false,
      textureFilterable: true,
      bytesPerElement: [12, 6],
      type: [FLOAT, HALF_FLOAT]
    };
    t[RGB32F] = {
      textureFormat: RGB,
      colorRenderable: false,
      textureFilterable: false,
      bytesPerElement: [12],
      type: [FLOAT]
    };
    t[RGB8UI] = {
      textureFormat: RGB_INTEGER,
      colorRenderable: false,
      textureFilterable: false,
      bytesPerElement: [3],
      type: [UNSIGNED_BYTE]
    };
    t[RGB8I] = {
      textureFormat: RGB_INTEGER,
      colorRenderable: false,
      textureFilterable: false,
      bytesPerElement: [3],
      type: [BYTE]
    };
    t[RGB16UI] = {
      textureFormat: RGB_INTEGER,
      colorRenderable: false,
      textureFilterable: false,
      bytesPerElement: [6],
      type: [UNSIGNED_SHORT]
    };
    t[RGB16I] = {
      textureFormat: RGB_INTEGER,
      colorRenderable: false,
      textureFilterable: false,
      bytesPerElement: [6],
      type: [SHORT]
    };
    t[RGB32UI] = {
      textureFormat: RGB_INTEGER,
      colorRenderable: false,
      textureFilterable: false,
      bytesPerElement: [12],
      type: [UNSIGNED_INT]
    };
    t[RGB32I] = {
      textureFormat: RGB_INTEGER,
      colorRenderable: false,
      textureFilterable: false,
      bytesPerElement: [12],
      type: [INT]
    };
    t[RGBA8] = {
      textureFormat: RGBA,
      colorRenderable: true,
      textureFilterable: true,
      bytesPerElement: [4],
      type: [UNSIGNED_BYTE]
    };
    t[SRGB8_ALPHA8] = {
      textureFormat: RGBA,
      colorRenderable: true,
      textureFilterable: true,
      bytesPerElement: [4],
      type: [UNSIGNED_BYTE]
    };
    t[RGBA8_SNORM] = {
      textureFormat: RGBA,
      colorRenderable: false,
      textureFilterable: true,
      bytesPerElement: [4],
      type: [BYTE]
    };
    t[RGB5_A1] = {
      textureFormat: RGBA,
      colorRenderable: true,
      textureFilterable: true,
      bytesPerElement: [4, 2, 4],
      type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_5_5_1, UNSIGNED_INT_2_10_10_10_REV]
    };
    t[RGBA4] = {
      textureFormat: RGBA,
      colorRenderable: true,
      textureFilterable: true,
      bytesPerElement: [4, 2],
      type: [UNSIGNED_BYTE, UNSIGNED_SHORT_4_4_4_4]
    };
    t[RGB10_A2] = {
      textureFormat: RGBA,
      colorRenderable: true,
      textureFilterable: true,
      bytesPerElement: [4],
      type: [UNSIGNED_INT_2_10_10_10_REV]
    };
    t[RGBA16F] = {
      textureFormat: RGBA,
      colorRenderable: false,
      textureFilterable: true,
      bytesPerElement: [16, 8],
      type: [FLOAT, HALF_FLOAT]
    };
    t[RGBA32F] = {
      textureFormat: RGBA,
      colorRenderable: false,
      textureFilterable: false,
      bytesPerElement: [16],
      type: [FLOAT]
    };
    t[RGBA8UI] = {
      textureFormat: RGBA_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [4],
      type: [UNSIGNED_BYTE]
    };
    t[RGBA8I] = {
      textureFormat: RGBA_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [4],
      type: [BYTE]
    };
    t[RGB10_A2UI] = {
      textureFormat: RGBA_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [4],
      type: [UNSIGNED_INT_2_10_10_10_REV]
    };
    t[RGBA16UI] = {
      textureFormat: RGBA_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [8],
      type: [UNSIGNED_SHORT]
    };
    t[RGBA16I] = {
      textureFormat: RGBA_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [8],
      type: [SHORT]
    };
    t[RGBA32I] = {
      textureFormat: RGBA_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [16],
      type: [INT]
    };
    t[RGBA32UI] = {
      textureFormat: RGBA_INTEGER,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [16],
      type: [UNSIGNED_INT]
    }; // Sized Internal

    t[DEPTH_COMPONENT16] = {
      textureFormat: DEPTH_COMPONENT,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [2, 4],
      type: [UNSIGNED_SHORT, UNSIGNED_INT]
    };
    t[DEPTH_COMPONENT24] = {
      textureFormat: DEPTH_COMPONENT,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [4],
      type: [UNSIGNED_INT]
    };
    t[DEPTH_COMPONENT32F] = {
      textureFormat: DEPTH_COMPONENT,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [4],
      type: [FLOAT]
    };
    t[DEPTH24_STENCIL8] = {
      textureFormat: DEPTH_STENCIL,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [4],
      type: [UNSIGNED_INT_24_8]
    };
    t[DEPTH32F_STENCIL8] = {
      textureFormat: DEPTH_STENCIL,
      colorRenderable: true,
      textureFilterable: false,
      bytesPerElement: [4],
      type: [FLOAT_32_UNSIGNED_INT_24_8_REV]
    };
    Object.keys(t).forEach(function (internalFormat) {
      var info = t[internalFormat];
      info.bytesPerElementMap = {};
      info.bytesPerElement.forEach(function (bytesPerElement, ndx) {
        var type = info.type[ndx];
        info.bytesPerElementMap[type] = bytesPerElement;
      });
    });
    s_textureInternalFormatInfo = t;
  }

  return s_textureInternalFormatInfo[internalFormat];
}
/**
 * Gets the number of bytes per element for a given internalFormat / type
 * @param {number} internalFormat The internalFormat parameter from texImage2D etc..
 * @param {number} type The type parameter for texImage2D etc..
 * @return {number} the number of bytes per element for the given internalFormat, type combo
 * @memberOf module:twgl/textures
 */


function getBytesPerElementForInternalFormat(internalFormat, type) {
  var info = getTextureInternalFormatInfo(internalFormat);

  if (!info) {
    throw "unknown internal format";
  }

  var bytesPerElement = info.bytesPerElementMap[type];

  if (bytesPerElement === undefined) {
    throw "unknown internal format";
  }

  return bytesPerElement;
}
/**
 * Info related to a specific texture internalFormat as returned
 * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.
 *
 * @typedef {Object} TextureFormatInfo
 * @property {number} format Format to pass to texImage2D and related functions
 * @property {number} type Type to pass to texImage2D and related functions
 * @memberOf module:twgl/textures
 */

/**
 * Gets the format and type for a given internalFormat
 *
 * @param {number} internalFormat The internal format
 * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,
 * @memberOf module:twgl/textures
 */


function getFormatAndTypeForInternalFormat(internalFormat) {
  var info = getTextureInternalFormatInfo(internalFormat);

  if (!info) {
    throw "unknown internal format";
  }

  return {
    format: info.textureFormat,
    type: info.type[0]
  };
}
/**
 * Returns true if value is power of 2
 * @param {number} value number to check.
 * @return true if value is power of 2
 * @private
 */


function isPowerOf2(value) {
  return (value & value - 1) === 0;
}
/**
 * Gets whether or not we can generate mips for the given
 * internal format.
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {number} width The width parameter from texImage2D etc..
 * @param {number} height The height parameter from texImage2D etc..
 * @param {number} internalFormat The internalFormat parameter from texImage2D etc..
 * @return {boolean} true if we can generate mips
 * @memberOf module:twgl/textures
 */


function canGenerateMipmap(gl, width, height, internalFormat) {
  if (!utils.isWebGL2(gl)) {
    return isPowerOf2(width) && isPowerOf2(height);
  }

  var info = getTextureInternalFormatInfo(internalFormat);

  if (!info) {
    throw "unknown internal format";
  }

  return info.colorRenderable && info.textureFilterable;
}
/**
 * Gets whether or not we can generate mips for the given format
 * @param {number} internalFormat The internalFormat parameter from texImage2D etc..
 * @return {boolean} true if we can generate mips
 * @memberOf module:twgl/textures
 */


function canFilter(internalFormat) {
  var info = getTextureInternalFormatInfo(internalFormat);

  if (!info) {
    throw "unknown internal format";
  }

  return info.textureFilterable;
}
/**
 * Gets the number of components for a given image format.
 * @param {number} format the format.
 * @return {number} the number of components for the format.
 * @memberOf module:twgl/textures
 */


function getNumComponentsForFormat(format) {
  var info = formatInfo[format];

  if (!info) {
    throw "unknown format: " + format;
  }

  return info.numColorComponents;
}
/**
 * Gets the texture type for a given array type.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @return {number} the gl texture type
 * @private
 */


function getTextureTypeForArrayType(gl, src, defaultType) {
  if (isArrayBuffer(src)) {
    return typedArrays.getGLTypeForTypedArray(src);
  }

  return defaultType || UNSIGNED_BYTE;
}

function guessDimensions(gl, target, width, height, numElements) {
  if (numElements % 1 !== 0) {
    throw "can't guess dimensions";
  }

  if (!width && !height) {
    var size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP ? 6 : 1));

    if (size % 1 === 0) {
      width = size;
      height = size;
    } else {
      width = numElements;
      height = 1;
    }
  } else if (!height) {
    height = numElements / width;

    if (height % 1) {
      throw "can't guess dimensions";
    }
  } else if (!width) {
    width = numElements / height;

    if (width % 1) {
      throw "can't guess dimensions";
    }
  }

  return {
    width: width,
    height: height
  };
}
/**
 * Sets the default texture color.
 *
 * The default texture color is used when loading textures from
 * urls. Because the URL will be loaded async we'd like to be
 * able to use the texture immediately. By putting a 1x1 pixel
 * color in the texture we can start using the texture before
 * the URL has loaded.
 *
 * @param {number[]} color Array of 4 values in the range 0 to 1
 * @deprecated see {@link module:twgl.setDefaults}
 * @memberOf module:twgl/textures
 */


function setDefaultTextureColor(color) {
  defaults.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);
}

function setDefaults(newDefaults) {
  helper.copyExistingProperties(newDefaults, defaults);

  if (newDefaults.textureColor) {
    setDefaultTextureColor(newDefaults.textureColor);
  }
}
/**
 * A function to generate the source for a texture.
 * @callback TextureFunc
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {module:twgl.TextureOptions} options the texture options
 * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.
 * @memberOf module:twgl
 */

/**
 * Texture options passed to most texture functions. Each function will use whatever options
 * are appropriate for its needs. This lets you pass the same options to all functions.
 *
 * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,
 * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.
 *
 * @typedef {Object} TextureOptions
 * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.
 * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.
 * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.
 * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.
 * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .
 * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`
 *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.
 * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`
 * @property {number} [minMag] both the min and mag filter settings.
 * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`
 * @property {number} [format] format for texture. Defaults to `gl.RGBA`.
 * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`
 *     is ArrayBufferView defaults to type that matches ArrayBufferView type.
 * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube
 * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
 * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
 * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
 * @property {number} [minLod] TEXTURE_MIN_LOD setting
 * @property {number} [maxLod] TEXTURE_MAX_LOD setting
 * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting
 * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting
 * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.
 * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.
 *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`
 *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink
 * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.
 *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
 *     the current setting for specific textures.
 * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.
 *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
 *     the current setting for specific textures.
 * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.
 *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
 *     the current setting for specific textures.
 * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and
 *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above
 *    then then `auto` is assumed to be `false` unless explicity set to `true`.
 * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is
 *
 *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,
 *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
 *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
 *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
 *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
 *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]
 *
 * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture
 *
 *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable
 *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.
 *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.
 *    The pieces will be uploaded in `cubeFaceOrder`
 *
 *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.
 *
 *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture
 *    and will be scaled to the specified width and height OR to the size of the first image that loads.
 *
 *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,
 *    `HTMLCanvasElement`, `HTMLVideoElement`.
 *
 *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is
 *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`
 *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided
 *    by 6. Then
 *
 *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height
 *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.
 *
 *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.
 *
 * If `number[]` will be converted to `type`.
 *
 * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.
 * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`
 * an array etc...
 *
 * If `src` is undefined then an empty texture will be created of size `width` by `height`.
 *
 * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.
 *    default: undefined. Also see {@link module:twgl.setDefaults}.
 *
 * @memberOf module:twgl
 */

/**
 * Sets any packing state that will be set based on the options.
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @private
 */


function setPackState(gl, options) {
  if (options.colorspaceConversion !== undefined) {
    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);
  }

  if (options.premultiplyAlpha !== undefined) {
    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);
  }

  if (options.flipY !== undefined) {
    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);
  }
}
/**
 * Set skip state to defaults
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @private
 */


function setSkipStateToDefault(gl) {
  gl.pixelStorei(UNPACK_ALIGNMENT, 4);

  if (utils.isWebGL2(gl)) {
    gl.pixelStorei(UNPACK_ROW_LENGTH, 0);
    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);
    gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);
    gl.pixelStorei(UNPACK_SKIP_ROWS, 0);
    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);
  }
}
/**
 * Sets the parameters of a texture or sampler
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {number|WebGLSampler} target texture target or sampler
 * @param {function()} parameteriFn texParameteri or samplerParameteri fn
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @private
 */


function setTextureSamplerParameters(gl, target, parameteriFn, options) {
  if (options.minMag) {
    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);
    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);
  }

  if (options.min) {
    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);
  }

  if (options.mag) {
    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);
  }

  if (options.wrap) {
    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);
    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);

    if (target === TEXTURE_3D || helper.isSampler(gl, target)) {
      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);
    }
  }

  if (options.wrapR) {
    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);
  }

  if (options.wrapS) {
    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);
  }

  if (options.wrapT) {
    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);
  }

  if (options.minLod) {
    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);
  }

  if (options.maxLod) {
    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);
  }

  if (options.baseLevel) {
    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);
  }

  if (options.maxLevel) {
    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);
  }
}
/**
 * Sets the texture parameters of a texture.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @memberOf module:twgl/textures
 */


function setTextureParameters(gl, tex, options) {
  var target = options.target || TEXTURE_2D;
  gl.bindTexture(target, tex);
  setTextureSamplerParameters(gl, target, gl.texParameteri, options);
}
/**
 * Sets the sampler parameters of a sampler.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLSampler} sampler the WebGLSampler to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @memberOf module:twgl/textures
 */


function setSamplerParameters(gl, sampler, options) {
  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);
}
/**
 * Creates a new sampler object and sets parameters.
 *
 * Example:
 *
 *      const sampler = twgl.createSampler(gl, {
 *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER
 *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R
 *      });
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.
 * @return {Object.<string,WebGLSampler>} the created samplers by name
 * @private
 */


function createSampler(gl, options) {
  var sampler = gl.createSampler();
  setSamplerParameters(gl, sampler, options);
  return sampler;
}
/**
 * Creates a multiple sampler objects and sets parameters on each.
 *
 * Example:
 *
 *      const samplers = twgl.createSamplers(gl, {
 *        nearest: {
 *          minMag: gl.NEAREST,
 *        },
 *        nearestClampS: {
 *          minMag: gl.NEAREST,
 *          wrapS: gl.CLAMP_TO_NEAREST,
 *        },
 *        linear: {
 *          minMag: gl.LINEAR,
 *        },
 *        nearestClamp: {
 *          minMag: gl.NEAREST,
 *          wrap: gl.CLAMP_TO_EDGE,
 *        },
 *        linearClamp: {
 *          minMag: gl.LINEAR,
 *          wrap: gl.CLAMP_TO_EDGE,
 *        },
 *        linearClampT: {
 *          minMag: gl.LINEAR,
 *          wrapT: gl.CLAMP_TO_EDGE,
 *        },
 *      });
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler
 * @private
 */


function createSamplers(gl, samplerOptions) {
  var samplers = {};
  Object.keys(samplerOptions).forEach(function (name) {
    samplers[name] = createSampler(gl, samplerOptions[name]);
  });
  return samplers;
}
/**
 * Makes a 1x1 pixel
 * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.
 * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values
 * @return {Uint8Array} Unit8Array with color.
 * @private
 */


function make1Pixel(color) {
  color = color || defaults.textureColor;

  if (isArrayBuffer(color)) {
    return color;
  }

  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);
}
/**
 * Sets filtering or generates mips for texture based on width or height
 * If width or height is not passed in uses `options.width` and//or `options.height`
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @param {number} [width] width of texture
 * @param {number} [height] height of texture
 * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..
 * @memberOf module:twgl/textures
 */


function setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {
  options = options || defaults.textureOptions;
  internalFormat = internalFormat || RGBA;
  var target = options.target || TEXTURE_2D;
  width = width || options.width;
  height = height || options.height;
  gl.bindTexture(target, tex);

  if (canGenerateMipmap(gl, width, height, internalFormat)) {
    gl.generateMipmap(target);
  } else {
    var filtering = canFilter(internalFormat) ? LINEAR : NEAREST;
    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);
    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);
    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);
  }
}

function shouldAutomaticallySetTextureFilteringForSize(options) {
  return options.auto === true || options.auto === undefined && options.level === undefined;
}
/**
 * Gets an array of cubemap face enums
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @return {number[]} cubemap face enums
 * @private
 */


function getCubeFaceOrder(gl, options) {
  options = options || {};
  return options.cubeFaceOrder || [TEXTURE_CUBE_MAP_POSITIVE_X, TEXTURE_CUBE_MAP_NEGATIVE_X, TEXTURE_CUBE_MAP_POSITIVE_Y, TEXTURE_CUBE_MAP_NEGATIVE_Y, TEXTURE_CUBE_MAP_POSITIVE_Z, TEXTURE_CUBE_MAP_NEGATIVE_Z];
}
/**
 * @typedef {Object} FaceInfo
 * @property {number} face gl enum for texImage2D
 * @property {number} ndx face index (0 - 5) into source data
 * @ignore
 */

/**
 * Gets an array of FaceInfos
 * There's a bug in some NVidia drivers that will crash the driver if
 * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take
 * the user's desired order from his faces to WebGL and make sure we
 * do the faces in WebGL order
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but
 *    it's needed internally to sort the array of `ndx` properties by `face`.
 * @private
 */


function getCubeFacesWithNdx(gl, options) {
  var faces = getCubeFaceOrder(gl, options); // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(

  var facesWithNdx = faces.map(function (face, ndx) {
    return {
      face: face,
      ndx: ndx
    };
  });
  facesWithNdx.sort(function (a, b) {
    return a.face - b.face;
  });
  return facesWithNdx;
}
/**
 * Set a texture from the contents of an element. Will also set
 * texture filtering or generate mips based on the dimensions of the element
 * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will
 * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {HTMLElement} element a canvas, img, or video element.
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @memberOf module:twgl/textures
 * @kind function
 */


function setTextureFromElement(gl, tex, element, options) {
  options = options || defaults.textureOptions;
  var target = options.target || TEXTURE_2D;
  var level = options.level || 0;
  var width = element.width;
  var height = element.height;
  var internalFormat = options.internalFormat || options.format || RGBA;
  var formatType = getFormatAndTypeForInternalFormat(internalFormat);
  var format = options.format || formatType.format;
  var type = options.type || formatType.type;
  setPackState(gl, options);
  gl.bindTexture(target, tex);

  if (target === TEXTURE_CUBE_MAP) {
    // guess the parts
    var imgWidth = element.width;
    var imgHeight = element.height;
    var size;
    var slices;

    if (imgWidth / 6 === imgHeight) {
      // It's 6x1
      size = imgHeight;
      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];
    } else if (imgHeight / 6 === imgWidth) {
      // It's 1x6
      size = imgWidth;
      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];
    } else if (imgWidth / 3 === imgHeight / 2) {
      // It's 3x2
      size = imgWidth / 3;
      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];
    } else if (imgWidth / 2 === imgHeight / 3) {
      // It's 2x3
      size = imgWidth / 2;
      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];
    } else {
      throw "can't figure out cube map from element: " + (element.src ? element.src : element.nodeName);
    }

    var ctx = getShared2DContext();

    if (ctx) {
      ctx.canvas.width = size;
      ctx.canvas.height = size;
      width = size;
      height = size;
      getCubeFacesWithNdx(gl, options).forEach(function (f) {
        var xOffset = slices[f.ndx * 2 + 0] * size;
        var yOffset = slices[f.ndx * 2 + 1] * size;
        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);
        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);
      }); // Free up the canvas memory

      ctx.canvas.width = 1;
      ctx.canvas.height = 1;
    } else if (typeof createImageBitmap !== 'undefined') {
      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's
      // note lossy? (alpha is not premultiplied? although I'm not sure what
      width = size;
      height = size;
      getCubeFacesWithNdx(gl, options).forEach(function (f) {
        var xOffset = slices[f.ndx * 2 + 0] * size;
        var yOffset = slices[f.ndx * 2 + 1] * size; // We can't easily use a default texture color here as it would have to match
        // the type across all faces where as with a 2D one there's only one face
        // so we're replacing everything all at once. It also has to be the correct size.
        // On the other hand we need all faces to be the same size so as one face loads
        // the rest match else the texture will be un-renderable.

        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);
        createImageBitmap(element, xOffset, yOffset, size, size, {
          premultiplyAlpha: 'none',
          colorSpaceConversion: 'none'
        }).then(function (imageBitmap) {
          setPackState(gl, options);
          gl.bindTexture(target, tex);
          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);

          if (shouldAutomaticallySetTextureFilteringForSize(options)) {
            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);
          }
        });
      });
    }
  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
    var smallest = Math.min(element.width, element.height);
    var largest = Math.max(element.width, element.height);
    var depth = largest / smallest;

    if (depth % 1 !== 0) {
      throw "can not compute 3D dimensions of element";
    }

    var xMult = element.width === largest ? 1 : 0;
    var yMult = element.height === largest ? 1 : 0;
    gl.pixelStorei(UNPACK_ALIGNMENT, 1);
    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);
    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);
    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);
    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);

    for (var d = 0; d < depth; ++d) {
      var srcX = d * smallest * xMult;
      var srcY = d * smallest * yMult;
      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);
      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);
      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);
    }

    setSkipStateToDefault(gl);
  } else {
    gl.texImage2D(target, level, internalFormat, format, type, element);
  }

  if (shouldAutomaticallySetTextureFilteringForSize(options)) {
    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);
  }

  setTextureParameters(gl, tex, options);
}

function noop() {}
/**
 * Checks whether the url's origin is the same so that we can set the `crossOrigin`
 * @param {string} url url to image
 * @returns {boolean} true if the window's origin is the same as image's url
 * @private
 */


function urlIsSameOrigin(url) {
  if (typeof document !== 'undefined') {
    // for IE really
    var a = document.createElement('a');
    a.href = url;
    return a.hostname === location.hostname && a.port === location.port && a.protocol === location.protocol;
  } else {
    var localOrigin = new URL(location.href).origin;
    var urlOrigin = new URL(url, location.href).origin;
    return urlOrigin === localOrigin;
  }
}

function setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {
  return crossOrigin === undefined && !urlIsSameOrigin(url) ? 'anonymous' : crossOrigin;
}
/**
 * Loads an image
 * @param {string} url url to image
 * @param {string} crossOrigin
 * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null
 *     if there was an error
 * @return {HTMLImageElement} the image being loaded.
 * @private
 */


function loadImage(url, crossOrigin, callback) {
  callback = callback || noop;
  var img;
  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults.crossOrigin;
  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);

  if (typeof Image !== 'undefined') {
    img = new Image();

    if (crossOrigin !== undefined) {
      img.crossOrigin = crossOrigin;
    }

    var clearEventHandlers = function clearEventHandlers() {
      img.removeEventListener('error', onError); // eslint-disable-line

      img.removeEventListener('load', onLoad); // eslint-disable-line

      img = null;
    };

    var onError = function onError() {
      var msg = "couldn't load image: " + url;
      helper.error(msg);
      callback(msg, img);
      clearEventHandlers();
    };

    var onLoad = function onLoad() {
      callback(null, img);
      clearEventHandlers();
    };

    img.addEventListener('error', onError);
    img.addEventListener('load', onLoad);
    img.src = url;
    return img;
  } else if (typeof ImageBitmap !== 'undefined') {
    var err;
    var bm;

    var cb = function cb() {
      callback(err, bm);
    };

    var options = {};

    if (crossOrigin) {
      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin
    }

    fetch(url, options).then(function (response) {
      if (!response.ok) {
        throw response;
      }

      return response.blob();
    }).then(function (blob) {
      return createImageBitmap(blob, {
        premultiplyAlpha: 'none',
        colorSpaceConversion: 'none'
      });
    }).then(function (bitmap) {
      // not sure if this works. We don't want
      // to catch the user's error. So, call
      // the callback in a timeout so we're
      // not in this scope inside the promise.
      bm = bitmap;
      setTimeout(cb);
    })["catch"](function (e) {
      err = e;
      setTimeout(cb);
    });
    img = null;
  }

  return img;
}
/**
 * check if object is a TexImageSource
 *
 * @param {Object} obj Object to test
 * @return {boolean} true if object is a TexImageSource
 * @private
 */


function isTexImageSource(obj) {
  return typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap || typeof ImageData !== 'undefined' && obj instanceof ImageData || typeof HTMLElement !== 'undefined' && obj instanceof HTMLElement;
}
/**
 * if obj is an TexImageSource then just
 * uses it otherwise if obj is a string
 * then load it first.
 *
 * @param {string|TexImageSource} obj
 * @param {string} crossOrigin
 * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null
 *     if there was an error
 * @private
 */


function loadAndUseImage(obj, crossOrigin, callback) {
  if (isTexImageSource(obj)) {
    setTimeout(function () {
      callback(null, obj);
    });
    return obj;
  }

  return loadImage(obj, crossOrigin, callback);
}
/**
 * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set
 * the default texture color is used which can be set by calling `setDefaultTextureColor`.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @memberOf module:twgl/textures
 */


function setTextureTo1PixelColor(gl, tex, options) {
  options = options || defaults.textureOptions;
  var target = options.target || TEXTURE_2D;
  gl.bindTexture(target, tex);

  if (options.color === false) {
    return;
  } // Assume it's a URL
  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.


  var color = make1Pixel(options.color);

  if (target === TEXTURE_CUBE_MAP) {
    for (var ii = 0; ii < 6; ++ii) {
      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE, color);
    }
  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
    gl.texImage3D(target, 0, RGBA, 1, 1, 1, 0, RGBA, UNSIGNED_BYTE, color);
  } else {
    gl.texImage2D(target, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE, color);
  }
}
/**
 * The src image(s) used to create a texture.
 *
 * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}
 * you can pass in urls for images to load into the textures. If it's a single url
 * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap
 * this will be a corresponding array of images for the cubemap.
 *
 * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc
 * @memberOf module:twgl
 */

/**
 * A callback for when an image finished downloading and been uploaded into a texture
 * @callback TextureReadyCallback
 * @param {*} err If truthy there was an error.
 * @param {WebGLTexture} texture the texture.
 * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture
 * @memberOf module:twgl
 */

/**
 * A callback for when all images have finished downloading and been uploaded into their respective textures
 * @callback TexturesReadyCallback
 * @param {*} err If truthy there was an error.
 * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.
 * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.
 * @memberOf module:twgl
 */

/**
 * A callback for when an image finished downloading and been uploaded into a texture
 * @callback CubemapReadyCallback
 * @param {*} err If truthy there was an error.
 * @param {WebGLTexture} tex the texture.
 * @param {HTMLImageElement[]} imgs the images for each face.
 * @memberOf module:twgl
 */

/**
 * A callback for when an image finished downloading and been uploaded into a texture
 * @callback ThreeDReadyCallback
 * @param {*} err If truthy there was an error.
 * @param {WebGLTexture} tex the texture.
 * @param {HTMLImageElement[]} imgs the images for each slice.
 * @memberOf module:twgl
 */

/**
 * Loads a texture from an image from a Url as specified in `options.src`
 * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is
 * immediately useable. It will be updated with the contents of the image once the image has finished
 * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will
 *    be non null if there was an error.
 * @return {HTMLImageElement} the image being downloaded.
 * @memberOf module:twgl/textures
 */


function loadTextureFromUrl(gl, tex, options, callback) {
  callback = callback || noop;
  options = options || defaults.textureOptions;
  setTextureTo1PixelColor(gl, tex, options); // Because it's async we need to copy the options.

  options = Object.assign({}, options);
  var img = loadAndUseImage(options.src, options.crossOrigin, function (err, img) {
    if (err) {
      callback(err, tex, img);
    } else {
      setTextureFromElement(gl, tex, img, options);
      callback(null, tex, img);
    }
  });
  return img;
}
/**
 * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color
 * so that it is usable immediately unless `option.color === false`.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will
 *    be non null if there was an error.
 * @memberOf module:twgl/textures
 */


function loadCubemapFromUrls(gl, tex, options, callback) {
  callback = callback || noop;
  var urls = options.src;

  if (urls.length !== 6) {
    throw "there must be 6 urls for a cubemap";
  }

  var level = options.level || 0;
  var internalFormat = options.internalFormat || options.format || RGBA;
  var formatType = getFormatAndTypeForInternalFormat(internalFormat);
  var format = options.format || formatType.format;
  var type = options.type || UNSIGNED_BYTE;
  var target = options.target || TEXTURE_2D;

  if (target !== TEXTURE_CUBE_MAP) {
    throw "target must be TEXTURE_CUBE_MAP";
  }

  setTextureTo1PixelColor(gl, tex, options); // Because it's async we need to copy the options.

  options = Object.assign({}, options);
  var numToLoad = 6;
  var errors = [];
  var faces = getCubeFaceOrder(gl, options);
  var imgs; // eslint-disable-line

  function uploadImg(faceTarget) {
    return function (err, img) {
      --numToLoad;

      if (err) {
        errors.push(err);
      } else {
        if (img.width !== img.height) {
          errors.push("cubemap face img is not a square: " + img.src);
        } else {
          setPackState(gl, options);
          gl.bindTexture(target, tex); // So assuming this is the first image we now have one face that's img sized
          // and 5 faces that are 1x1 pixel so size the other faces

          if (numToLoad === 5) {
            // use the default order
            getCubeFaceOrder(gl).forEach(function (otherTarget) {
              // Should we re-use the same face or a color?
              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);
            });
          } else {
            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);
          }

          if (shouldAutomaticallySetTextureFilteringForSize(options)) {
            gl.generateMipmap(target);
          }
        }
      }

      if (numToLoad === 0) {
        callback(errors.length ? errors : undefined, tex, imgs);
      }
    };
  }

  imgs = urls.map(function (url, ndx) {
    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));
  });
}
/**
 * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.
 * Will set the texture to a 1x1 pixel color
 * so that it is usable immediately unless `option.color === false`.
 *
 * If the width and height is not specified the width and height of the first
 * image loaded will be used. Note that since images are loaded async
 * which image downloads first is unknown.
 *
 * If an image is not the same size as the width and height it will be scaled
 * to that width and height.
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will
 *    be non null if there was an error.
 * @memberOf module:twgl/textures
 */


function loadSlicesFromUrls(gl, tex, options, callback) {
  callback = callback || noop;
  var urls = options.src;
  var internalFormat = options.internalFormat || options.format || RGBA;
  var formatType = getFormatAndTypeForInternalFormat(internalFormat);
  var format = options.format || formatType.format;
  var type = options.type || UNSIGNED_BYTE;
  var target = options.target || TEXTURE_2D_ARRAY;

  if (target !== TEXTURE_3D && target !== TEXTURE_2D_ARRAY) {
    throw "target must be TEXTURE_3D or TEXTURE_2D_ARRAY";
  }

  setTextureTo1PixelColor(gl, tex, options); // Because it's async we need to copy the options.

  options = Object.assign({}, options);
  var numToLoad = urls.length;
  var errors = [];
  var imgs; // eslint-disable-line

  var level = options.level || 0;
  var width = options.width;
  var height = options.height;
  var depth = urls.length;
  var firstImage = true;

  function uploadImg(slice) {
    return function (err, img) {
      --numToLoad;

      if (err) {
        errors.push(err);
      } else {
        setPackState(gl, options);
        gl.bindTexture(target, tex);

        if (firstImage) {
          firstImage = false;
          width = options.width || img.width;
          height = options.height || img.height;
          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null); // put it in every slice otherwise some slices will be 0,0,0,0

          for (var s = 0; s < depth; ++s) {
            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);
          }
        } else {
          var src = img;
          var ctx;

          if (img.width !== width || img.height !== height) {
            // Size the image to fix
            ctx = getShared2DContext();
            src = ctx.canvas;
            ctx.canvas.width = width;
            ctx.canvas.height = height;
            ctx.drawImage(img, 0, 0, width, height);
          }

          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src); // free the canvas memory

          if (ctx && src === ctx.canvas) {
            ctx.canvas.width = 0;
            ctx.canvas.height = 0;
          }
        }

        if (shouldAutomaticallySetTextureFilteringForSize(options)) {
          gl.generateMipmap(target);
        }
      }

      if (numToLoad === 0) {
        callback(errors.length ? errors : undefined, tex, imgs);
      }
    };
  }

  imgs = urls.map(function (url, ndx) {
    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));
  });
}
/**
 * Sets a texture from an array or typed array. If the width or height is not provided will attempt to
 * guess the size. See {@link module:twgl.TextureOptions}.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @memberOf module:twgl/textures
 */


function setTextureFromArray(gl, tex, src, options) {
  options = options || defaults.textureOptions;
  var target = options.target || TEXTURE_2D;
  gl.bindTexture(target, tex);
  var width = options.width;
  var height = options.height;
  var depth = options.depth;
  var level = options.level || 0;
  var internalFormat = options.internalFormat || options.format || RGBA;
  var formatType = getFormatAndTypeForInternalFormat(internalFormat);
  var format = options.format || formatType.format;
  var type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);

  if (!isArrayBuffer(src)) {
    var Type = typedArrays.getTypedArrayTypeForGLType(type);
    src = new Type(src);
  } else if (src instanceof Uint8ClampedArray) {
    src = new Uint8Array(src.buffer);
  }

  var bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);
  var numElements = src.byteLength / bytesPerElement; // TODO: check UNPACK_ALIGNMENT?

  if (numElements % 1) {
    throw "length wrong size for format: " + utils.glEnumToString(gl, format);
  }

  var dimensions;

  if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
    if (!width && !height && !depth) {
      var size = Math.cbrt(numElements);

      if (size % 1 !== 0) {
        throw "can't guess cube size of array of numElements: " + numElements;
      }

      width = size;
      height = size;
      depth = size;
    } else if (width && (!height || !depth)) {
      dimensions = guessDimensions(gl, target, height, depth, numElements / width);
      height = dimensions.width;
      depth = dimensions.height;
    } else if (height && (!width || !depth)) {
      dimensions = guessDimensions(gl, target, width, depth, numElements / height);
      width = dimensions.width;
      depth = dimensions.height;
    } else {
      dimensions = guessDimensions(gl, target, width, height, numElements / depth);
      width = dimensions.width;
      height = dimensions.height;
    }
  } else {
    dimensions = guessDimensions(gl, target, width, height, numElements);
    width = dimensions.width;
    height = dimensions.height;
  }

  setSkipStateToDefault(gl);
  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);
  setPackState(gl, options);

  if (target === TEXTURE_CUBE_MAP) {
    var elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;
    var faceSize = numElements / 6 * elementsPerElement;
    getCubeFacesWithNdx(gl, options).forEach(function (f) {
      var offset = faceSize * f.ndx;
      var data = src.subarray(offset, offset + faceSize);
      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);
    });
  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);
  } else {
    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);
  }

  return {
    width: width,
    height: height,
    depth: depth,
    type: type
  };
}
/**
 * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.
 * You must set `options.width` and `options.height`.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @memberOf module:twgl/textures
 */


function setEmptyTexture(gl, tex, options) {
  var target = options.target || TEXTURE_2D;
  gl.bindTexture(target, tex);
  var level = options.level || 0;
  var internalFormat = options.internalFormat || options.format || RGBA;
  var formatType = getFormatAndTypeForInternalFormat(internalFormat);
  var format = options.format || formatType.format;
  var type = options.type || formatType.type;
  setPackState(gl, options);

  if (target === TEXTURE_CUBE_MAP) {
    for (var ii = 0; ii < 6; ++ii) {
      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);
    }
  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);
  } else {
    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);
  }
}
/**
 * Creates a texture based on the options passed in.
 *
 * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES
 * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.
 * @return {WebGLTexture} the created texture.
 * @memberOf module:twgl/textures
 */


function createTexture(gl, options, callback) {
  callback = callback || noop;
  options = options || defaults.textureOptions;
  var tex = gl.createTexture();
  var target = options.target || TEXTURE_2D;
  var width = options.width || 1;
  var height = options.height || 1;
  var internalFormat = options.internalFormat || RGBA;
  gl.bindTexture(target, tex);

  if (target === TEXTURE_CUBE_MAP) {
    // this should have been the default for cubemaps :(
    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);
  }

  var src = options.src;

  if (src) {
    if (typeof src === "function") {
      src = src(gl, options);
    }

    if (typeof src === "string") {
      loadTextureFromUrl(gl, tex, options, callback);
    } else if (isArrayBuffer(src) || Array.isArray(src) && (typeof src[0] === 'number' || Array.isArray(src[0]) || isArrayBuffer(src[0]))) {
      var dimensions = setTextureFromArray(gl, tex, src, options);
      width = dimensions.width;
      height = dimensions.height;
    } else if (Array.isArray(src) && (typeof src[0] === 'string' || isTexImageSource(src[0]))) {
      if (target === TEXTURE_CUBE_MAP) {
        loadCubemapFromUrls(gl, tex, options, callback);
      } else {
        loadSlicesFromUrls(gl, tex, options, callback);
      }
    } else {
      // if (isTexImageSource(src))
      setTextureFromElement(gl, tex, src, options);
      width = src.width;
      height = src.height;
    }
  } else {
    setEmptyTexture(gl, tex, options);
  }

  if (shouldAutomaticallySetTextureFilteringForSize(options)) {
    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);
  }

  setTextureParameters(gl, tex, options);
  return tex;
}
/**
 * Resizes a texture based on the options passed in.
 *
 * Note: This is not a generic resize anything function.
 * It's mostly used by {@link module:twgl.resizeFramebufferInfo}
 * It will use `options.src` if it exists to try to determine a `type`
 * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided
 * for the texture. Texture parameters will be set accordingly
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the texture to resize
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @param {number} [width] the new width. If not passed in will use `options.width`
 * @param {number} [height] the new height. If not passed in will use `options.height`
 * @param {number} [depth] the new depth. If not passed in will use `options.depth`
 * @memberOf module:twgl/textures
 */


function resizeTexture(gl, tex, options, width, height, depth) {
  width = width || options.width;
  height = height || options.height;
  depth = depth || options.depth;
  var target = options.target || TEXTURE_2D;
  gl.bindTexture(target, tex);
  var level = options.level || 0;
  var internalFormat = options.internalFormat || options.format || RGBA;
  var formatType = getFormatAndTypeForInternalFormat(internalFormat);
  var format = options.format || formatType.format;
  var type;
  var src = options.src;

  if (!src) {
    type = options.type || formatType.type;
  } else if (isArrayBuffer(src) || Array.isArray(src) && typeof src[0] === 'number') {
    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);
  } else {
    type = options.type || formatType.type;
  }

  if (target === TEXTURE_CUBE_MAP) {
    for (var ii = 0; ii < 6; ++ii) {
      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);
    }
  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);
  } else {
    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);
  }
}
/**
 * Check if a src is an async request.
 * if src is a string we're going to download an image
 * if src is an array of strings we're going to download cubemap images
 * @param {*} src The src from a TextureOptions
 * @returns {bool} true if src is async.
 * @private
 */


function isAsyncSrc(src) {
  return typeof src === 'string' || Array.isArray(src) && typeof src[0] === 'string';
}
/**
 * Creates a bunch of textures based on the passed in options.
 *
 * Example:
 *
 *     const textures = twgl.createTextures(gl, {
 *       // a power of 2 image
 *       hftIcon: { src: "images/hft-icon-16.png", mag: gl.NEAREST },
 *       // a non-power of 2 image
 *       clover: { src: "images/clover.jpg" },
 *       // From a canvas
 *       fromCanvas: { src: ctx.canvas },
 *       // A cubemap from 6 images
 *       yokohama: {
 *         target: gl.TEXTURE_CUBE_MAP,
 *         src: [
 *           'images/yokohama/posx.jpg',
 *           'images/yokohama/negx.jpg',
 *           'images/yokohama/posy.jpg',
 *           'images/yokohama/negy.jpg',
 *           'images/yokohama/posz.jpg',
 *           'images/yokohama/negz.jpg',
 *         ],
 *       },
 *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)
 *       goldengate: {
 *         target: gl.TEXTURE_CUBE_MAP,
 *         src: 'images/goldengate.jpg',
 *       },
 *       // A 2x2 pixel texture from a JavaScript array
 *       checker: {
 *         mag: gl.NEAREST,
 *         min: gl.LINEAR,
 *         src: [
 *           255,255,255,255,
 *           192,192,192,255,
 *           192,192,192,255,
 *           255,255,255,255,
 *         ],
 *       },
 *       // a 1x2 pixel texture from a typed array.
 *       stripe: {
 *         mag: gl.NEAREST,
 *         min: gl.LINEAR,
 *         format: gl.LUMINANCE,
 *         src: new Uint8Array([
 *           255,
 *           128,
 *           255,
 *           128,
 *           255,
 *           128,
 *           255,
 *           128,
 *         ]),
 *         width: 1,
 *       },
 *     });
 *
 * Now
 *
 * *   `textures.hftIcon` will be a 2d texture
 * *   `textures.clover` will be a 2d texture
 * *   `textures.fromCanvas` will be a 2d texture
 * *   `textures.yohohama` will be a cubemap texture
 * *   `textures.goldengate` will be a cubemap texture
 * *   `textures.checker` will be a 2d texture
 * *   `textures.stripe` will be a 2d texture
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.
 * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.
 * @return {Object.<string,WebGLTexture>} the created textures by name
 * @memberOf module:twgl/textures
 */


function createTextures(gl, textureOptions, callback) {
  callback = callback || noop;
  var numDownloading = 0;
  var errors = [];
  var textures = {};
  var images = {};

  function callCallbackIfReady() {
    if (numDownloading === 0) {
      setTimeout(function () {
        callback(errors.length ? errors : undefined, textures, images);
      }, 0);
    }
  }

  Object.keys(textureOptions).forEach(function (name) {
    var options = textureOptions[name];
    var onLoadFn;

    if (isAsyncSrc(options.src)) {
      onLoadFn = function onLoadFn(err, tex, img) {
        images[name] = img;
        --numDownloading;

        if (err) {
          errors.push(err);
        }

        callCallbackIfReady();
      };

      ++numDownloading;
    }

    textures[name] = createTexture(gl, options, onLoadFn);
  }); // queue the callback if there are no images to download.
  // We do this because if your code is structured to wait for
  // images to download but then you comment out all the async
  // images your code would break.

  callCallbackIfReady();
  return textures;
}

/***/ }),

/***/ "./src/twgl-base.js":
/*!**************************!*\
  !*** ./src/twgl-base.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_213970__) {

"use strict";


exports.__esModule = true;

var _twgl = __nested_webpack_require_213970__(/*! ./twgl.js */ "./src/twgl.js");

Object.keys(_twgl).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  exports[key] = _twgl[key];
});

/***/ }),

/***/ "./src/twgl.js":
/*!*********************!*\
  !*** ./src/twgl.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_214419__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

exports.__esModule = true;
var _exportNames = {
  addExtensionsToContext: true,
  getContext: true,
  getWebGLContext: true,
  resizeCanvasToDisplaySize: true,
  setDefaults: true,
  attributes: true,
  textures: true,
  utils: true,
  draw: true,
  framebuffers: true,
  programs: true,
  typedarrays: true,
  vertexArrays: true
};
exports.addExtensionsToContext = addExtensionsToContext;
exports.getContext = getContext;
exports.getWebGLContext = getWebGLContext;
exports.resizeCanvasToDisplaySize = resizeCanvasToDisplaySize;
exports.setDefaults = setDefaults;
exports.vertexArrays = exports.typedarrays = exports.programs = exports.framebuffers = exports.draw = exports.utils = exports.textures = exports.attributes = void 0;

var attributes = _interopRequireWildcard(__nested_webpack_require_214419__(/*! ./attributes.js */ "./src/attributes.js"));

exports.attributes = attributes;
Object.keys(attributes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = attributes[key];
});

var textures = _interopRequireWildcard(__nested_webpack_require_214419__(/*! ./textures.js */ "./src/textures.js"));

exports.textures = textures;
Object.keys(textures).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = textures[key];
});

var helper = _interopRequireWildcard(__nested_webpack_require_214419__(/*! ./helper.js */ "./src/helper.js"));

var utils = _interopRequireWildcard(__nested_webpack_require_214419__(/*! ./utils.js */ "./src/utils.js"));

exports.utils = utils;
Object.keys(utils).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = utils[key];
});

var draw = _interopRequireWildcard(__nested_webpack_require_214419__(/*! ./draw.js */ "./src/draw.js"));

exports.draw = draw;
Object.keys(draw).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = draw[key];
});

var framebuffers = _interopRequireWildcard(__nested_webpack_require_214419__(/*! ./framebuffers.js */ "./src/framebuffers.js"));

exports.framebuffers = framebuffers;
Object.keys(framebuffers).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = framebuffers[key];
});

var programs = _interopRequireWildcard(__nested_webpack_require_214419__(/*! ./programs.js */ "./src/programs.js"));

exports.programs = programs;
Object.keys(programs).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = programs[key];
});

var typedarrays = _interopRequireWildcard(__nested_webpack_require_214419__(/*! ./typedarrays.js */ "./src/typedarrays.js"));

exports.typedarrays = typedarrays;
Object.keys(typedarrays).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = typedarrays[key];
});

var vertexArrays = _interopRequireWildcard(__nested_webpack_require_214419__(/*! ./vertex-arrays.js */ "./src/vertex-arrays.js"));

exports.vertexArrays = vertexArrays;
Object.keys(vertexArrays).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = vertexArrays[key];
});

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * The main TWGL module.
 *
 * For most use cases you shouldn't need anything outside this module.
 * Exceptions between the stuff added to twgl-full (v3, m4, primitives)
 *
 * @module twgl
 * @borrows module:twgl/attributes.setAttribInfoBufferFromArray as setAttribInfoBufferFromArray
 * @borrows module:twgl/attributes.createBufferInfoFromArrays as createBufferInfoFromArrays
 * @borrows module:twgl/attributes.createVertexArrayInfo as createVertexArrayInfo
 * @borrows module:twgl/draw.drawBufferInfo as drawBufferInfo
 * @borrows module:twgl/draw.drawObjectList as drawObjectList
 * @borrows module:twgl/framebuffers.createFramebufferInfo as createFramebufferInfo
 * @borrows module:twgl/framebuffers.resizeFramebufferInfo as resizeFramebufferInfo
 * @borrows module:twgl/framebuffers.bindFramebufferInfo as bindFramebufferInfo
 * @borrows module:twgl/programs.createProgramInfo as createProgramInfo
 * @borrows module:twgl/programs.createUniformBlockInfo as createUniformBlockInfo
 * @borrows module:twgl/programs.bindUniformBlock as bindUniformBlock
 * @borrows module:twgl/programs.setUniformBlock as setUniformBlock
 * @borrows module:twgl/programs.setBlockUniforms as setBlockUniforms
 * @borrows module:twgl/programs.setUniforms as setUniforms
 * @borrows module:twgl/programs.setBuffersAndAttributes as setBuffersAndAttributes
 * @borrows module:twgl/textures.setTextureFromArray as setTextureFromArray
 * @borrows module:twgl/textures.createTexture as createTexture
 * @borrows module:twgl/textures.resizeTexture as resizeTexture
 * @borrows module:twgl/textures.createTextures as createTextures
 */
// make sure we don't see a global gl
var gl = undefined;
/* eslint-disable-line */

var defaults = {
  addExtensionsToContext: true
};
/**
 * Various default settings for twgl.
 *
 * Note: You can call this any number of times. Example:
 *
 *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });
 *     twgl.setDefaults({ attribPrefix: 'a_' });
 *
 * is equivalent to
 *
 *     twgl.setDefaults({
 *       textureColor: [1, 0, 0, 1],
 *       attribPrefix: 'a_',
 *     });
 *
 * @typedef {Object} Defaults
 * @property {string} [attribPrefix] The prefix to stick on attributes
 *
 *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`
 *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.
 *
 *   In other words I'll create arrays of geometry like this
 *
 *       const arrays = {
 *         position: ...
 *         normal: ...
 *         texcoord: ...
 *       };
 *
 *   But need those mapped to attributes and my attributes start with `a_`.
 *
 *   Default: `""`
 *
 * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1
 *
 *   The default texture color is used when loading textures from
 *   urls. Because the URL will be loaded async we'd like to be
 *   able to use the texture immediately. By putting a 1x1 pixel
 *   color in the texture we can start using the texture before
 *   the URL has loaded.
 *
 *   Default: `[0.5, 0.75, 1, 1]`
 *
 * @property {string} [crossOrigin]
 *
 *   If not undefined sets the crossOrigin attribute on images
 *   that twgl creates when downloading images for textures.
 *
 *   Also see {@link module:twgl.TextureOptions}.
 *
 * @property {bool} [addExtensionsToContext]
 *
 *   If true, then, when twgl will try to add any supported WebGL extensions
 *   directly to the context under their normal GL names. For example
 *   if ANGLE_instances_arrays exists then twgl would enable it,
 *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,
 *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`
 *   to the `WebGLRenderingContext`.
 *
 * @memberOf module:twgl
 */

/**
 * Sets various defaults for twgl.
 *
 * In the interest of terseness which is kind of the point
 * of twgl I've integrated a few of the older functions here
 *
 * @param {module:twgl.Defaults} newDefaults The default settings.
 * @memberOf module:twgl
 */

function setDefaults(newDefaults) {
  helper.copyExistingProperties(newDefaults, defaults);
  attributes.setAttributeDefaults_(newDefaults); // eslint-disable-line

  textures.setTextureDefaults_(newDefaults); // eslint-disable-line
}

var prefixRE = /^(.*?)_/;

function addExtensionToContext(gl, extensionName) {
  utils.glEnumToString(gl, 0);
  var ext = gl.getExtension(extensionName);

  if (ext) {
    var enums = {};
    var fnSuffix = prefixRE.exec(extensionName)[1];
    var enumSuffix = '_' + fnSuffix;

    for (var key in ext) {
      var value = ext[key];
      var isFunc = typeof value === 'function';
      var suffix = isFunc ? fnSuffix : enumSuffix;
      var name = key; // examples of where this is not true are WEBGL_compressed_texture_s3tc
      // and WEBGL_compressed_texture_pvrtc

      if (key.endsWith(suffix)) {
        name = key.substring(0, key.length - suffix.length);
      }

      if (gl[name] !== undefined) {
        if (!isFunc && gl[name] !== value) {
          helper.warn(name, gl[name], value, key);
        }
      } else {
        if (isFunc) {
          gl[name] = function (origFn) {
            return function () {
              return origFn.apply(ext, arguments);
            };
          }(value);
        } else {
          gl[name] = value;
          enums[name] = value;
        }
      }
    } // pass the modified enums to glEnumToString


    enums.constructor = {
      name: ext.constructor.name
    };
    utils.glEnumToString(enums, 0);
  }

  return ext;
}
/*
 * If you're wondering why the code doesn't just iterate
 * over all extensions using `gl.getExtensions` is that it's possible
 * some future extension is incompatible with this code. Rather than
 * have thing suddenly break it seems better to manually add to this
 * list.
 *
 */


var supportedExtensions = ['ANGLE_instanced_arrays', 'EXT_blend_minmax', 'EXT_color_buffer_float', 'EXT_color_buffer_half_float', 'EXT_disjoint_timer_query', 'EXT_disjoint_timer_query_webgl2', 'EXT_frag_depth', 'EXT_sRGB', 'EXT_shader_texture_lod', 'EXT_texture_filter_anisotropic', 'OES_element_index_uint', 'OES_standard_derivatives', 'OES_texture_float', 'OES_texture_float_linear', 'OES_texture_half_float', 'OES_texture_half_float_linear', 'OES_vertex_array_object', 'WEBGL_color_buffer_float', 'WEBGL_compressed_texture_atc', 'WEBGL_compressed_texture_etc1', 'WEBGL_compressed_texture_pvrtc', 'WEBGL_compressed_texture_s3tc', 'WEBGL_compressed_texture_s3tc_srgb', 'WEBGL_depth_texture', 'WEBGL_draw_buffers'];
/**
 * Attempts to enable all of the following extensions
 * and add their functions and constants to the
 * `WebGLRenderingContext` using their normal non-extension like names.
 *
 *      ANGLE_instanced_arrays
 *      EXT_blend_minmax
 *      EXT_color_buffer_float
 *      EXT_color_buffer_half_float
 *      EXT_disjoint_timer_query
 *      EXT_disjoint_timer_query_webgl2
 *      EXT_frag_depth
 *      EXT_sRGB
 *      EXT_shader_texture_lod
 *      EXT_texture_filter_anisotropic
 *      OES_element_index_uint
 *      OES_standard_derivatives
 *      OES_texture_float
 *      OES_texture_float_linear
 *      OES_texture_half_float
 *      OES_texture_half_float_linear
 *      OES_vertex_array_object
 *      WEBGL_color_buffer_float
 *      WEBGL_compressed_texture_atc
 *      WEBGL_compressed_texture_etc1
 *      WEBGL_compressed_texture_pvrtc
 *      WEBGL_compressed_texture_s3tc
 *      WEBGL_compressed_texture_s3tc_srgb
 *      WEBGL_depth_texture
 *      WEBGL_draw_buffers
 *
 * For example if `ANGLE_instanced_arrays` exists then the functions
 * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`
 * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the
 * `WebGLRenderingContext`.
 *
 * Note that if you want to know if the extension exists you should
 * probably call `gl.getExtension` for each extension. Alternatively
 * you can check for the existence of the functions or constants that
 * are expected to be added. For example
 *
 *    if (gl.drawBuffers) {
 *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2
 *      ....
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @memberOf module:twgl
 */

function addExtensionsToContext(gl) {
  for (var ii = 0; ii < supportedExtensions.length; ++ii) {
    addExtensionToContext(gl, supportedExtensions[ii]);
  }
}
/**
 * Creates a webgl context.
 * @param {HTMLCanvasElement} canvas The canvas tag to get
 *     context from. If one is not passed in one will be
 *     created.
 * @return {WebGLRenderingContext} The created context.
 * @private
 */


function create3DContext(canvas, opt_attribs) {
  var names = ["webgl", "experimental-webgl"];
  var context = null;

  for (var ii = 0; ii < names.length; ++ii) {
    context = canvas.getContext(names[ii], opt_attribs);

    if (context) {
      if (defaults.addExtensionsToContext) {
        addExtensionsToContext(context);
      }

      break;
    }
  }

  return context;
}
/**
 * Gets a WebGL1 context.
 *
 * Note: Will attempt to enable Vertex Array Objects
 * and add WebGL2 entry points. (unless you first set defaults with
 * `twgl.setDefaults({enableVertexArrayObjects: false})`;
 *
 * @param {HTMLCanvasElement} canvas a canvas element.
 * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes
 * @return {WebGLRenderingContext} The created context.
 * @memberOf module:twgl
 */


function getWebGLContext(canvas, opt_attribs) {
  var gl = create3DContext(canvas, opt_attribs);
  return gl;
}
/**
 * Creates a webgl context.
 *
 * Will return a WebGL2 context if possible.
 *
 * You can check if it's WebGL2 with
 *
 *     twgl.isWebGL2(gl);
 *
 * @param {HTMLCanvasElement} canvas The canvas tag to get
 *     context from. If one is not passed in one will be
 *     created.
 * @return {WebGLRenderingContext} The created context.
 */


function createContext(canvas, opt_attribs) {
  var names = ["webgl2", "webgl", "experimental-webgl"];
  var context = null;

  for (var ii = 0; ii < names.length; ++ii) {
    context = canvas.getContext(names[ii], opt_attribs);

    if (context) {
      if (defaults.addExtensionsToContext) {
        addExtensionsToContext(context);
      }

      break;
    }
  }

  return context;
}
/**
 * Gets a WebGL context.  Will create a WebGL2 context if possible.
 *
 * You can check if it's WebGL2 with
 *
 *    function isWebGL2(gl) {
 *      return gl.getParameter(gl.VERSION).indexOf("WebGL 2.0 ") == 0;
 *    }
 *
 * Note: For a WebGL1 context will attempt to enable Vertex Array Objects
 * and add WebGL2 entry points. (unless you first set defaults with
 * `twgl.setDefaults({enableVertexArrayObjects: false})`;
 *
 * @param {HTMLCanvasElement} canvas a canvas element.
 * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes
 * @return {WebGLRenderingContext} The created context.
 * @memberOf module:twgl
 */


function getContext(canvas, opt_attribs) {
  var gl = createContext(canvas, opt_attribs);
  return gl;
}
/**
 * Resize a canvas to match the size it's displayed.
 * @param {HTMLCanvasElement} canvas The canvas to resize.
 * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.
 * @return {boolean} true if the canvas was resized.
 * @memberOf module:twgl
 */


function resizeCanvasToDisplaySize(canvas, multiplier) {
  multiplier = multiplier || 1;
  multiplier = Math.max(0, multiplier);
  var width = canvas.clientWidth * multiplier | 0;
  var height = canvas.clientHeight * multiplier | 0;

  if (canvas.width !== width || canvas.height !== height) {
    canvas.width = width;
    canvas.height = height;
    return true;
  }

  return false;
}

/***/ }),

/***/ "./src/typedarrays.js":
/*!****************************!*\
  !*** ./src/typedarrays.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getGLTypeForTypedArray = getGLTypeForTypedArray;
exports.getGLTypeForTypedArrayType = getGLTypeForTypedArrayType;
exports.getTypedArrayTypeForGLType = getTypedArrayTypeForGLType;
exports.isArrayBuffer = void 0;

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * Low level shader typed array related functions
 *
 * You should generally not need to use these functions. They are provided
 * for those cases where you're doing something out of the ordinary
 * and you need lower level access.
 *
 * For backward compatibility they are available at both `twgl.typedArray` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/typedArray
 */
// make sure we don't see a global gl
var gl = undefined;
/* eslint-disable-line */

/* DataType */

var BYTE = 0x1400;
var UNSIGNED_BYTE = 0x1401;
var SHORT = 0x1402;
var UNSIGNED_SHORT = 0x1403;
var INT = 0x1404;
var UNSIGNED_INT = 0x1405;
var FLOAT = 0x1406;
var UNSIGNED_SHORT_4_4_4_4 = 0x8033;
var UNSIGNED_SHORT_5_5_5_1 = 0x8034;
var UNSIGNED_SHORT_5_6_5 = 0x8363;
var HALF_FLOAT = 0x140B;
var UNSIGNED_INT_2_10_10_10_REV = 0x8368;
var UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
var UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
var FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
var UNSIGNED_INT_24_8 = 0x84FA;
var glTypeToTypedArray = {};
{
  var tt = glTypeToTypedArray;
  tt[BYTE] = Int8Array;
  tt[UNSIGNED_BYTE] = Uint8Array;
  tt[SHORT] = Int16Array;
  tt[UNSIGNED_SHORT] = Uint16Array;
  tt[INT] = Int32Array;
  tt[UNSIGNED_INT] = Uint32Array;
  tt[FLOAT] = Float32Array;
  tt[UNSIGNED_SHORT_4_4_4_4] = Uint16Array;
  tt[UNSIGNED_SHORT_5_5_5_1] = Uint16Array;
  tt[UNSIGNED_SHORT_5_6_5] = Uint16Array;
  tt[HALF_FLOAT] = Uint16Array;
  tt[UNSIGNED_INT_2_10_10_10_REV] = Uint32Array;
  tt[UNSIGNED_INT_10F_11F_11F_REV] = Uint32Array;
  tt[UNSIGNED_INT_5_9_9_9_REV] = Uint32Array;
  tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;
  tt[UNSIGNED_INT_24_8] = Uint32Array;
}
/**
 * Get the GL type for a typedArray
 * @param {ArrayBufferView} typedArray a typedArray
 * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will
 *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned
 * @memberOf module:twgl/typedArray
 */

function getGLTypeForTypedArray(typedArray) {
  if (typedArray instanceof Int8Array) {
    return BYTE;
  } // eslint-disable-line


  if (typedArray instanceof Uint8Array) {
    return UNSIGNED_BYTE;
  } // eslint-disable-line


  if (typedArray instanceof Uint8ClampedArray) {
    return UNSIGNED_BYTE;
  } // eslint-disable-line


  if (typedArray instanceof Int16Array) {
    return SHORT;
  } // eslint-disable-line


  if (typedArray instanceof Uint16Array) {
    return UNSIGNED_SHORT;
  } // eslint-disable-line


  if (typedArray instanceof Int32Array) {
    return INT;
  } // eslint-disable-line


  if (typedArray instanceof Uint32Array) {
    return UNSIGNED_INT;
  } // eslint-disable-line


  if (typedArray instanceof Float32Array) {
    return FLOAT;
  } // eslint-disable-line


  throw new Error('unsupported typed array type');
}
/**
 * Get the GL type for a typedArray type
 * @param {ArrayBufferView} typedArrayType a typedArray constructor
 * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will
 *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned
 * @memberOf module:twgl/typedArray
 */


function getGLTypeForTypedArrayType(typedArrayType) {
  if (typedArrayType === Int8Array) {
    return BYTE;
  } // eslint-disable-line


  if (typedArrayType === Uint8Array) {
    return UNSIGNED_BYTE;
  } // eslint-disable-line


  if (typedArrayType === Uint8ClampedArray) {
    return UNSIGNED_BYTE;
  } // eslint-disable-line


  if (typedArrayType === Int16Array) {
    return SHORT;
  } // eslint-disable-line


  if (typedArrayType === Uint16Array) {
    return UNSIGNED_SHORT;
  } // eslint-disable-line


  if (typedArrayType === Int32Array) {
    return INT;
  } // eslint-disable-line


  if (typedArrayType === Uint32Array) {
    return UNSIGNED_INT;
  } // eslint-disable-line


  if (typedArrayType === Float32Array) {
    return FLOAT;
  } // eslint-disable-line


  throw new Error('unsupported typed array type');
}
/**
 * Get the typed array constructor for a given GL type
 * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)
 * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).
 * @memberOf module:twgl/typedArray
 */


function getTypedArrayTypeForGLType(type) {
  var CTOR = glTypeToTypedArray[type];

  if (!CTOR) {
    throw new Error('unknown gl type');
  }

  return CTOR;
}

var isArrayBuffer = typeof SharedArrayBuffer !== 'undefined' ? function isArrayBufferOrSharedArrayBuffer(a) {
  return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);
} : function isArrayBuffer(a) {
  return a && a.buffer && a.buffer instanceof ArrayBuffer;
};
exports.isArrayBuffer = isArrayBuffer;

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.isWebGL1 = isWebGL1;
exports.isWebGL2 = isWebGL2;
exports.glEnumToString = void 0;

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * Gets the gl version as a number
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @return {number} version of gl
 * @private
 */
//function getVersionAsNumber(gl) {
//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));
//}

/**
 * Check if context is WebGL 2.0
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @return {bool} true if it's WebGL 2.0
 * @memberOf module:twgl
 */
function isWebGL2(gl) {
  // This is the correct check but it's slow
  //  return gl.getParameter(gl.VERSION).indexOf("WebGL 2.0") === 0;
  // This might also be the correct check but I'm assuming it's slow-ish
  // return gl instanceof WebGL2RenderingContext;
  return !!gl.texStorage2D;
}
/**
 * Check if context is WebGL 1.0
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @return {bool} true if it's WebGL 1.0
 * @memberOf module:twgl
 */


function isWebGL1(gl) {
  // This is the correct check but it's slow
  // const version = getVersionAsNumber(gl);
  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96
  // This might also be the correct check but I'm assuming it's slow-ish
  // return gl instanceof WebGLRenderingContext;
  return !gl.texStorage2D;
}
/**
 * Gets a string for WebGL enum
 *
 * Note: Several enums are the same. Without more
 * context (which function) it's impossible to always
 * give the correct enum. As it is, for matching values
 * it gives all enums. Checking the WebGL2RenderingContext
 * that means
 *
 *      0     = ZERO | POINT | NONE | NO_ERROR
 *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT
 *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB
 *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING
 *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING
 *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING
 *
 * It's also not useful for bits really unless you pass in individual bits.
 * In other words
 *
 *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;
 *     twgl.glEnumToString(gl, bits);  // not going to work
 *
 * Note that some enums only exist on extensions. If you
 * want them to show up you need to pass the extension at least
 * once. For example
 *
 *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');
 *     if (ext) {
 *        twgl.glEnumToString(ext, 0);  // just prime the function
 *
 *        ..later..
 *
 *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;
 *        console.log(twgl.glEnumToString(gl, internalFormat));
 *
 * Notice I didn't have to pass the extension the second time. This means
 * you can have place that generically gets an enum for texture formats for example.
 * and as long as you primed the function with the extensions
 *
 * If you're using `twgl.addExtensionsToContext` to enable your extensions
 * then twgl will automatically get the extension's enums.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object
 * @param {number} value the value of the enum you want to look up.
 * @return {string} enum string or hex value
 * @memberOf module:twgl
 * @function glEnumToString
 */


var glEnumToString = function () {
  var haveEnumsForType = {};
  var enums = {};

  function addEnums(gl) {
    var type = gl.constructor.name;

    if (!haveEnumsForType[type]) {
      for (var key in gl) {
        if (typeof gl[key] === 'number') {
          var existing = enums[gl[key]];
          enums[gl[key]] = existing ? "".concat(existing, " | ").concat(key) : key;
        }
      }

      haveEnumsForType[type] = true;
    }
  }

  return function glEnumToString(gl, value) {
    addEnums(gl);
    return enums[value] || (typeof value === 'number' ? "0x".concat(value.toString(16)) : value);
  };
}();

exports.glEnumToString = glEnumToString;

/***/ }),

/***/ "./src/vertex-arrays.js":
/*!******************************!*\
  !*** ./src/vertex-arrays.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_244243__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

exports.__esModule = true;
exports.createVertexArrayInfo = createVertexArrayInfo;
exports.createVAOAndSetAttributes = createVAOAndSetAttributes;
exports.createVAOFromBufferInfo = createVAOFromBufferInfo;

var programs = _interopRequireWildcard(__nested_webpack_require_244243__(/*! ./programs.js */ "./src/programs.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * vertex array object related functions
 *
 * You should generally not need to use these functions. They are provided
 * for those cases where you're doing something out of the ordinary
 * and you need lower level access.
 *
 * For backward compatibility they are available at both `twgl.attributes` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/vertexArrays
 */
var ELEMENT_ARRAY_BUFFER = 0x8893;
/**
 * @typedef {Object} VertexArrayInfo
 * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.
 * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..
 * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object
 * @memberOf module:twgl
 */

/**
 * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos
 *
 * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to
 * {@link module:twgl:drawBufferInfo}.
 *
 * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects
 *   assign buffers to specific attributes at creation time. That means they can only be used with programs
 *   who's attributes use the same attribute locations for the same purposes.
 *
 * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}
 *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.
 *
 * also
 *
 * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object
 *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**
 *   will affect the Vertex Array Object state.
 *
 * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos
 * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...
 *
 *    You need to make sure every attribute that will be used is bound. So for example assume shader 1
 *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo
 *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't
 *    now attribute D's location.
 *
 *    So, you can pass in both shader 1 and shader 2's programInfo
 *
 * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo
 *
 * @memberOf module:twgl/vertexArrays
 */

function createVertexArrayInfo(gl, programInfos, bufferInfo) {
  var vao = gl.createVertexArray();
  gl.bindVertexArray(vao);

  if (!programInfos.length) {
    programInfos = [programInfos];
  }

  programInfos.forEach(function (programInfo) {
    programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);
  });
  gl.bindVertexArray(null);
  return {
    numElements: bufferInfo.numElements,
    elementType: bufferInfo.elementType,
    vertexArrayObject: vao
  };
}
/**
 * Creates a vertex array object and then sets the attributes on it
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters
 * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.
 * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices
 * @memberOf module:twgl/vertexArrays
 */


function createVAOAndSetAttributes(gl, setters, attribs, indices) {
  var vao = gl.createVertexArray();
  gl.bindVertexArray(vao);
  programs.setAttributes(setters, attribs);

  if (indices) {
    gl.bindBuffer(ELEMENT_ARRAY_BUFFER, indices);
  } // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER
  // like when creating buffers for other stuff will mess up this VAO's binding


  gl.bindVertexArray(null);
  return vao;
}
/**
 * Creates a vertex array object and then sets the attributes
 * on it
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters
 * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...
 * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices
 * @memberOf module:twgl/vertexArrays
 */


function createVAOFromBufferInfo(gl, programInfo, bufferInfo) {
  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);
}

/***/ })

/******/ });
});
//# sourceMappingURL=twgl.js.map

/***/ }),

/***/ "./lib/twgl.js/twgl.min.js":
/*!*********************************!*\
  !*** ./lib/twgl.js/twgl.min.js ***!
  \*********************************/
/***/ (function(module) {

/*!
 * @license twgl.js 4.22.0 Copyright (c) 2015, Gregg Tavares All Rights Reserved.
 * Available via the MIT license.
 * see: http://github.com/greggman/twgl.js for details
 */
!function(e,t){ true?module.exports=t():0}("undefined"!=typeof self?self:this,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=5)}([function(e,t,r){"use strict";t.__esModule=!0,t.copyExistingProperties=function(e,t){Object.keys(t).forEach((function(r){t.hasOwnProperty(r)&&e.hasOwnProperty(r)&&(t[r]=e[r])}))},t.copyNamedProperties=function(e,t,r){e.forEach((function(e){var n=t[e];void 0!==n&&(r[e]=n)}))},t.error=function(){var e;(e=console).error.apply(e,arguments)},t.warn=function(){var e;(e=console).warn.apply(e,arguments)},t.isBuffer=function(e,t){return"undefined"!=typeof WebGLBuffer&&t instanceof WebGLBuffer},t.isRenderbuffer=function(e,t){return"undefined"!=typeof WebGLRenderbuffer&&t instanceof WebGLRenderbuffer},t.isShader=function(e,t){return"undefined"!=typeof WebGLShader&&t instanceof WebGLShader},t.isTexture=function(e,t){return"undefined"!=typeof WebGLTexture&&t instanceof WebGLTexture},t.isSampler=function(e,t){return"undefined"!=typeof WebGLSampler&&t instanceof WebGLSampler}},function(e,t,r){"use strict";t.__esModule=!0,t.getGLTypeForTypedArray=function(e){if(e instanceof Int8Array)return n;if(e instanceof Uint8Array)return o;if(e instanceof Uint8ClampedArray)return o;if(e instanceof Int16Array)return u;if(e instanceof Uint16Array)return i;if(e instanceof Int32Array)return a;if(e instanceof Uint32Array)return f;if(e instanceof Float32Array)return l;throw new Error("unsupported typed array type")},t.getGLTypeForTypedArrayType=function(e){if(e===Int8Array)return n;if(e===Uint8Array)return o;if(e===Uint8ClampedArray)return o;if(e===Int16Array)return u;if(e===Uint16Array)return i;if(e===Int32Array)return a;if(e===Uint32Array)return f;if(e===Float32Array)return l;throw new Error("unsupported typed array type")},t.getTypedArrayTypeForGLType=function(e){var t=c[e];if(!t)throw new Error("unknown gl type");return t},t.isArrayBuffer=void 0;var n=5120,o=5121,u=5122,i=5123,a=5124,f=5125,l=5126,c={},s=c;s[n]=Int8Array,s[5121]=Uint8Array,s[5122]=Int16Array,s[5123]=Uint16Array,s[a]=Int32Array,s[5125]=Uint32Array,s[5126]=Float32Array,s[32819]=Uint16Array,s[32820]=Uint16Array,s[33635]=Uint16Array,s[5131]=Uint16Array,s[33640]=Uint32Array,s[35899]=Uint32Array,s[35902]=Uint32Array,s[36269]=Uint32Array,s[34042]=Uint32Array;var y="undefined"!=typeof SharedArrayBuffer?function(e){return e&&e.buffer&&(e.buffer instanceof ArrayBuffer||e.buffer instanceof SharedArrayBuffer)}:function(e){return e&&e.buffer&&e.buffer instanceof ArrayBuffer};t.isArrayBuffer=y},function(e,t,r){"use strict";t.__esModule=!0,t.isWebGL1=function(e){return!e.texStorage2D},t.isWebGL2=function(e){return!!e.texStorage2D},t.glEnumToString=void 0;var n,o,u=(n={},o={},function(e,t){return function(e){var t=e.constructor.name;if(!n[t]){for(var r in e)if("number"==typeof e[r]){var u=o[e[r]];o[e[r]]=u?"".concat(u," | ").concat(r):r}n[t]=!0}}(e),o[t]||("number"==typeof t?"0x".concat(t.toString(16)):t)});t.glEnumToString=u},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}t.__esModule=!0,t.createAttributeSetters=ae,t.createProgram=H,t.createProgramFromScripts=function(e,t,r,n,o){for(var u=G(r,n,o),i=[],a=0;a<t.length;++a){var f=q(e,t[a],e[X[a]],u.errorCallback);if(!f)return null;i.push(f)}return H(e,i,u)},t.createProgramFromSources=V,t.createProgramInfo=function(e,t,r,n,o){var u=G(r,n,o),i=!0;if(t=t.map((function(e){if(e.indexOf("\n")<0){var t=y(e);t?e=t.text:(u.errorCallback("no element with id: "+e),i=!1)}return e})),!i)return null;var a=V(e,t,u);if(!a)return null;return le(e,a)},t.createProgramInfoFromProgram=le,t.createUniformSetters=Z,t.createUniformBlockSpecFromProgram=ee,t.createUniformBlockInfoFromProgram=re,t.createUniformBlockInfo=function(e,t,r){return re(e,t.program,t.uniformBlockSpec,r)},t.createTransformFeedback=function(e,t,r){var n=e.createTransformFeedback();return e.bindTransformFeedback(36386,n),e.useProgram(t.program),Q(e,t,r),e.bindTransformFeedback(36386,null),n},t.createTransformFeedbackInfo=J,t.bindTransformFeedbackInfo=Q,t.setAttributes=fe,t.setBuffersAndAttributes=function(e,t,r){r.vertexArrayObject?e.bindVertexArray(r.vertexArrayObject):(fe(t.attribSetters||t,r.attribs),r.indices&&e.bindBuffer(34963,r.indices))},t.setUniforms=ue,t.setUniformBlock=function(e,t,r){ne(e,t,r)&&e.bufferData(m,r.array,35048)},t.setBlockUniforms=function(e,t){var r=e.setters;for(var n in t){var o=r[n];if(o){var u=t[n];o(u)}}},t.bindUniformBlock=ne,t.setUniformsAndBindTextures=void 0;var o=a(r(2)),u=a(r(0));function i(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return i=function(){return e},e}function a(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=i();if(t&&t.has(e))return t.get(e);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(Object.prototype.hasOwnProperty.call(e,u)){var a=o?Object.getOwnPropertyDescriptor(e,u):null;a&&(a.get||a.set)?Object.defineProperty(r,u,a):r[u]=e[u]}return r.default=e,t&&t.set(e,r),r}function f(e){return function(e){if(Array.isArray(e))return l(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return l(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var c=u.error,s=u.warn;function y(e){return"undefined"!=typeof document&&document.getElementById?document.getElementById(e):null}var b=33984,v=34962,m=35345,p=5126,d=5124,x=5125,F=3553,E=34067,w=32879,_=35866,A={};function j(e,t){return A[t].bindPoint}function O(e,t){return function(r){e.uniform1i(t,r)}}function h(e,t){return function(r){e.uniform1iv(t,r)}}function S(e,t){return function(r){e.uniform2iv(t,r)}}function R(e,t){return function(r){e.uniform3iv(t,r)}}function P(e,t){return function(r){e.uniform4iv(t,r)}}function T(e,t,r,n){var i=j(0,t);return o.isWebGL2(e)?function(t){var o,a;u.isTexture(e,t)?(o=t,a=null):(o=t.texture,a=t.sampler),e.uniform1i(n,r),e.activeTexture(b+r),e.bindTexture(i,o),e.bindSampler(r,a)}:function(t){e.uniform1i(n,r),e.activeTexture(b+r),e.bindTexture(i,t)}}function g(e,t,r,n,i){for(var a=j(0,t),f=new Int32Array(i),l=0;l<i;++l)f[l]=r+l;return o.isWebGL2(e)?function(t){e.uniform1iv(n,f),t.forEach((function(t,n){var o,i;e.activeTexture(b+f[n]),u.isTexture(e,t)?(o=t,i=null):(o=t.texture,i=t.sampler),e.bindSampler(r,i),e.bindTexture(a,o)}))}:function(t){e.uniform1iv(n,f),t.forEach((function(t,r){e.activeTexture(b+f[r]),e.bindTexture(a,t)}))}}function z(e,t){return function(r){if(r.value)switch(e.disableVertexAttribArray(t),r.value.length){case 4:e.vertexAttrib4fv(t,r.value);break;case 3:e.vertexAttrib3fv(t,r.value);break;case 2:e.vertexAttrib2fv(t,r.value);break;case 1:e.vertexAttrib1fv(t,r.value);break;default:throw new Error("the length of a float constant value must be between 1 and 4!")}else e.bindBuffer(v,r.buffer),e.enableVertexAttribArray(t),e.vertexAttribPointer(t,r.numComponents||r.size,r.type||p,r.normalize||!1,r.stride||0,r.offset||0),void 0!==r.divisor&&e.vertexAttribDivisor(t,r.divisor)}}function C(e,t){return function(r){if(r.value){if(e.disableVertexAttribArray(t),4!==r.value.length)throw new Error("The length of an integer constant value must be 4!");e.vertexAttrib4iv(t,r.value)}else e.bindBuffer(v,r.buffer),e.enableVertexAttribArray(t),e.vertexAttribIPointer(t,r.numComponents||r.size,r.type||d,r.stride||0,r.offset||0),void 0!==r.divisor&&e.vertexAttribDivisor(t,r.divisor)}}function U(e,t){return function(r){if(r.value){if(e.disableVertexAttribArray(t),4!==r.value.length)throw new Error("The length of an unsigned integer constant value must be 4!");e.vertexAttrib4uiv(t,r.value)}else e.bindBuffer(v,r.buffer),e.enableVertexAttribArray(t),e.vertexAttribIPointer(t,r.numComponents||r.size,r.type||x,r.stride||0,r.offset||0),void 0!==r.divisor&&e.vertexAttribDivisor(t,r.divisor)}}function M(e,t,r){var n=r.size,o=r.count;return function(r){e.bindBuffer(v,r.buffer);for(var u=r.size||r.numComponents||n,i=u/o,a=r.type||p,f=A[a].size*u,l=r.normalize||!1,c=r.offset||0,s=f/o,y=0;y<o;++y)e.enableVertexAttribArray(t+y),e.vertexAttribPointer(t+y,i,a,l,f,c+s*y),void 0!==r.divisor&&e.vertexAttribDivisor(t+y,r.divisor)}}A[5126]={Type:Float32Array,size:4,setter:function(e,t){return function(r){e.uniform1f(t,r)}},arraySetter:function(e,t){return function(r){e.uniform1fv(t,r)}}},A[35664]={Type:Float32Array,size:8,setter:function(e,t){return function(r){e.uniform2fv(t,r)}},cols:2},A[35665]={Type:Float32Array,size:12,setter:function(e,t){return function(r){e.uniform3fv(t,r)}},cols:3},A[35666]={Type:Float32Array,size:16,setter:function(e,t){return function(r){e.uniform4fv(t,r)}},cols:4},A[d]={Type:Int32Array,size:4,setter:O,arraySetter:h},A[35667]={Type:Int32Array,size:8,setter:S,cols:2},A[35668]={Type:Int32Array,size:12,setter:R,cols:3},A[35669]={Type:Int32Array,size:16,setter:P,cols:4},A[5125]={Type:Uint32Array,size:4,setter:function(e,t){return function(r){e.uniform1ui(t,r)}},arraySetter:function(e,t){return function(r){e.uniform1uiv(t,r)}}},A[36294]={Type:Uint32Array,size:8,setter:function(e,t){return function(r){e.uniform2uiv(t,r)}},cols:2},A[36295]={Type:Uint32Array,size:12,setter:function(e,t){return function(r){e.uniform3uiv(t,r)}},cols:3},A[36296]={Type:Uint32Array,size:16,setter:function(e,t){return function(r){e.uniform4uiv(t,r)}},cols:4},A[35670]={Type:Uint32Array,size:4,setter:O,arraySetter:h},A[35671]={Type:Uint32Array,size:8,setter:S,cols:2},A[35672]={Type:Uint32Array,size:12,setter:R,cols:3},A[35673]={Type:Uint32Array,size:16,setter:P,cols:4},A[35674]={Type:Float32Array,size:32,setter:function(e,t){return function(r){e.uniformMatrix2fv(t,!1,r)}},rows:2,cols:2},A[35675]={Type:Float32Array,size:48,setter:function(e,t){return function(r){e.uniformMatrix3fv(t,!1,r)}},rows:3,cols:3},A[35676]={Type:Float32Array,size:64,setter:function(e,t){return function(r){e.uniformMatrix4fv(t,!1,r)}},rows:4,cols:4},A[35685]={Type:Float32Array,size:32,setter:function(e,t){return function(r){e.uniformMatrix2x3fv(t,!1,r)}},rows:2,cols:3},A[35686]={Type:Float32Array,size:32,setter:function(e,t){return function(r){e.uniformMatrix2x4fv(t,!1,r)}},rows:2,cols:4},A[35687]={Type:Float32Array,size:48,setter:function(e,t){return function(r){e.uniformMatrix3x2fv(t,!1,r)}},rows:3,cols:2},A[35688]={Type:Float32Array,size:48,setter:function(e,t){return function(r){e.uniformMatrix3x4fv(t,!1,r)}},rows:3,cols:4},A[35689]={Type:Float32Array,size:64,setter:function(e,t){return function(r){e.uniformMatrix4x2fv(t,!1,r)}},rows:4,cols:2},A[35690]={Type:Float32Array,size:64,setter:function(e,t){return function(r){e.uniformMatrix4x3fv(t,!1,r)}},rows:4,cols:3},A[35678]={Type:null,size:0,setter:T,arraySetter:g,bindPoint:F},A[35680]={Type:null,size:0,setter:T,arraySetter:g,bindPoint:E},A[35679]={Type:null,size:0,setter:T,arraySetter:g,bindPoint:w},A[35682]={Type:null,size:0,setter:T,arraySetter:g,bindPoint:F},A[36289]={Type:null,size:0,setter:T,arraySetter:g,bindPoint:_},A[36292]={Type:null,size:0,setter:T,arraySetter:g,bindPoint:_},A[36293]={Type:null,size:0,setter:T,arraySetter:g,bindPoint:E},A[36298]={Type:null,size:0,setter:T,arraySetter:g,bindPoint:F},A[36299]={Type:null,size:0,setter:T,arraySetter:g,bindPoint:w},A[36300]={Type:null,size:0,setter:T,arraySetter:g,bindPoint:E},A[36303]={Type:null,size:0,setter:T,arraySetter:g,bindPoint:_},A[36306]={Type:null,size:0,setter:T,arraySetter:g,bindPoint:F},A[36307]={Type:null,size:0,setter:T,arraySetter:g,bindPoint:w},A[36308]={Type:null,size:0,setter:T,arraySetter:g,bindPoint:E},A[36311]={Type:null,size:0,setter:T,arraySetter:g,bindPoint:_};var k={};k[5126]={size:4,setter:z},k[35664]={size:8,setter:z},k[35665]={size:12,setter:z},k[35666]={size:16,setter:z},k[d]={size:4,setter:C},k[35667]={size:8,setter:C},k[35668]={size:12,setter:C},k[35669]={size:16,setter:C},k[5125]={size:4,setter:U},k[36294]={size:8,setter:U},k[36295]={size:12,setter:U},k[36296]={size:16,setter:U},k[35670]={size:4,setter:C},k[35671]={size:8,setter:C},k[35672]={size:12,setter:C},k[35673]={size:16,setter:C},k[35674]={size:4,setter:M,count:2},k[35675]={size:9,setter:M,count:3},k[35676]={size:16,setter:M,count:4};var I=/ERROR:\s*\d+:(\d+)/gi;function W(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,n=f(t.matchAll(I)),o=new Map(n.map((function(e,r){var o=parseInt(e[1]),u=n[r+1],i=u?u.index:t.length;return[o-1,t.substring(e.index,i)]})));return e.split("\n").map((function(e,t){var n=o.get(t);return"".concat(t+1+r,": ").concat(e).concat(n?"\n\n^^^ ".concat(n):"")})).join("\n")}var B=/^[ \t]*\n/;function L(e,t,r,n){var u=n||c,i=e.createShader(r),a=0;if(B.test(t)&&(a=1,t=t.replace(B,"")),e.shaderSource(i,t),e.compileShader(i),!e.getShaderParameter(i,35713)){var f=e.getShaderInfoLog(i);return u("".concat(W(t,f,a),"\nError compiling ").concat(o.glEnumToString(e,r),": ").concat(f)),e.deleteShader(i),null}return i}function G(e,t,r){var n,o;if("function"==typeof t&&(r=t,t=void 0),"function"==typeof e)r=e,e=void 0;else if(e&&!Array.isArray(e)){if(e.errorCallback)return e;var u=e;r=u.errorCallback,e=u.attribLocations,n=u.transformFeedbackVaryings,o=u.transformFeedbackMode}var i={errorCallback:r||c,transformFeedbackVaryings:n,transformFeedbackMode:o};if(e){var a={};Array.isArray(e)?e.forEach((function(e,r){a[e]=t?t[r]:r})):a=e,i.attribLocations=a}return i}var X=["VERTEX_SHADER","FRAGMENT_SHADER"];function D(e,t){return t.indexOf("frag")>=0?35632:t.indexOf("vert")>=0?35633:void 0}function N(e,t){t.forEach((function(t){e.deleteShader(t)}))}function H(e,t,r,n,i){for(var a=G(r,n,i),f=[],l=[],c=0;c<t.length;++c){var s=t[c];if("string"==typeof s){var b=y(s),v=b?b.text:s,m=e[X[c]];b&&b.type&&(m=D(0,b.type)||m),s=L(e,v,m,a.errorCallback),l.push(s)}u.isShader(e,s)&&f.push(s)}if(f.length!==t.length)return a.errorCallback("not enough shaders for program"),N(e,l),null;var p=e.createProgram();f.forEach((function(t){e.attachShader(p,t)})),a.attribLocations&&Object.keys(a.attribLocations).forEach((function(t){e.bindAttribLocation(p,a.attribLocations[t],t)}));var d=a.transformFeedbackVaryings;if(d&&(d.attribs&&(d=d.attribs),Array.isArray(d)||(d=Object.keys(d)),e.transformFeedbackVaryings(p,d,a.transformFeedbackMode||35981)),e.linkProgram(p),!e.getProgramParameter(p,35714)){var x=e.getProgramInfoLog(p);return a.errorCallback("".concat(f.map((function(t){var r=W(e.getShaderSource(t),"",0),n=e.getShaderParameter(t,e.SHADER_TYPE);return"".concat(o.glEnumToString(e,n),"\n").concat(r,"}")})).join("\n"),"\nError in program linking: ").concat(x)),e.deleteProgram(p),N(e,l),null}return p}function q(e,t,r,n){var o,u=y(t);if(!u)throw new Error("unknown script element: ".concat(t));o=u.text;var i=r||D(0,u.type);if(!i)throw new Error("unknown shader type");return L(e,o,i,n)}function V(e,t,r,n,o){for(var u=G(r,n,o),i=[],a=0;a<t.length;++a){var f=L(e,t[a],e[X[a]],u.errorCallback);if(!f)return null;i.push(f)}return H(e,i,u)}function Y(e){var t=e.name;return t.startsWith("gl_")||t.startsWith("webgl_")}var $=/(\.|\[|]|\w+)/g;function K(e,t,r,n){for(var o,u=e.split($).filter((function(e){return""!==e})),i=0,a="";;){var f=u[i++];a+=f;var l=(o=f[0])>="0"&&o<="9",c=l?parseInt(f):f;if(l&&(a+=u[i++]),i===u.length){r[c]=t;break}var s=u[i++],y="["===s,b=r[c]||(y?[]:{});r[c]=b,r=b,n[a]=n[a]||function(e){return function(t){oe(e,t)}}(b),a+=s}}function Z(e,t){var r=0;function n(t,n,o){var u,i=n.name.endsWith("[0]"),a=n.type,f=A[a];if(!f)throw new Error("unknown type: 0x".concat(a.toString(16)));if(f.bindPoint){var l=r;r+=n.size,u=i?f.arraySetter(e,a,l,o,n.size):f.setter(e,a,l,o,n.size)}else u=f.arraySetter&&i?f.arraySetter(e,o):f.setter(e,o);return u.location=o,u}for(var o={},u={},i=e.getProgramParameter(t,35718),a=0;a<i;++a){var f=e.getActiveUniform(t,a);if(!Y(f)){var l=f.name;l.endsWith("[0]")&&(l=l.substr(0,l.length-3));var c=e.getUniformLocation(t,f.name);if(c){var s=n(0,f,c);o[l]=s,K(l,s,u,o)}}}return o}function J(e,t){for(var r={},n=e.getProgramParameter(t,35971),o=0;o<n;++o){var u=e.getTransformFeedbackVarying(t,o);r[u.name]={index:o,type:u.type,size:u.size}}return r}function Q(e,t,r){for(var n in t.transformFeedbackInfo&&(t=t.transformFeedbackInfo),r.attribs&&(r=r.attribs),r){var o=t[n];if(o){var u=r[n];u.offset?e.bindBufferRange(35982,o.index,u.buffer,u.offset,u.size):e.bindBufferBase(35982,o.index,u.buffer)}}}function ee(e,t){for(var r=e.getProgramParameter(t,35718),n=[],o=[],u=0;u<r;++u){o.push(u),n.push({});var i=e.getActiveUniform(t,u);n[u].name=i.name}[["UNIFORM_TYPE","type"],["UNIFORM_SIZE","size"],["UNIFORM_BLOCK_INDEX","blockNdx"],["UNIFORM_OFFSET","offset"]].forEach((function(r){var u=r[0],i=r[1];e.getActiveUniforms(t,o,e[u]).forEach((function(e,t){n[t][i]=e}))}));for(var a={},f=e.getProgramParameter(t,35382),l=0;l<f;++l){var c=e.getActiveUniformBlockName(t,l),s={index:e.getUniformBlockIndex(t,c),usedByVertexShader:e.getActiveUniformBlockParameter(t,l,35396),usedByFragmentShader:e.getActiveUniformBlockParameter(t,l,35398),size:e.getActiveUniformBlockParameter(t,l,35392),uniformIndices:e.getActiveUniformBlockParameter(t,l,35395)};s.used=s.usedByVertexShader||s.usedByFragmentShader,a[c]=s}return{blockSpecs:a,uniformData:n}}var te=/\[\d+\]\.$/;function re(e,t,r,n){var o=r.blockSpecs,u=r.uniformData,i=o[n];if(!i)return s("no uniform block object named:",n),{name:n,uniforms:{}};var a=new ArrayBuffer(i.size),f=e.createBuffer(),l=i.index;e.bindBuffer(m,f),e.uniformBlockBinding(t,i.index,l);var c=n+".";te.test(c)&&(c=c.replace(te,"."));var y={},b={},v={};return i.uniformIndices.forEach((function(e){var t=u[e],r=t.name;r.startsWith(c)&&(r=r.substr(c.length));var n=r.endsWith("[0]");n&&(r=r.substr(0,r.length-3));var o,i=A[t.type],f=i.Type,l=n?((i.size+((o=16)-1))/o|0)*o*t.size:i.size*t.size,s=new f(a,t.offset,l/f.BYTES_PER_ELEMENT);y[r]=s;var m=function(e,t,r,n){if(t||r){n=n||1;var o=e.length/4;return function(t){for(var r=0,u=0,i=0;i<o;++i){for(var a=0;a<n;++a)e[r++]=t[u++];r+=4-n}}}return function(t){t.length?e.set(t):e[0]=t}}(s,n,i.rows,i.cols);b[r]=m,K(r,m,v,b)})),{name:n,array:a,asFloat:new Float32Array(a),buffer:f,uniforms:y,setters:b}}function ne(e,t,r){var n=(t.uniformBlockSpec||t).blockSpecs[r.name];if(n){var o=n.index;return e.bindBufferRange(m,o,r.buffer,r.offset||0,r.array.byteLength),!0}return!1}function oe(e,t){for(var r in t){var n=e[r];"function"==typeof n?n(t[r]):oe(e[r],t[r])}}function ue(e){for(var t=e.uniformSetters||e,r=arguments.length<=1?0:arguments.length-1,n=0;n<r;++n){var o=n+1<1||arguments.length<=n+1?void 0:arguments[n+1];if(Array.isArray(o))for(var u=o.length,i=0;i<u;++i)ue(t,o[i]);else for(var a in o){var f=t[a];f&&f(o[a])}}}var ie=ue;function ae(e,t){for(var r={},n=e.getProgramParameter(t,35721),o=0;o<n;++o){var u=e.getActiveAttrib(t,o);if(!Y(u)){var i=e.getAttribLocation(t,u.name),a=k[u.type],f=a.setter(e,i,a);f.location=i,r[u.name]=f}}return r}function fe(e,t){for(var r in t){var n=e[r];n&&n(t[r])}}function le(e,t){var r={program:t,uniformSetters:Z(e,t),attribSetters:ae(e,t)};return o.isWebGL2(e)&&(r.uniformBlockSpec=ee(e,t),r.transformFeedbackInfo=J(e,t)),r}t.setUniformsAndBindTextures=ie},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}t.__esModule=!0,t.setTextureDefaults_=function(e){i.copyExistingProperties(e,s),e.textureColor&&oe(e.textureColor)},t.createSampler=ce,t.createSamplers=function(e,t){var r={};return Object.keys(t).forEach((function(n){r[n]=ce(e,t[n])})),r},t.setSamplerParameters=le,t.createTexture=he,t.setEmptyTexture=Oe,t.setTextureFromArray=je,t.loadTextureFromUrl=we,t.setTextureFromElement=me,t.setTextureFilteringForSize=se,t.setTextureParameters=fe,t.setDefaultTextureColor=oe,t.createTextures=function(e,t,r){r=r||pe;var n=0,o=[],u={},i={};function a(){0===n&&setTimeout((function(){r(o.length?o:void 0,u,i)}),0)}return Object.keys(t).forEach((function(r){var f,l,c=t[r];("string"==typeof(l=c.src)||Array.isArray(l)&&"string"==typeof l[0])&&(f=function(e,t,u){i[r]=u,--n,e&&o.push(e),a()},++n),u[r]=he(e,c,f)})),a(),u},t.resizeTexture=function(e,t,r,n,o,u){n=n||r.width,o=o||r.height,u=u||r.depth;var i=r.target||_;e.bindTexture(i,t);var a,f=r.level||0,l=r.internalFormat||r.format||p,c=J(l),s=r.format||c.format,b=r.src;a=b&&(y(b)||Array.isArray(b)&&"number"==typeof b[0])?r.type||re(e,b,c.type):r.type||c.type;if(i===A)for(var v=0;v<6;++v)e.texImage2D(h+v,f,l,n,o,0,s,a,null);else i===j||i===O?e.texImage3D(i,f,l,n,o,u,0,s,a,null):e.texImage2D(i,f,l,n,o,0,s,a,null)},t.canGenerateMipmap=ee,t.canFilter=te,t.getNumComponentsForFormat=function(e){var t=Y[e];if(!t)throw"unknown format: "+e;return t.u},t.getBytesPerElementForInternalFormat=Z,t.getFormatAndTypeForInternalFormat=J;var o=f(r(2)),u=f(r(1)),i=f(r(0));function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function f(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=a();if(t&&t.has(e))return t.get(e);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(Object.prototype.hasOwnProperty.call(e,u)){var i=o?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(r,u,i):r[u]=e[u]}return r.default=e,t&&t.set(e,r),r}var l,c,s={textureColor:new Uint8Array([128,192,255,255]),textureOptions:{},crossOrigin:void 0},y=u.isArrayBuffer,b=function(){return l=l||("undefined"!=typeof document&&document.createElement?document.createElement("canvas").getContext("2d"):null)},v=6406,m=6407,p=6408,d=6409,x=6410,F=6402,E=34041,w=33071,_=3553,A=34067,j=32879,O=35866,h=34069,S=10241,R=10240,P=10242,T=10243,g=3317,z=5120,C=5121,U=5122,M=5123,k=5124,I=5125,W=5126,B=5131,L=36193,G=33640,X=33319,D=33320,N=6403,H=36244,q=36248,V=36249,Y={},$=Y;function K(e){if(!c){var t={};t[6406]={v:v,F:!0,_:!0,A:[1,2,2,4],type:[C,B,L,W]},t[6409]={v:d,F:!0,_:!0,A:[1,2,2,4],type:[C,B,L,W]},t[6410]={v:x,F:!0,_:!0,A:[2,4,4,8],type:[C,B,L,W]},t[m]={v:m,F:!0,_:!0,A:[3,6,6,12,2],type:[C,B,L,W,33635]},t[p]={v:p,F:!0,_:!0,A:[4,8,8,16,2,2],type:[C,B,L,W,32819,32820]},t[6402]={v:F,F:!0,_:!1,A:[2,4],type:[I,M]},t[33321]={v:N,F:!0,_:!0,A:[1],type:[C]},t[36756]={v:N,F:!1,_:!0,A:[1],type:[z]},t[33325]={v:N,F:!1,_:!0,A:[4,2],type:[W,B]},t[33326]={v:N,F:!1,_:!1,A:[4],type:[W]},t[33330]={v:H,F:!0,_:!1,A:[1],type:[C]},t[33329]={v:H,F:!0,_:!1,A:[1],type:[z]},t[33332]={v:H,F:!0,_:!1,A:[2],type:[M]},t[33331]={v:H,F:!0,_:!1,A:[2],type:[U]},t[33334]={v:H,F:!0,_:!1,A:[4],type:[I]},t[33333]={v:H,F:!0,_:!1,A:[4],type:[k]},t[33323]={v:X,F:!0,_:!0,A:[2],type:[C]},t[36757]={v:X,F:!1,_:!0,A:[2],type:[z]},t[33327]={v:X,F:!1,_:!0,A:[8,4],type:[W,B]},t[33328]={v:X,F:!1,_:!1,A:[8],type:[W]},t[33336]={v:D,F:!0,_:!1,A:[2],type:[C]},t[33335]={v:D,F:!0,_:!1,A:[2],type:[z]},t[33338]={v:D,F:!0,_:!1,A:[4],type:[M]},t[33337]={v:D,F:!0,_:!1,A:[4],type:[U]},t[33340]={v:D,F:!0,_:!1,A:[8],type:[I]},t[33339]={v:D,F:!0,_:!1,A:[8],type:[k]},t[32849]={v:m,F:!0,_:!0,A:[3],type:[C]},t[35905]={v:m,F:!1,_:!0,A:[3],type:[C]},t[36194]={v:m,F:!0,_:!0,A:[3,2],type:[C,33635]},t[36758]={v:m,F:!1,_:!0,A:[3],type:[z]},t[35898]={v:m,F:!1,_:!0,A:[12,6,4],type:[W,B,35899]},t[35901]={v:m,F:!1,_:!0,A:[12,6,4],type:[W,B,35902]},t[34843]={v:m,F:!1,_:!0,A:[12,6],type:[W,B]},t[34837]={v:m,F:!1,_:!1,A:[12],type:[W]},t[36221]={v:q,F:!1,_:!1,A:[3],type:[C]},t[36239]={v:q,F:!1,_:!1,A:[3],type:[z]},t[36215]={v:q,F:!1,_:!1,A:[6],type:[M]},t[36233]={v:q,F:!1,_:!1,A:[6],type:[U]},t[36209]={v:q,F:!1,_:!1,A:[12],type:[I]},t[36227]={v:q,F:!1,_:!1,A:[12],type:[k]},t[32856]={v:p,F:!0,_:!0,A:[4],type:[C]},t[35907]={v:p,F:!0,_:!0,A:[4],type:[C]},t[36759]={v:p,F:!1,_:!0,A:[4],type:[z]},t[32855]={v:p,F:!0,_:!0,A:[4,2,4],type:[C,32820,G]},t[32854]={v:p,F:!0,_:!0,A:[4,2],type:[C,32819]},t[32857]={v:p,F:!0,_:!0,A:[4],type:[G]},t[34842]={v:p,F:!1,_:!0,A:[16,8],type:[W,B]},t[34836]={v:p,F:!1,_:!1,A:[16],type:[W]},t[36220]={v:V,F:!0,_:!1,A:[4],type:[C]},t[36238]={v:V,F:!0,_:!1,A:[4],type:[z]},t[36975]={v:V,F:!0,_:!1,A:[4],type:[G]},t[36214]={v:V,F:!0,_:!1,A:[8],type:[M]},t[36232]={v:V,F:!0,_:!1,A:[8],type:[U]},t[36226]={v:V,F:!0,_:!1,A:[16],type:[k]},t[36208]={v:V,F:!0,_:!1,A:[16],type:[I]},t[33189]={v:F,F:!0,_:!1,A:[2,4],type:[M,I]},t[33190]={v:F,F:!0,_:!1,A:[4],type:[I]},t[36012]={v:F,F:!0,_:!1,A:[4],type:[W]},t[35056]={v:E,F:!0,_:!1,A:[4],type:[34042]},t[36013]={v:E,F:!0,_:!1,A:[4],type:[36269]},Object.keys(t).forEach((function(e){var r=t[e];r.bytesPerElementMap={},r.A.forEach((function(e,t){var n=r.type[t];r.bytesPerElementMap[n]=e}))})),c=t}return c[e]}function Z(e,t){var r=K(e);if(!r)throw"unknown internal format";var n=r.bytesPerElementMap[t];if(void 0===n)throw"unknown internal format";return n}function J(e){var t=K(e);if(!t)throw"unknown internal format";return{format:t.v,type:t.type[0]}}function Q(e){return 0==(e&e-1)}function ee(e,t,r,n){if(!o.isWebGL2(e))return Q(t)&&Q(r);var u=K(n);if(!u)throw"unknown internal format";return u.F&&u._}function te(e){var t=K(e);if(!t)throw"unknown internal format";return t._}function re(e,t,r){return y(t)?u.getGLTypeForTypedArray(t):r||C}function ne(e,t,r,n,o){if(o%1!=0)throw"can't guess dimensions";if(r||n){if(n){if(!r&&(r=o/n)%1)throw"can't guess dimensions"}else if((n=o/r)%1)throw"can't guess dimensions"}else{var u=Math.sqrt(o/(t===A?6:1));u%1==0?(r=u,n=u):(r=o,n=1)}return{width:r,height:n}}function oe(e){s.textureColor=new Uint8Array([255*e[0],255*e[1],255*e[2],255*e[3]])}function ue(e,t){void 0!==t.colorspaceConversion&&e.pixelStorei(37443,t.colorspaceConversion),void 0!==t.premultiplyAlpha&&e.pixelStorei(37441,t.premultiplyAlpha),void 0!==t.flipY&&e.pixelStorei(37440,t.flipY)}function ie(e){e.pixelStorei(g,4),o.isWebGL2(e)&&(e.pixelStorei(3314,0),e.pixelStorei(32878,0),e.pixelStorei(3316,0),e.pixelStorei(3315,0),e.pixelStorei(32877,0))}function ae(e,t,r,n){n.minMag&&(r.call(e,t,S,n.minMag),r.call(e,t,R,n.minMag)),n.min&&r.call(e,t,S,n.min),n.mag&&r.call(e,t,R,n.mag),n.wrap&&(r.call(e,t,P,n.wrap),r.call(e,t,T,n.wrap),(t===j||i.isSampler(e,t))&&r.call(e,t,32882,n.wrap)),n.wrapR&&r.call(e,t,32882,n.wrapR),n.wrapS&&r.call(e,t,P,n.wrapS),n.wrapT&&r.call(e,t,T,n.wrapT),n.minLod&&r.call(e,t,33082,n.minLod),n.maxLod&&r.call(e,t,33083,n.maxLod),n.baseLevel&&r.call(e,t,33084,n.baseLevel),n.maxLevel&&r.call(e,t,33085,n.maxLevel)}function fe(e,t,r){var n=r.target||_;e.bindTexture(n,t),ae(e,n,e.texParameteri,r)}function le(e,t,r){ae(e,t,e.samplerParameteri,r)}function ce(e,t){var r=e.createSampler();return le(e,r,t),r}function se(e,t,r,n,o,u){r=r||s.textureOptions,u=u||p;var i=r.target||_;if(n=n||r.width,o=o||r.height,e.bindTexture(i,t),ee(e,n,o,u))e.generateMipmap(i);else{var a=te(u)?9729:9728;e.texParameteri(i,S,a),e.texParameteri(i,R,a),e.texParameteri(i,P,w),e.texParameteri(i,T,w)}}function ye(e){return!0===e.auto||void 0===e.auto&&void 0===e.level}function be(e,t){return(t=t||{}).cubeFaceOrder||[h,34070,34071,34072,34073,34074]}function ve(e,t){var r=be(0,t).map((function(e,t){return{face:e,ndx:t}}));return r.sort((function(e,t){return e.face-t.face})),r}function me(e,t,r,n){var o=(n=n||s.textureOptions).target||_,u=n.level||0,i=r.width,a=r.height,f=n.internalFormat||n.format||p,l=J(f),c=n.format||l.format,y=n.type||l.type;if(ue(e,n),e.bindTexture(o,t),o===A){var v,m,d=r.width,x=r.height;if(d/6===x)v=x,m=[0,0,1,0,2,0,3,0,4,0,5,0];else if(x/6===d)v=d,m=[0,0,0,1,0,2,0,3,0,4,0,5];else if(d/3==x/2)v=d/3,m=[0,0,1,0,2,0,0,1,1,1,2,1];else{if(d/2!=x/3)throw"can't figure out cube map from element: "+(r.src?r.src:r.nodeName);v=d/2,m=[0,0,1,0,0,1,1,1,0,2,1,2]}var F=b();F?(F.canvas.width=v,F.canvas.height=v,i=v,a=v,ve(0,n).forEach((function(t){var n=m[2*t.ndx+0]*v,o=m[2*t.ndx+1]*v;F.drawImage(r,n,o,v,v,0,0,v,v),e.texImage2D(t.face,u,f,c,y,F.canvas)})),F.canvas.width=1,F.canvas.height=1):"undefined"!=typeof createImageBitmap&&(i=v,a=v,ve(0,n).forEach((function(l){var s=m[2*l.ndx+0]*v,b=m[2*l.ndx+1]*v;e.texImage2D(l.face,u,f,v,v,0,c,y,null),createImageBitmap(r,s,b,v,v,{premultiplyAlpha:"none",colorSpaceConversion:"none"}).then((function(r){ue(e,n),e.bindTexture(o,t),e.texImage2D(l.face,u,f,c,y,r),ye(n)&&se(e,t,n,i,a,f)}))})))}else if(o===j||o===O){var E=Math.min(r.width,r.height),w=Math.max(r.width,r.height),h=w/E;if(h%1!=0)throw"can not compute 3D dimensions of element";var S=r.width===w?1:0,R=r.height===w?1:0;e.pixelStorei(g,1),e.pixelStorei(3314,r.width),e.pixelStorei(32878,0),e.pixelStorei(32877,0),e.texImage3D(o,u,f,E,E,E,0,c,y,null);for(var P=0;P<h;++P){var T=P*E*S,z=P*E*R;e.pixelStorei(3316,T),e.pixelStorei(3315,z),e.texSubImage3D(o,u,0,0,P,E,E,1,c,y,r)}ie(e)}else e.texImage2D(o,u,f,c,y,r);ye(n)&&se(e,t,n,i,a,f),fe(e,t,n)}function pe(){}function de(e,t){return void 0!==t||function(e){if("undefined"!=typeof document){var t=document.createElement("a");return t.href=e,t.hostname===location.hostname&&t.port===location.port&&t.protocol===location.protocol}var r=new URL(location.href).origin;return new URL(e,location.href).origin===r}(e)?t:"anonymous"}function xe(e){return"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap||"undefined"!=typeof ImageData&&e instanceof ImageData||"undefined"!=typeof HTMLElement&&e instanceof HTMLElement}function Fe(e,t,r){return xe(e)?(setTimeout((function(){r(null,e)})),e):function(e,t,r){var n;if(r=r||pe,t=void 0!==t?t:s.crossOrigin,t=de(e,t),"undefined"!=typeof Image){n=new Image,void 0!==t&&(n.crossOrigin=t);var o=function(){n.removeEventListener("error",u),n.removeEventListener("load",a),n=null},u=function(){var t="couldn't load image: "+e;i.error(t),r(t,n),o()},a=function(){r(null,n),o()};return n.addEventListener("error",u),n.addEventListener("load",a),n.src=e,n}if("undefined"!=typeof ImageBitmap){var f,l,c=function(){r(f,l)},y={};t&&(y.mode="cors"),fetch(e,y).then((function(e){if(!e.ok)throw e;return e.blob()})).then((function(e){return createImageBitmap(e,{premultiplyAlpha:"none",colorSpaceConversion:"none"})})).then((function(e){l=e,setTimeout(c)})).catch((function(e){f=e,setTimeout(c)})),n=null}return n}(e,t,r)}function Ee(e,t,r){var n=(r=r||s.textureOptions).target||_;if(e.bindTexture(n,t),!1!==r.color){var o=function(e){return e=e||s.textureColor,y(e)?e:new Uint8Array([255*e[0],255*e[1],255*e[2],255*e[3]])}(r.color);if(n===A)for(var u=0;u<6;++u)e.texImage2D(h+u,0,p,1,1,0,p,C,o);else n===j||n===O?e.texImage3D(n,0,p,1,1,1,0,p,C,o):e.texImage2D(n,0,p,1,1,0,p,C,o)}}function we(e,t,r,n){return n=n||pe,r=r||s.textureOptions,Ee(e,t,r),Fe((r=Object.assign({},r)).src,r.crossOrigin,(function(o,u){o?n(o,t,u):(me(e,t,u,r),n(null,t,u))}))}function _e(e,t,r,n){n=n||pe;var o=r.src;if(6!==o.length)throw"there must be 6 urls for a cubemap";var u=r.level||0,i=r.internalFormat||r.format||p,a=J(i),f=r.format||a.format,l=r.type||C,c=r.target||_;if(c!==A)throw"target must be TEXTURE_CUBE_MAP";Ee(e,t,r),r=Object.assign({},r);var s,y=6,b=[],v=be(0,r);s=o.map((function(o,a){return Fe(o,r.crossOrigin,(m=v[a],function(o,a){--y,o?b.push(o):a.width!==a.height?b.push("cubemap face img is not a square: "+a.src):(ue(e,r),e.bindTexture(c,t),5===y?be().forEach((function(t){e.texImage2D(t,u,i,f,l,a)})):e.texImage2D(m,u,i,f,l,a),ye(r)&&e.generateMipmap(c)),0===y&&n(b.length?b:void 0,t,s)}));var m}))}function Ae(e,t,r,n){n=n||pe;var o=r.src,u=r.internalFormat||r.format||p,i=J(u),a=r.format||i.format,f=r.type||C,l=r.target||O;if(l!==j&&l!==O)throw"target must be TEXTURE_3D or TEXTURE_2D_ARRAY";Ee(e,t,r),r=Object.assign({},r);var c,s=o.length,y=[],v=r.level||0,m=r.width,d=r.height,x=o.length,F=!0;c=o.map((function(o,i){return Fe(o,r.crossOrigin,(p=i,function(o,i){if(--s,o)y.push(o);else{if(ue(e,r),e.bindTexture(l,t),F){F=!1,m=r.width||i.width,d=r.height||i.height,e.texImage3D(l,v,u,m,d,x,0,a,f,null);for(var E=0;E<x;++E)e.texSubImage3D(l,v,0,0,E,m,d,1,a,f,i)}else{var w,_=i;i.width===m&&i.height===d||(_=(w=b()).canvas,w.canvas.width=m,w.canvas.height=d,w.drawImage(i,0,0,m,d)),e.texSubImage3D(l,v,0,0,p,m,d,1,a,f,_),w&&_===w.canvas&&(w.canvas.width=0,w.canvas.height=0)}ye(r)&&e.generateMipmap(l)}0===s&&n(y.length?y:void 0,t,c)}));var p}))}function je(e,t,r,n){var i=(n=n||s.textureOptions).target||_;e.bindTexture(i,t);var a=n.width,f=n.height,l=n.depth,c=n.level||0,b=n.internalFormat||n.format||p,v=J(b),m=n.format||v.format,d=n.type||re(0,r,v.type);if(y(r))r instanceof Uint8ClampedArray&&(r=new Uint8Array(r.buffer));else{var x=u.getTypedArrayTypeForGLType(d);r=new x(r)}var F,E=Z(b,d),w=r.byteLength/E;if(w%1)throw"length wrong size for format: "+o.glEnumToString(e,m);if(i===j||i===O)if(a||f||l)!a||f&&l?!f||a&&l?(F=ne(0,i,a,f,w/l),a=F.width,f=F.height):(F=ne(0,i,a,l,w/f),a=F.width,l=F.height):(F=ne(0,i,f,l,w/a),f=F.width,l=F.height);else{var h=Math.cbrt(w);if(h%1!=0)throw"can't guess cube size of array of numElements: "+w;a=h,f=h,l=h}else F=ne(0,i,a,f,w),a=F.width,f=F.height;if(ie(e),e.pixelStorei(g,n.unpackAlignment||1),ue(e,n),i===A){var S=w/6*(E/r.BYTES_PER_ELEMENT);ve(0,n).forEach((function(t){var n=S*t.ndx,o=r.subarray(n,n+S);e.texImage2D(t.face,c,b,a,f,0,m,d,o)}))}else i===j||i===O?e.texImage3D(i,c,b,a,f,l,0,m,d,r):e.texImage2D(i,c,b,a,f,0,m,d,r);return{width:a,height:f,depth:l,type:d}}function Oe(e,t,r){var n=r.target||_;e.bindTexture(n,t);var o=r.level||0,u=r.internalFormat||r.format||p,i=J(u),a=r.format||i.format,f=r.type||i.type;if(ue(e,r),n===A)for(var l=0;l<6;++l)e.texImage2D(h+l,o,u,r.width,r.height,0,a,f,null);else n===j||n===O?e.texImage3D(n,o,u,r.width,r.height,r.depth,0,a,f,null):e.texImage2D(n,o,u,r.width,r.height,0,a,f,null)}function he(e,t,r){r=r||pe,t=t||s.textureOptions;var n=e.createTexture(),o=t.target||_,u=t.width||1,i=t.height||1,a=t.internalFormat||p;e.bindTexture(o,n),o===A&&(e.texParameteri(o,P,w),e.texParameteri(o,T,w));var f=t.src;if(f)if("function"==typeof f&&(f=f(e,t)),"string"==typeof f)we(e,n,t,r);else if(y(f)||Array.isArray(f)&&("number"==typeof f[0]||Array.isArray(f[0])||y(f[0]))){var l=je(e,n,f,t);u=l.width,i=l.height}else Array.isArray(f)&&("string"==typeof f[0]||xe(f[0]))?o===A?_e(e,n,t,r):Ae(e,n,t,r):(me(e,n,f,t),u=f.width,i=f.height);else Oe(e,n,t);return ye(t)&&se(e,n,t,u,i,a),fe(e,n,t),n}$[6406]={u:1},$[6409]={u:1},$[6410]={u:2},$[m]={u:3},$[p]={u:4},$[N]={u:1},$[36244]={u:1},$[X]={u:2},$[33320]={u:2},$[m]={u:3},$[36248]={u:3},$[p]={u:4},$[36249]={u:4},$[6402]={u:1},$[34041]={u:2}},function(e,t,r){"use strict";t.__esModule=!0;var n=r(6);Object.keys(n).forEach((function(e){"default"!==e&&"__esModule"!==e&&(t[e]=n[e])}))},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}t.__esModule=!0;var o={addExtensionsToContext:!0,getContext:!0,getWebGLContext:!0,resizeCanvasToDisplaySize:!0,setDefaults:!0,attributes:!0,textures:!0,utils:!0,draw:!0,framebuffers:!0,programs:!0,typedarrays:!0,vertexArrays:!0};t.addExtensionsToContext=E,t.getContext=function(e,t){return function(e,t){for(var r=["webgl2","webgl","experimental-webgl"],n=null,o=0;o<r.length;++o)if(n=e.getContext(r[o],t)){p.addExtensionsToContext&&E(n);break}return n}(e,t)},t.getWebGLContext=function(e,t){return function(e,t){for(var r=["webgl","experimental-webgl"],n=null,o=0;o<r.length;++o)if(n=e.getContext(r[o],t)){p.addExtensionsToContext&&E(n);break}return n}(e,t)},t.resizeCanvasToDisplaySize=function(e,t){t=t||1,t=Math.max(0,t);var r=e.clientWidth*t|0,n=e.clientHeight*t|0;if(e.width!==r||e.height!==n)return e.width=r,e.height=n,!0;return!1},t.setDefaults=function(e){a.copyExistingProperties(e,p),u.setAttributeDefaults_(e),i.setTextureDefaults_(e)},t.vertexArrays=t.typedarrays=t.programs=t.framebuffers=t.draw=t.utils=t.textures=t.attributes=void 0;var u=m(r(7));t.attributes=u,Object.keys(u).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(o,e)||(t[e]=u[e]))}));var i=m(r(4));t.textures=i,Object.keys(i).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(o,e)||(t[e]=i[e]))}));var a=m(r(0)),f=m(r(2));t.utils=f,Object.keys(f).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(o,e)||(t[e]=f[e]))}));var l=m(r(8));t.draw=l,Object.keys(l).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(o,e)||(t[e]=l[e]))}));var c=m(r(9));t.framebuffers=c,Object.keys(c).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(o,e)||(t[e]=c[e]))}));var s=m(r(3));t.programs=s,Object.keys(s).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(o,e)||(t[e]=s[e]))}));var y=m(r(1));t.typedarrays=y,Object.keys(y).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(o,e)||(t[e]=y[e]))}));var b=m(r(10));function v(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return v=function(){return e},e}function m(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=v();if(t&&t.has(e))return t.get(e);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(Object.prototype.hasOwnProperty.call(e,u)){var i=o?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(r,u,i):r[u]=e[u]}return r.default=e,t&&t.set(e,r),r}t.vertexArrays=b,Object.keys(b).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(o,e)||(t[e]=b[e]))}));var p={addExtensionsToContext:!0};var d=/^(.*?)_/;function x(e,t){f.glEnumToString(e,0);var r=e.getExtension(t);if(r){var n={},o=d.exec(t)[1],u="_"+o;for(var i in r){var l=r[i],c="function"==typeof l,s=c?o:u,y=i;i.endsWith(s)&&(y=i.substring(0,i.length-s.length)),void 0!==e[y]?c||e[y]===l||a.warn(y,e[y],l,i):c?e[y]=function(e){return function(){return e.apply(r,arguments)}}(l):(e[y]=l,n[y]=l)}n.constructor={name:r.constructor.name},f.glEnumToString(n,0)}return r}var F=["ANGLE_instanced_arrays","EXT_blend_minmax","EXT_color_buffer_float","EXT_color_buffer_half_float","EXT_disjoint_timer_query","EXT_disjoint_timer_query_webgl2","EXT_frag_depth","EXT_sRGB","EXT_shader_texture_lod","EXT_texture_filter_anisotropic","OES_element_index_uint","OES_standard_derivatives","OES_texture_float","OES_texture_float_linear","OES_texture_half_float","OES_texture_half_float_linear","OES_vertex_array_object","WEBGL_color_buffer_float","WEBGL_compressed_texture_atc","WEBGL_compressed_texture_etc1","WEBGL_compressed_texture_pvrtc","WEBGL_compressed_texture_s3tc","WEBGL_compressed_texture_s3tc_srgb","WEBGL_depth_texture","WEBGL_draw_buffers"];function E(e){for(var t=0;t<F.length;++t)x(e,F[t])}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}t.__esModule=!0,t.createAttribsFromArrays=F,t.createBuffersFromArrays=function(e,t){var r={};Object.keys(t).forEach((function(n){r[n]=w(e,t[n],n)})),t.indices?(r.numElements=t.indices.length,r.elementType=o.getGLTypeForTypedArray(x(t.indices),"indices")):r.numElements=function(e){var t,r;for(r=0;r<E.length&&!((t=E[r])in e);++r);r===E.length&&(t=Object.keys(e)[0]);var n=e[t],o=b(n).length,u=d(n,t),i=o/u;if(o%u>0)throw new Error("numComponents ".concat(u," not correct for length ").concat(o));return i}(t);return r},t.createBufferFromArray=w,t.createBufferFromTypedArray=s,t.createBufferInfoFromArrays=function(e,t,r){var n=F(e,t),u=Object.assign({},r||{});u.attribs=Object.assign({},r?r.attribs:{},n);var i=t.indices;if(i){var a=x(i,"indices");u.indices=s(e,a,34963),u.numElements=a.length,u.elementType=o.getGLTypeForTypedArray(a)}else u.numElements||(u.numElements=function(e,t){var r,n;for(n=0;n<E.length&&!((r=E[n])in t)&&!((r=l.attribPrefix+r)in t);++n);n===E.length&&(r=Object.keys(t)[0]);var o=t[r];e.bindBuffer(f,o.buffer);var u=e.getBufferParameter(f,34660);e.bindBuffer(f,null);var i=(y=o.type,5120===y||5121===y?1:5122===y||5123===y?2:5124===y||5125===y||5126===y?4:0),a=u/i,c=o.numComponents||o.size,s=a/c;var y;if(s%1!=0)throw new Error("numComponents ".concat(c," not correct for length ").concat(length));return s}(e,u.attribs));return u},t.setAttribInfoBufferFromArray=function(e,t,r,n){r=x(r),void 0!==n?(e.bindBuffer(f,t.buffer),e.bufferSubData(f,n,r)):c(e,f,t.buffer,r,t.drawType)},t.setAttributePrefix=function(e){l.attribPrefix=e},t.setAttributeDefaults_=function(e){u.copyExistingProperties(e,l)},t.getNumComponents_=d,t.getArray_=b;var o=a(r(1)),u=a(r(0));function i(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return i=function(){return e},e}function a(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=i();if(t&&t.has(e))return t.get(e);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(Object.prototype.hasOwnProperty.call(e,u)){var a=o?Object.getOwnPropertyDescriptor(e,u):null;a&&(a.get||a.set)?Object.defineProperty(r,u,a):r[u]=e[u]}return r.default=e,t&&t.set(e,r),r}var f=34962,l={attribPrefix:""};function c(e,t,r,n,o){e.bindBuffer(t,r),e.bufferData(t,n,o||35044)}function s(e,t,r,n){if(u.isBuffer(e,t))return t;r=r||f;var o=e.createBuffer();return c(e,r,o,t,n),o}function y(e){return"indices"===e}function b(e){return e.length?e:e.data}var v=/coord|texture/i,m=/color|colour/i;function p(e,t){var r;if(t%(r=v.test(e)?2:m.test(e)?4:3)>0)throw new Error("Can not guess numComponents for attribute '".concat(e,"'. Tried ").concat(r," but ").concat(t," values is not evenly divisible by ").concat(r,". You should specify it."));return r}function d(e,t){return e.numComponents||e.size||p(t,b(e).length)}function x(e,t){if(o.isArrayBuffer(e))return e;if(o.isArrayBuffer(e.data))return e.data;Array.isArray(e)&&(e={data:e});var r=e.type;return r||(r=y(t)?Uint16Array:Float32Array),new r(e.data)}function F(e,t){var r={};return Object.keys(t).forEach((function(n){if(!y(n)){var u=t[n],i=u.attrib||u.name||u.attribName||l.attribPrefix+n;if(u.value){if(!Array.isArray(u.value)&&!o.isArrayBuffer(u.value))throw new Error("array.value is not array or typedarray");r[i]={value:u.value}}else{var a,c,b,v;if(u.buffer&&u.buffer instanceof WebGLBuffer)a=u.buffer,v=u.numComponents||u.size,c=u.type,b=u.normalize;else if("number"==typeof u||"number"==typeof u.data){var m=u.data||u,F=u.type||Float32Array,E=m*F.BYTES_PER_ELEMENT;c=o.getGLTypeForTypedArrayType(F),b=void 0!==u.normalize?u.normalize:(_=F)===Int8Array||_===Uint8Array,v=u.numComponents||u.size||p(n,m),a=e.createBuffer(),e.bindBuffer(f,a),e.bufferData(f,E,u.drawType||35044)}else{var w=x(u,n);a=s(e,w,void 0,u.drawType),c=o.getGLTypeForTypedArray(w),b=void 0!==u.normalize?u.normalize:function(e){return e instanceof Int8Array||e instanceof Uint8Array}(w),v=d(u,n)}r[i]={buffer:a,numComponents:v,type:c,normalize:b,stride:u.stride||0,offset:u.offset||0,divisor:void 0===u.divisor?void 0:u.divisor,drawType:u.drawType}}}var _})),e.bindBuffer(f,null),r}var E=["position","positions","a_position"];function w(e,t,r){var n="indices"===r?34963:f;return s(e,x(t,r),n)}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}t.__esModule=!0,t.drawBufferInfo=i,t.drawObjectList=function(e,t){var r=null,n=null;t.forEach((function(t){if(!1!==t.active){var u=t.programInfo,a=t.vertexArrayInfo||t.bufferInfo,f=!1,l=void 0===t.type?4:t.type;u!==r&&(r=u,e.useProgram(u.program),f=!0),(f||a!==n)&&(n&&n.vertexArrayObject&&!a.vertexArrayObject&&e.bindVertexArray(null),n=a,o.setBuffersAndAttributes(e,u,a)),o.setUniforms(u,t.uniforms),i(e,a,l,t.count,t.offset,t.instanceCount)}})),n&&n.vertexArrayObject&&e.bindVertexArray(null)};var o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=u();if(t&&t.has(e))return t.get(e);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var a=o?Object.getOwnPropertyDescriptor(e,i):null;a&&(a.get||a.set)?Object.defineProperty(r,i,a):r[i]=e[i]}r.default=e,t&&t.set(e,r);return r}(r(3));function u(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return u=function(){return e},e}function i(e,t,r,n,o,u){r=void 0===r?4:r;var i=t.indices,a=t.elementType,f=void 0===n?t.numElements:n;o=void 0===o?0:o,a||i?void 0!==u?e.drawElementsInstanced(r,f,void 0===a?5123:t.elementType,o,u):e.drawElements(r,f,void 0===a?5123:t.elementType,o):void 0!==u?e.drawArraysInstanced(r,o,f,u):e.drawArrays(r,o,f)}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}t.__esModule=!0,t.bindFramebufferInfo=function(e,t,r){r=r||36160,t?(e.bindFramebuffer(r,t.framebuffer),e.viewport(0,0,t.width,t.height)):(e.bindFramebuffer(r,null),e.viewport(0,0,e.drawingBufferWidth,e.drawingBufferHeight))},t.createFramebufferInfo=function(e,t,r,n){var i=36160,a=e.createFramebuffer();e.bindFramebuffer(i,a),r=r||e.drawingBufferWidth,n=n||e.drawingBufferHeight;var l=0,c={framebuffer:a,attachments:[],width:r,height:n};return(t=t||v).forEach((function(t){var a=t.attachment,s=t.samples,v=t.format,d=t.attachmentPoint||function(e,t){return m[e]||m[t]}(v,t.internalFormat);if(d||(d=36064+l++),!a)if(void 0!==s||function(e){return p[e]}(v))a=e.createRenderbuffer(),e.bindRenderbuffer(f,a),s>1?e.renderbufferStorageMultisample(f,s,v,r,n):e.renderbufferStorage(f,v,r,n);else{var x=Object.assign({},t);x.width=r,x.height=n,void 0===x.auto&&(x.auto=!1,x.min=x.min||x.minMag||b,x.mag=x.mag||x.minMag||b,x.wrapS=x.wrapS||x.wrap||y,x.wrapT=x.wrapT||x.wrap||y),a=o.createTexture(e,x)}if(u.isRenderbuffer(e,a))e.framebufferRenderbuffer(i,d,f,a);else{if(!u.isTexture(e,a))throw new Error("unknown attachment type");void 0!==t.layer?e.framebufferTextureLayer(i,d,a,t.level||0,t.layer):e.framebufferTexture2D(i,d,t.target||3553,a,t.level||0)}c.attachments.push(a)})),c},t.resizeFramebufferInfo=function(e,t,r,n,i){n=n||e.drawingBufferWidth,i=i||e.drawingBufferHeight,t.width=n,t.height=i,(r=r||v).forEach((function(r,a){var l=t.attachments[a],c=r.format,s=r.samples;if(void 0!==s||u.isRenderbuffer(e,l))e.bindRenderbuffer(f,l),s>1?e.renderbufferStorageMultisample(f,s,c,n,i):e.renderbufferStorage(f,c,n,i);else{if(!u.isTexture(e,l))throw new Error("unknown attachment type");o.resizeTexture(e,l,r,n,i)}}))};var o=a(r(4)),u=a(r(0));function i(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return i=function(){return e},e}function a(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=i();if(t&&t.has(e))return t.get(e);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(Object.prototype.hasOwnProperty.call(e,u)){var a=o?Object.getOwnPropertyDescriptor(e,u):null;a&&(a.get||a.set)?Object.defineProperty(r,u,a):r[u]=e[u]}return r.default=e,t&&t.set(e,r),r}var f=36161,l=34041,c=36096,s=33306,y=33071,b=9729,v=[{format:6408,type:5121,min:b,wrap:y},{format:l}],m={};m[34041]=s,m[6401]=36128,m[36168]=36128,m[6402]=c,m[33189]=c,m[33190]=c,m[36012]=c,m[35056]=s,m[36013]=s;var p={};p[32854]=!0,p[32855]=!0,p[36194]=!0,p[34041]=!0,p[33189]=!0,p[6401]=!0,p[36168]=!0},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}t.__esModule=!0,t.createVertexArrayInfo=function(e,t,r){var n=e.createVertexArray();e.bindVertexArray(n),t.length||(t=[t]);return t.forEach((function(t){o.setBuffersAndAttributes(e,t,r)})),e.bindVertexArray(null),{numElements:r.numElements,elementType:r.elementType,vertexArrayObject:n}},t.createVAOAndSetAttributes=i,t.createVAOFromBufferInfo=function(e,t,r){return i(e,t.attribSetters||t,r.attribs,r.indices)};var o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=u();if(t&&t.has(e))return t.get(e);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var a=o?Object.getOwnPropertyDescriptor(e,i):null;a&&(a.get||a.set)?Object.defineProperty(r,i,a):r[i]=e[i]}r.default=e,t&&t.set(e,r);return r}(r(3));function u(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return u=function(){return e},e}function i(e,t,r,n){var u=e.createVertexArray();return e.bindVertexArray(u),o.setAttributes(t,r),n&&e.bindBuffer(34963,n),e.bindVertexArray(null),u}}])}));

/***/ }),

/***/ "./assets/C64.ts":
/*!***********************!*\
  !*** ./assets/C64.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c64": () => (/* binding */ c64)
/* harmony export */ });
const c64 = {
    'width': 8,
    'height': 8,
    '🭰': { data: [[1, 0], [2, 0], [1, 1], [2, 1], [1, 2], [2, 2], [1, 3], [2, 3], [1, 4], [2, 4], [1, 5], [2, 5], [1, 6], [2, 6], [1, 7], [2, 7]] },
    '🭱': { data: [[2, 0], [3, 0], [2, 1], [3, 1], [2, 2], [3, 2], [2, 3], [3, 3], [2, 4], [3, 4], [2, 5], [3, 5], [2, 6], [3, 6], [2, 7], [3, 7]] },
    '🭴': { data: [[4, 0], [5, 0], [4, 1], [5, 1], [4, 2], [5, 2], [4, 3], [5, 3], [4, 4], [5, 4], [4, 5], [5, 5], [4, 6], [5, 6], [4, 7], [5, 7]] },
    '🭵': { data: [[5, 0], [6, 0], [5, 1], [6, 1], [5, 2], [6, 2], [5, 3], [6, 3], [5, 4], [6, 4], [5, 5], [6, 5], [5, 6], [6, 6], [5, 7], [6, 7]] },
    '🭶': { data: [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2]] },
    '🭷': { data: [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3]] },
    '🭺': { data: [[0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5]] },
    '🭻': { data: [[0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6]] },
    '🭼': { data: [[0, 0], [1, 0], [0, 1], [1, 1], [0, 2], [1, 2], [0, 3], [1, 3], [0, 4], [1, 4], [0, 5], [1, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '🭽': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [0, 3], [1, 3], [0, 4], [1, 4], [0, 5], [1, 5], [0, 6], [1, 6], [0, 7], [1, 7]] },
    '🭾': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [6, 2], [7, 2], [6, 3], [7, 3], [6, 4], [7, 4], [6, 5], [7, 5], [6, 6], [7, 6], [6, 7], [7, 7]] },
    '🭿': { data: [[6, 0], [7, 0], [6, 1], [7, 1], [6, 2], [7, 2], [6, 3], [7, 3], [6, 4], [7, 4], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '🮂': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1]] },
    '🮃': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2]] },
    '🮇': { data: [[6, 0], [7, 0], [6, 1], [7, 1], [6, 2], [7, 2], [6, 3], [7, 3], [6, 4], [7, 4], [6, 5], [7, 5], [6, 6], [7, 6], [6, 7], [7, 7]] },
    '🮈': { data: [[5, 0], [6, 0], [7, 0], [5, 1], [6, 1], [7, 1], [5, 2], [6, 2], [7, 2], [5, 3], [6, 3], [7, 3], [5, 4], [6, 4], [7, 4], [5, 5], [6, 5], [7, 5], [5, 6], [6, 6], [7, 6], [5, 7], [6, 7], [7, 7]] },
    '🮌': { data: [[0, 0], [1, 0], [0, 1], [1, 1], [2, 2], [3, 2], [2, 3], [3, 3], [0, 4], [1, 4], [0, 5], [1, 5], [2, 6], [3, 6], [2, 7], [3, 7]] },
    '🮏': { data: [[0, 4], [1, 4], [4, 4], [5, 4], [0, 5], [1, 5], [4, 5], [5, 5], [2, 6], [3, 6], [6, 6], [7, 6], [2, 7], [3, 7], [6, 7], [7, 7]] },
    '🮐': { data: [[2, 0], [3, 0], [6, 0], [7, 0], [2, 1], [3, 1], [6, 1], [7, 1], [0, 2], [1, 2], [4, 2], [5, 2], [0, 3], [1, 3], [4, 3], [5, 3], [2, 4], [3, 4], [6, 4], [7, 4], [2, 5], [3, 5], [6, 5], [7, 5], [0, 6], [1, 6], [4, 6], [5, 6], [0, 7], [1, 7], [4, 7], [5, 7]] },
    '🮘': { data: [[2, 0], [3, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [1, 2], [4, 2], [5, 2], [1, 3], [2, 3], [5, 3], [6, 3], [2, 4], [3, 4], [6, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [4, 6], [5, 6], [1, 7], [2, 7], [5, 7], [6, 7]] },
    '🮙': { data: [[0, 0], [1, 0], [4, 0], [5, 0], [0, 1], [3, 1], [4, 1], [7, 1], [2, 2], [3, 2], [6, 2], [7, 2], [1, 3], [2, 3], [5, 3], [6, 3], [0, 4], [1, 4], [4, 4], [5, 4], [0, 5], [3, 5], [4, 5], [7, 5], [2, 6], [3, 6], [6, 6], [7, 6], [1, 7], [2, 7], [5, 7], [6, 7]] },
    ' ': { data: [] },
    '•': { data: [[2, 1], [3, 1], [4, 1], [5, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    '!': { data: [[3, 0], [4, 0], [3, 1], [4, 1], [3, 2], [4, 2], [3, 3], [4, 3], [3, 6], [4, 6]] },
    '←': { data: [[3, 1], [2, 2], [3, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [2, 5], [3, 5], [3, 6]] },
    '↑': { data: [[3, 1], [4, 1], [2, 2], [3, 2], [4, 2], [5, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [3, 4], [4, 4], [3, 5], [4, 5], [3, 6], [4, 6], [3, 7], [4, 7]] },
    '"': { data: [[1, 0], [2, 0], [5, 0], [6, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [5, 2], [6, 2]] },
    '#': { data: [[1, 0], [2, 0], [5, 0], [6, 0], [1, 1], [2, 1], [5, 1], [6, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [1, 3], [2, 3], [5, 3], [6, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [1, 5], [2, 5], [5, 5], [6, 5], [1, 6], [2, 6], [5, 6], [6, 6]] },
    '$': { data: [[3, 0], [4, 0], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [1, 2], [2, 2], [2, 3], [3, 3], [4, 3], [5, 3], [5, 4], [6, 4], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [3, 6], [4, 6]] },
    '%': { data: [[1, 0], [2, 0], [6, 0], [1, 1], [2, 1], [5, 1], [6, 1], [4, 2], [5, 2], [3, 3], [4, 3], [2, 4], [3, 4], [1, 5], [2, 5], [5, 5], [6, 5], [1, 6], [5, 6], [6, 6]] },
    '─': { data: [[0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4]] },
    '│': { data: [[3, 0], [4, 0], [3, 1], [4, 1], [3, 2], [4, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [3, 6], [4, 6], [3, 7], [4, 7]] },
    '┌': { data: [[3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [3, 5], [4, 5], [3, 6], [4, 6], [3, 7], [4, 7]] },
    '┐': { data: [[0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [3, 5], [4, 5], [3, 6], [4, 6], [3, 7], [4, 7]] },
    '└': { data: [[3, 0], [4, 0], [3, 1], [4, 1], [3, 2], [4, 2], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4]] },
    '┘': { data: [[3, 0], [4, 0], [3, 1], [4, 1], [3, 2], [4, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4]] },
    '├': { data: [[3, 0], [4, 0], [3, 1], [4, 1], [3, 2], [4, 2], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [3, 5], [4, 5], [3, 6], [4, 6], [3, 7], [4, 7]] },
    '┤': { data: [[3, 0], [4, 0], [3, 1], [4, 1], [3, 2], [4, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [3, 5], [4, 5], [3, 6], [4, 6], [3, 7], [4, 7]] },
    '┬': { data: [[0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [3, 5], [4, 5], [3, 6], [4, 6], [3, 7], [4, 7]] },
    '┴': { data: [[3, 0], [4, 0], [3, 1], [4, 1], [3, 2], [4, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4]] },
    '┼': { data: [[3, 0], [4, 0], [3, 1], [4, 1], [3, 2], [4, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [3, 5], [4, 5], [3, 6], [4, 6], [3, 7], [4, 7]] },
    '╭': { data: [[5, 3], [6, 3], [7, 3], [4, 4], [5, 4], [6, 4], [7, 4], [3, 5], [4, 5], [5, 5], [3, 6], [4, 6], [3, 7], [4, 7]] },
    '╮': { data: [[0, 3], [1, 3], [2, 3], [0, 4], [1, 4], [2, 4], [3, 4], [2, 5], [3, 5], [4, 5], [3, 6], [4, 6], [3, 7], [4, 7]] },
    '╯': { data: [[3, 0], [4, 0], [3, 1], [4, 1], [2, 2], [3, 2], [4, 2], [0, 3], [1, 3], [2, 3], [3, 3], [0, 4], [1, 4], [2, 4]] },
    '╰': { data: [[3, 0], [4, 0], [3, 1], [4, 1], [3, 2], [4, 2], [5, 2], [4, 3], [5, 3], [6, 3], [7, 3], [5, 4], [6, 4], [7, 4]] },
    '╱': { data: [[6, 0], [7, 0], [5, 1], [6, 1], [7, 1], [4, 2], [5, 2], [6, 2], [3, 3], [4, 3], [5, 3], [2, 4], [3, 4], [4, 4], [1, 5], [2, 5], [3, 5], [0, 6], [1, 6], [2, 6], [0, 7], [1, 7]] },
    '╲': { data: [[0, 0], [1, 0], [0, 1], [1, 1], [2, 1], [1, 2], [2, 2], [3, 2], [2, 3], [3, 3], [4, 3], [3, 4], [4, 4], [5, 4], [4, 5], [5, 5], [6, 5], [5, 6], [6, 6], [7, 6], [6, 7], [7, 7]] },
    '╳': { data: [[0, 0], [1, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [2, 3], [3, 3], [4, 3], [5, 3], [2, 4], [3, 4], [4, 4], [5, 4], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [6, 7], [7, 7]] },
    '▁': { data: [[0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '▂': { data: [[0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '▃': { data: [[0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '▄': { data: [[0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '▌': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [0, 1], [1, 1], [2, 1], [3, 1], [0, 2], [1, 2], [2, 2], [3, 2], [0, 3], [1, 3], [2, 3], [3, 3], [0, 4], [1, 4], [2, 4], [3, 4], [0, 5], [1, 5], [2, 5], [3, 5], [0, 6], [1, 6], [2, 6], [3, 6], [0, 7], [1, 7], [2, 7], [3, 7]] },
    '▍': { data: [[0, 0], [1, 0], [2, 0], [0, 1], [1, 1], [2, 1], [0, 2], [1, 2], [2, 2], [0, 3], [1, 3], [2, 3], [0, 4], [1, 4], [2, 4], [0, 5], [1, 5], [2, 5], [0, 6], [1, 6], [2, 6], [0, 7], [1, 7], [2, 7]] },
    '▎': { data: [[0, 0], [1, 0], [0, 1], [1, 1], [0, 2], [1, 2], [0, 3], [1, 3], [0, 4], [1, 4], [0, 5], [1, 5], [0, 6], [1, 6], [0, 7], [1, 7]] },
    '▒': { data: [[0, 0], [1, 0], [4, 0], [5, 0], [0, 1], [1, 1], [4, 1], [5, 1], [2, 2], [3, 2], [6, 2], [7, 2], [2, 3], [3, 3], [6, 3], [7, 3], [0, 4], [1, 4], [4, 4], [5, 4], [0, 5], [1, 5], [4, 5], [5, 5], [2, 6], [3, 6], [6, 6], [7, 6], [2, 7], [3, 7], [6, 7], [7, 7]] },
    '▔': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0]] },
    '▖': { data: [[0, 4], [1, 4], [2, 4], [3, 4], [0, 5], [1, 5], [2, 5], [3, 5], [0, 6], [1, 6], [2, 6], [3, 6], [0, 7], [1, 7], [2, 7], [3, 7]] },
    '▗': { data: [[4, 4], [5, 4], [6, 4], [7, 4], [4, 5], [5, 5], [6, 5], [7, 5], [4, 6], [5, 6], [6, 6], [7, 6], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '▘': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [0, 1], [1, 1], [2, 1], [3, 1], [0, 2], [1, 2], [2, 2], [3, 2], [0, 3], [1, 3], [2, 3], [3, 3]] },
    '▚': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [0, 1], [1, 1], [2, 1], [3, 1], [0, 2], [1, 2], [2, 2], [3, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 4], [5, 4], [6, 4], [7, 4], [4, 5], [5, 5], [6, 5], [7, 5], [4, 6], [5, 6], [6, 6], [7, 6], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '▝': { data: [[4, 0], [5, 0], [6, 0], [7, 0], [4, 1], [5, 1], [6, 1], [7, 1], [4, 2], [5, 2], [6, 2], [7, 2], [4, 3], [5, 3], [6, 3], [7, 3]] },
    '○': { data: [[2, 1], [3, 1], [4, 1], [5, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [1, 3], [2, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    '◤': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [0, 4], [1, 4], [2, 4], [3, 4], [0, 5], [1, 5], [2, 5], [0, 6], [1, 6], [0, 7]] },
    '◥': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [4, 4], [5, 4], [6, 4], [7, 4], [5, 5], [6, 5], [7, 5], [6, 6], [7, 6], [7, 7]] },
    '&': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [2, 2], [3, 2], [4, 2], [5, 2], [2, 3], [3, 3], [4, 3], [1, 4], [2, 4], [5, 4], [6, 4], [7, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6]] },
    '♠': { data: [[4, 0], [3, 1], [4, 1], [5, 1], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [3, 5], [4, 5], [5, 5], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    '♣': { data: [[3, 0], [4, 0], [3, 1], [4, 1], [1, 2], [2, 2], [5, 2], [6, 2], [1, 3], [2, 3], [5, 3], [6, 3], [3, 4], [4, 4], [3, 5], [4, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    '♥': { data: [[2, 0], [3, 0], [5, 0], [6, 0], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [3, 5], [4, 5], [5, 5], [4, 6]] },
    '♦': { data: [[4, 0], [3, 1], [4, 1], [5, 1], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [3, 5], [4, 5], [5, 5], [4, 6]] },
    '\'': { data: [[5, 0], [6, 0], [4, 1], [5, 1], [3, 2], [4, 2]] },
    '✓': { data: [[7, 0], [6, 1], [7, 1], [5, 2], [6, 2], [1, 3], [2, 3], [4, 3], [5, 3], [1, 4], [2, 4], [3, 4], [4, 4], [1, 5], [2, 5], [3, 5], [1, 6], [2, 6]] },
    '(': { data: [[4, 0], [5, 0], [3, 1], [4, 1], [2, 2], [3, 2], [2, 3], [3, 3], [2, 4], [3, 4], [3, 5], [4, 5], [4, 6], [5, 6]] },
    ')': { data: [[2, 0], [3, 0], [3, 1], [4, 1], [4, 2], [5, 2], [4, 3], [5, 3], [4, 4], [5, 4], [3, 5], [4, 5], [2, 6], [3, 6]] },
    '*': { data: [[1, 1], [2, 1], [5, 1], [6, 1], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [2, 4], [3, 4], [4, 4], [5, 4], [1, 5], [2, 5], [5, 5], [6, 5]] },
    '+': { data: [[3, 1], [4, 1], [3, 2], [4, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [3, 4], [4, 4], [3, 5], [4, 5]] },
    ',': { data: [[3, 5], [4, 5], [3, 6], [4, 6], [2, 7], [3, 7]] },
    '-': { data: [[1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3]] },
    '.': { data: [[3, 5], [4, 5], [3, 6], [4, 6]] },
    '/': { data: [[6, 1], [7, 1], [5, 2], [6, 2], [4, 3], [5, 3], [3, 4], [4, 4], [2, 5], [3, 5], [1, 6], [2, 6]] },
    '0': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [4, 2], [5, 2], [6, 2], [1, 3], [2, 3], [3, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    '1': { data: [[3, 0], [4, 0], [3, 1], [4, 1], [2, 2], [3, 2], [4, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    '2': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [5, 2], [6, 2], [4, 3], [5, 3], [2, 4], [3, 4], [1, 5], [2, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    '3': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [5, 2], [6, 2], [3, 3], [4, 3], [5, 3], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    '4': { data: [[5, 0], [6, 0], [4, 1], [5, 1], [6, 1], [3, 2], [4, 2], [5, 2], [6, 2], [1, 3], [2, 3], [5, 3], [6, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [5, 5], [6, 5], [5, 6], [6, 6]] },
    '5': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [1, 1], [2, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [5, 3], [6, 3], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    '6': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    '7': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [1, 1], [2, 1], [5, 1], [6, 1], [4, 2], [5, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [3, 6], [4, 6]] },
    '8': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [5, 2], [6, 2], [2, 3], [3, 3], [4, 3], [5, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    '9': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [5, 2], [6, 2], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    ':': { data: [[3, 2], [4, 2], [3, 5], [4, 5]] },
    ';': { data: [[3, 2], [4, 2], [3, 5], [4, 5], [3, 6], [4, 6], [2, 7], [3, 7]] },
    '<': { data: [[4, 0], [5, 0], [6, 0], [3, 1], [4, 1], [2, 2], [3, 2], [1, 3], [2, 3], [2, 4], [3, 4], [3, 5], [4, 5], [4, 6], [5, 6], [6, 6]] },
    'π': { data: [[6, 2], [7, 2], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [1, 4], [2, 4], [3, 4], [5, 4], [6, 4], [2, 5], [3, 5], [5, 5], [6, 5], [2, 6], [3, 6], [5, 6], [6, 6]] },
    '=': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4]] },
    '>': { data: [[1, 0], [2, 0], [3, 0], [3, 1], [4, 1], [4, 2], [5, 2], [5, 3], [6, 3], [4, 4], [5, 4], [3, 5], [4, 5], [1, 6], [2, 6], [3, 6]] },
    '?': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [5, 2], [6, 2], [4, 3], [5, 3], [3, 4], [4, 4], [3, 6], [4, 6]] },
    '@': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [4, 2], [5, 2], [6, 2], [1, 3], [2, 3], [4, 3], [5, 3], [6, 3], [1, 4], [2, 4], [1, 5], [2, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'A': { data: [[3, 0], [4, 0], [2, 1], [3, 1], [4, 1], [5, 1], [1, 2], [2, 2], [5, 2], [6, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [1, 6], [2, 6], [5, 6], [6, 6]] },
    'B': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [5, 2], [6, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'C': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [1, 3], [2, 3], [1, 4], [2, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'D': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [1, 1], [2, 1], [4, 1], [5, 1], [1, 2], [2, 2], [5, 2], [6, 2], [1, 3], [2, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [4, 5], [5, 5], [1, 6], [2, 6], [3, 6], [4, 6]] },
    'E': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [1, 1], [2, 1], [1, 2], [2, 2], [1, 3], [2, 3], [3, 3], [4, 3], [1, 4], [2, 4], [1, 5], [2, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'F': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [1, 1], [2, 1], [1, 2], [2, 2], [1, 3], [2, 3], [3, 3], [4, 3], [1, 4], [2, 4], [1, 5], [2, 5], [1, 6], [2, 6]] },
    'G': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [1, 3], [2, 3], [4, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'H': { data: [[1, 0], [2, 0], [5, 0], [6, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [5, 2], [6, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [1, 6], [2, 6], [5, 6], [6, 6]] },
    'I': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [3, 1], [4, 1], [3, 2], [4, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'J': { data: [[3, 0], [4, 0], [5, 0], [6, 0], [4, 1], [5, 1], [4, 2], [5, 2], [4, 3], [5, 3], [4, 4], [5, 4], [1, 5], [2, 5], [4, 5], [5, 5], [2, 6], [3, 6], [4, 6]] },
    'K': { data: [[1, 0], [2, 0], [5, 0], [6, 0], [1, 1], [2, 1], [4, 1], [5, 1], [1, 2], [2, 2], [3, 2], [4, 2], [1, 3], [2, 3], [3, 3], [1, 4], [2, 4], [3, 4], [4, 4], [1, 5], [2, 5], [4, 5], [5, 5], [1, 6], [2, 6], [5, 6], [6, 6]] },
    'L': { data: [[1, 0], [2, 0], [1, 1], [2, 1], [1, 2], [2, 2], [1, 3], [2, 3], [1, 4], [2, 4], [1, 5], [2, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'M': { data: [[1, 0], [2, 0], [6, 0], [7, 0], [1, 1], [2, 1], [3, 1], [5, 1], [6, 1], [7, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [1, 3], [2, 3], [4, 3], [6, 3], [7, 3], [1, 4], [2, 4], [6, 4], [7, 4], [1, 5], [2, 5], [6, 5], [7, 5], [1, 6], [2, 6], [6, 6], [7, 6]] },
    'N': { data: [[1, 0], [2, 0], [5, 0], [6, 0], [1, 1], [2, 1], [3, 1], [5, 1], [6, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [1, 4], [2, 4], [4, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [1, 6], [2, 6], [5, 6], [6, 6]] },
    'O': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [5, 2], [6, 2], [1, 3], [2, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'P': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [5, 2], [6, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [1, 4], [2, 4], [1, 5], [2, 5], [1, 6], [2, 6]] },
    'Q': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [5, 2], [6, 2], [1, 3], [2, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [2, 5], [3, 5], [4, 5], [5, 5], [4, 6], [5, 6], [6, 6]] },
    'R': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [5, 2], [6, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [1, 4], [2, 4], [3, 4], [4, 4], [1, 5], [2, 5], [4, 5], [5, 5], [1, 6], [2, 6], [5, 6], [6, 6]] },
    'S': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [2, 3], [3, 3], [4, 3], [5, 3], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'T': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [3, 1], [4, 1], [3, 2], [4, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [3, 6], [4, 6]] },
    'U': { data: [[1, 0], [2, 0], [5, 0], [6, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [5, 2], [6, 2], [1, 3], [2, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'V': { data: [[1, 0], [2, 0], [5, 0], [6, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [5, 2], [6, 2], [1, 3], [2, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [2, 5], [3, 5], [4, 5], [5, 5], [3, 6], [4, 6]] },
    'W': { data: [[1, 0], [2, 0], [6, 0], [7, 0], [1, 1], [2, 1], [6, 1], [7, 1], [1, 2], [2, 2], [6, 2], [7, 2], [1, 3], [2, 3], [4, 3], [6, 3], [7, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [1, 5], [2, 5], [3, 5], [5, 5], [6, 5], [7, 5], [1, 6], [2, 6], [6, 6], [7, 6]] },
    'X': { data: [[1, 0], [2, 0], [5, 0], [6, 0], [1, 1], [2, 1], [5, 1], [6, 1], [2, 2], [3, 2], [4, 2], [5, 2], [3, 3], [4, 3], [2, 4], [3, 4], [4, 4], [5, 4], [1, 5], [2, 5], [5, 5], [6, 5], [1, 6], [2, 6], [5, 6], [6, 6]] },
    'Y': { data: [[1, 0], [2, 0], [5, 0], [6, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [5, 2], [6, 2], [2, 3], [3, 3], [4, 3], [5, 3], [3, 4], [4, 4], [3, 5], [4, 5], [3, 6], [4, 6]] },
    'Z': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [5, 1], [6, 1], [4, 2], [5, 2], [3, 3], [4, 3], [2, 4], [3, 4], [1, 5], [2, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    '[': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [2, 1], [3, 1], [2, 2], [3, 2], [2, 3], [3, 3], [2, 4], [3, 4], [2, 5], [3, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    ']': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [4, 1], [5, 1], [4, 2], [5, 2], [4, 3], [5, 3], [4, 4], [5, 4], [4, 5], [5, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'a': { data: [[2, 2], [3, 2], [4, 2], [5, 2], [5, 3], [6, 3], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'b': { data: [[1, 1], [2, 1], [1, 2], [2, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'c': { data: [[2, 2], [3, 2], [4, 2], [5, 2], [1, 3], [2, 3], [1, 4], [2, 4], [1, 5], [2, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'd': { data: [[5, 1], [6, 1], [5, 2], [6, 2], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'e': { data: [[2, 2], [3, 2], [4, 2], [5, 2], [1, 3], [2, 3], [5, 3], [6, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [1, 5], [2, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'f': { data: [[4, 1], [5, 1], [6, 1], [3, 2], [4, 2], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [3, 4], [4, 4], [3, 5], [4, 5], [3, 6], [4, 6]] },
    'g': { data: [[2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [1, 3], [2, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [5, 6], [6, 6], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7]] },
    'h': { data: [[1, 1], [2, 1], [1, 2], [2, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [1, 6], [2, 6], [5, 6], [6, 6]] },
    'i': { data: [[3, 1], [4, 1], [2, 3], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'j': { data: [[5, 1], [6, 1], [5, 3], [6, 3], [5, 4], [6, 4], [5, 5], [6, 5], [5, 6], [6, 6], [2, 7], [3, 7], [4, 7], [5, 7]] },
    'k': { data: [[1, 1], [2, 1], [1, 2], [2, 2], [1, 3], [2, 3], [4, 3], [5, 3], [1, 4], [2, 4], [3, 4], [4, 4], [1, 5], [2, 5], [4, 5], [5, 5], [1, 6], [2, 6], [5, 6], [6, 6]] },
    'l': { data: [[2, 1], [3, 1], [4, 1], [3, 2], [4, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'm': { data: [[1, 2], [2, 2], [5, 2], [6, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [1, 5], [2, 5], [4, 5], [6, 5], [7, 5], [1, 6], [2, 6], [6, 6], [7, 6]] },
    'n': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [1, 3], [2, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [1, 6], [2, 6], [5, 6], [6, 6]] },
    'o': { data: [[2, 2], [3, 2], [4, 2], [5, 2], [1, 3], [2, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'p': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [1, 3], [2, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [1, 6], [2, 6], [1, 7], [2, 7]] },
    'q': { data: [[2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [1, 3], [2, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [5, 6], [6, 6], [5, 7], [6, 7]] },
    'r': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [1, 3], [2, 3], [5, 3], [6, 3], [1, 4], [2, 4], [1, 5], [2, 5], [1, 6], [2, 6]] },
    's': { data: [[2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [1, 3], [2, 3], [2, 4], [3, 4], [4, 4], [5, 4], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    't': { data: [[3, 1], [4, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [4, 6], [5, 6], [6, 6]] },
    'u': { data: [[1, 2], [2, 2], [5, 2], [6, 2], [1, 3], [2, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'v': { data: [[1, 2], [2, 2], [5, 2], [6, 2], [1, 3], [2, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [2, 5], [3, 5], [4, 5], [5, 5], [3, 6], [4, 6]] },
    'w': { data: [[1, 2], [2, 2], [6, 2], [7, 2], [1, 3], [2, 3], [4, 3], [6, 3], [7, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [2, 6], [3, 6], [5, 6], [6, 6]] },
    'x': { data: [[1, 2], [2, 2], [5, 2], [6, 2], [2, 3], [3, 3], [4, 3], [5, 3], [3, 4], [4, 4], [2, 5], [3, 5], [4, 5], [5, 5], [1, 6], [2, 6], [5, 6], [6, 6]] },
    'y': { data: [[1, 2], [2, 2], [5, 2], [6, 2], [1, 3], [2, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [4, 6], [5, 6], [1, 7], [2, 7], [3, 7], [4, 7]] },
    'z': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [4, 3], [5, 3], [3, 4], [4, 4], [2, 5], [3, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    '£': { data: [[4, 0], [5, 0], [3, 1], [6, 1], [2, 2], [3, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [2, 4], [3, 4], [1, 5], [2, 5], [6, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] }
};


/***/ }),

/***/ "./assets/C64Inverse.ts":
/*!******************************!*\
  !*** ./assets/C64Inverse.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c64Inverse": () => (/* binding */ c64Inverse)
/* harmony export */ });
const c64Inverse = {
    'width': 8,
    'height': 8,
    '🭰': { data: [[0, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '🭱': { data: [[0, 0], [1, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '🭴': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [6, 7], [7, 7]] },
    '🭵': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [7, 7]] },
    '🭶': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '🭷': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '🭺': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '🭻': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '🭼': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5]] },
    '🭽': { data: [[2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '🭾': { data: [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7]] },
    '🭿': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5]] },
    '🮂': { data: [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '🮃': { data: [[0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '🮇': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7]] },
    '🮈': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7]] },
    '🮌': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [4, 3], [5, 3], [6, 3], [7, 3], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '🮏': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [2, 4], [3, 4], [6, 4], [7, 4], [2, 5], [3, 5], [6, 5], [7, 5], [0, 6], [1, 6], [4, 6], [5, 6], [0, 7], [1, 7], [4, 7], [5, 7]] },
    '🮐': { data: [[0, 0], [1, 0], [4, 0], [5, 0], [0, 1], [1, 1], [4, 1], [5, 1], [2, 2], [3, 2], [6, 2], [7, 2], [2, 3], [3, 3], [6, 3], [7, 3], [0, 4], [1, 4], [4, 4], [5, 4], [0, 5], [1, 5], [4, 5], [5, 5], [2, 6], [3, 6], [6, 6], [7, 6], [2, 7], [3, 7], [6, 7], [7, 7]] },
    '🮘': { data: [[0, 0], [1, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [2, 2], [3, 2], [6, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [1, 4], [4, 4], [5, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [6, 6], [7, 6], [0, 7], [3, 7], [4, 7], [7, 7]] },
    '🮙': { data: [[2, 0], [3, 0], [6, 0], [7, 0], [1, 1], [2, 1], [5, 1], [6, 1], [0, 2], [1, 2], [4, 2], [5, 2], [0, 3], [3, 3], [4, 3], [7, 3], [2, 4], [3, 4], [6, 4], [7, 4], [1, 5], [2, 5], [5, 5], [6, 5], [0, 6], [1, 6], [4, 6], [5, 6], [0, 7], [3, 7], [4, 7], [7, 7]] },
    ' ': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '•': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [6, 1], [7, 1], [0, 2], [7, 2], [0, 3], [7, 3], [0, 4], [7, 4], [0, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '!': { data: [[0, 0], [1, 0], [2, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '←': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [0, 4], [0, 5], [1, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '↑': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [6, 2], [7, 2], [0, 3], [7, 3], [0, 4], [1, 4], [2, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [5, 7], [6, 7], [7, 7]] },
    '"': { data: [[0, 0], [3, 0], [4, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '#': { data: [[0, 0], [3, 0], [4, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 3], [3, 3], [4, 3], [7, 3], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [3, 6], [4, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '$': { data: [[0, 0], [1, 0], [2, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [7, 1], [0, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [7, 4], [0, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '%': { data: [[0, 0], [3, 0], [4, 0], [5, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [2, 6], [3, 6], [4, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '─': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '│': { data: [[0, 0], [1, 0], [2, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [5, 7], [6, 7], [7, 7]] },
    '┌': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [0, 4], [1, 4], [2, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [5, 7], [6, 7], [7, 7]] },
    '┐': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [5, 3], [6, 3], [7, 3], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [5, 7], [6, 7], [7, 7]] },
    '└': { data: [[0, 0], [1, 0], [2, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [0, 4], [1, 4], [2, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '┘': { data: [[0, 0], [1, 0], [2, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [5, 2], [6, 2], [7, 2], [5, 3], [6, 3], [7, 3], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '├': { data: [[0, 0], [1, 0], [2, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [0, 4], [1, 4], [2, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [5, 7], [6, 7], [7, 7]] },
    '┤': { data: [[0, 0], [1, 0], [2, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [5, 2], [6, 2], [7, 2], [5, 3], [6, 3], [7, 3], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [5, 7], [6, 7], [7, 7]] },
    '┬': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [5, 7], [6, 7], [7, 7]] },
    '┴': { data: [[0, 0], [1, 0], [2, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [5, 2], [6, 2], [7, 2], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '┼': { data: [[0, 0], [1, 0], [2, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [5, 2], [6, 2], [7, 2], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [5, 7], [6, 7], [7, 7]] },
    '╭': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [0, 4], [1, 4], [2, 4], [3, 4], [0, 5], [1, 5], [2, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [5, 7], [6, 7], [7, 7]] },
    '╮': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [5, 7], [6, 7], [7, 7]] },
    '╯': { data: [[0, 0], [1, 0], [2, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [5, 2], [6, 2], [7, 2], [4, 3], [5, 3], [6, 3], [7, 3], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '╰': { data: [[0, 0], [1, 0], [2, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '╱': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [0, 2], [1, 2], [2, 2], [3, 2], [7, 2], [0, 3], [1, 3], [2, 3], [6, 3], [7, 3], [0, 4], [1, 4], [5, 4], [6, 4], [7, 4], [0, 5], [4, 5], [5, 5], [6, 5], [7, 5], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '╲': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7]] },
    '╳': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [3, 1], [4, 1], [0, 2], [7, 2], [0, 3], [1, 3], [6, 3], [7, 3], [0, 4], [1, 4], [6, 4], [7, 4], [0, 5], [7, 5], [3, 6], [4, 6], [2, 7], [3, 7], [4, 7], [5, 7]] },
    '▁': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6]] },
    '▂': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5]] },
    '▃': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4]] },
    '▄': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3]] },
    '▌': { data: [[4, 0], [5, 0], [6, 0], [7, 0], [4, 1], [5, 1], [6, 1], [7, 1], [4, 2], [5, 2], [6, 2], [7, 2], [4, 3], [5, 3], [6, 3], [7, 3], [4, 4], [5, 4], [6, 4], [7, 4], [4, 5], [5, 5], [6, 5], [7, 5], [4, 6], [5, 6], [6, 6], [7, 6], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '▍': { data: [[3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '▎': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '▒': { data: [[2, 0], [3, 0], [6, 0], [7, 0], [2, 1], [3, 1], [6, 1], [7, 1], [0, 2], [1, 2], [4, 2], [5, 2], [0, 3], [1, 3], [4, 3], [5, 3], [2, 4], [3, 4], [6, 4], [7, 4], [2, 5], [3, 5], [6, 5], [7, 5], [0, 6], [1, 6], [4, 6], [5, 6], [0, 7], [1, 7], [4, 7], [5, 7]] },
    '▔': { data: [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '▖': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [4, 4], [5, 4], [6, 4], [7, 4], [4, 5], [5, 5], [6, 5], [7, 5], [4, 6], [5, 6], [6, 6], [7, 6], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '▗': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [0, 5], [1, 5], [2, 5], [3, 5], [0, 6], [1, 6], [2, 6], [3, 6], [0, 7], [1, 7], [2, 7], [3, 7]] },
    '▘': { data: [[4, 0], [5, 0], [6, 0], [7, 0], [4, 1], [5, 1], [6, 1], [7, 1], [4, 2], [5, 2], [6, 2], [7, 2], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '▚': { data: [[4, 0], [5, 0], [6, 0], [7, 0], [4, 1], [5, 1], [6, 1], [7, 1], [4, 2], [5, 2], [6, 2], [7, 2], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [0, 5], [1, 5], [2, 5], [3, 5], [0, 6], [1, 6], [2, 6], [3, 6], [0, 7], [1, 7], [2, 7], [3, 7]] },
    '▝': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [0, 1], [1, 1], [2, 1], [3, 1], [0, 2], [1, 2], [2, 2], [3, 2], [0, 3], [1, 3], [2, 3], [3, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '○': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [6, 1], [7, 1], [0, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '◤': { data: [[7, 1], [6, 2], [7, 2], [5, 3], [6, 3], [7, 3], [4, 4], [5, 4], [6, 4], [7, 4], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '◥': { data: [[0, 1], [0, 2], [1, 2], [0, 3], [1, 3], [2, 3], [0, 4], [1, 4], [2, 4], [3, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7]] },
    '&': { data: [[0, 0], [1, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [1, 2], [6, 2], [7, 2], [0, 3], [1, 3], [5, 3], [6, 3], [7, 3], [0, 4], [3, 4], [4, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '♠': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [6, 1], [7, 1], [0, 2], [1, 2], [7, 2], [0, 3], [0, 4], [0, 5], [1, 5], [2, 5], [6, 5], [7, 5], [0, 6], [1, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '♣': { data: [[0, 0], [1, 0], [2, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [1, 4], [2, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '♥': { data: [[0, 0], [1, 0], [4, 0], [7, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 4], [7, 4], [0, 5], [1, 5], [2, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '♦': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [6, 1], [7, 1], [0, 2], [1, 2], [7, 2], [0, 3], [0, 4], [1, 4], [7, 4], [0, 5], [1, 5], [2, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '\'': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '✓': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [7, 2], [0, 3], [3, 3], [6, 3], [7, 3], [0, 4], [5, 4], [6, 4], [7, 4], [0, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '(': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    ')': { data: [[0, 0], [1, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '*': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [1, 2], [6, 2], [7, 2], [0, 4], [1, 4], [6, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '+': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [5, 2], [6, 2], [7, 2], [0, 3], [7, 3], [0, 4], [1, 4], [2, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    ',': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '-': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '.': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '/': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '0': { data: [[0, 0], [1, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [3, 2], [7, 2], [0, 3], [4, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '1': { data: [[0, 0], [1, 0], [2, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '2': { data: [[0, 0], [1, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [6, 3], [7, 3], [0, 4], [1, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '3': { data: [[0, 0], [1, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [7, 2], [0, 3], [1, 3], [2, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '4': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [7, 1], [0, 2], [1, 2], [2, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '5': { data: [[0, 0], [7, 0], [0, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '6': { data: [[0, 0], [1, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [6, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '7': { data: [[0, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '8': { data: [[0, 0], [1, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [1, 3], [6, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '9': { data: [[0, 0], [1, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [1, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    ':': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    ';': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '<': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'π': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [7, 3], [0, 4], [4, 4], [7, 4], [0, 5], [1, 5], [4, 5], [7, 5], [0, 6], [1, 6], [4, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '=': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '>': { data: [[0, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '?': { data: [[0, 0], [1, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '@': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [4, 2], [5, 2], [6, 2], [1, 3], [2, 3], [4, 3], [5, 3], [6, 3], [1, 4], [2, 4], [1, 5], [2, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'A': { data: [[0, 0], [1, 0], [2, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [6, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [3, 6], [4, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'B': { data: [[0, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [6, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'C': { data: [[0, 0], [1, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'D': { data: [[0, 0], [5, 0], [6, 0], [7, 0], [0, 1], [3, 1], [6, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [6, 5], [7, 5], [0, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'E': { data: [[0, 0], [7, 0], [0, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [5, 3], [6, 3], [7, 3], [0, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'F': { data: [[0, 0], [7, 0], [0, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [5, 3], [6, 3], [7, 3], [0, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'G': { data: [[0, 0], [1, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [3, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'H': { data: [[0, 0], [3, 0], [4, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [3, 6], [4, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'I': { data: [[0, 0], [1, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'J': { data: [[0, 0], [1, 0], [2, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [6, 4], [7, 4], [0, 5], [3, 5], [6, 5], [7, 5], [0, 6], [1, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'K': { data: [[0, 0], [3, 0], [4, 0], [7, 0], [0, 1], [3, 1], [6, 1], [7, 1], [0, 2], [5, 2], [6, 2], [7, 2], [0, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [5, 4], [6, 4], [7, 4], [0, 5], [3, 5], [6, 5], [7, 5], [0, 6], [3, 6], [4, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'L': { data: [[0, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'M': { data: [[0, 0], [3, 0], [4, 0], [5, 0], [0, 1], [4, 1], [0, 2], [0, 3], [3, 3], [5, 3], [0, 4], [3, 4], [4, 4], [5, 4], [0, 5], [3, 5], [4, 5], [5, 5], [0, 6], [3, 6], [4, 6], [5, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'N': { data: [[0, 0], [3, 0], [4, 0], [7, 0], [0, 1], [4, 1], [7, 1], [0, 2], [7, 2], [0, 3], [7, 3], [0, 4], [3, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [3, 6], [4, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'O': { data: [[0, 0], [1, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'P': { data: [[0, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [6, 3], [7, 3], [0, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'Q': { data: [[0, 0], [1, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [1, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'R': { data: [[0, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [6, 3], [7, 3], [0, 4], [5, 4], [6, 4], [7, 4], [0, 5], [3, 5], [6, 5], [7, 5], [0, 6], [3, 6], [4, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'S': { data: [[0, 0], [1, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'T': { data: [[0, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'U': { data: [[0, 0], [3, 0], [4, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'V': { data: [[0, 0], [3, 0], [4, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [1, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'W': { data: [[0, 0], [3, 0], [4, 0], [5, 0], [0, 1], [3, 1], [4, 1], [5, 1], [0, 2], [3, 2], [4, 2], [5, 2], [0, 3], [3, 3], [5, 3], [0, 4], [0, 5], [4, 5], [0, 6], [3, 6], [4, 6], [5, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'X': { data: [[0, 0], [3, 0], [4, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [1, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [6, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [3, 6], [4, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'Y': { data: [[0, 0], [3, 0], [4, 0], [7, 0], [0, 1], [3, 1], [4, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [1, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'Z': { data: [[0, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '[': { data: [[0, 0], [1, 0], [6, 0], [7, 0], [0, 1], [1, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    ']': { data: [[0, 0], [1, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [6, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'a': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [7, 3], [0, 4], [1, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'b': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [6, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'c': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [6, 2], [7, 2], [0, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'd': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [7, 2], [0, 3], [1, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'e': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [6, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [7, 4], [0, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'f': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [7, 1], [0, 2], [1, 2], [2, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [7, 3], [0, 4], [1, 4], [2, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'g': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [1, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [7, 6], [0, 7], [6, 7], [7, 7]] },
    'h': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [6, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [3, 6], [4, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'i': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'j': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [7, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [7, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [7, 6], [0, 7], [1, 7], [6, 7], [7, 7]] },
    'k': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [3, 3], [6, 3], [7, 3], [0, 4], [5, 4], [6, 4], [7, 4], [0, 5], [3, 5], [6, 5], [7, 5], [0, 6], [3, 6], [4, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'l': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [2, 2], [5, 2], [6, 2], [7, 2], [0, 3], [1, 3], [2, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'm': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [0, 4], [0, 5], [3, 5], [5, 5], [0, 6], [3, 6], [4, 6], [5, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'n': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [6, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [3, 6], [4, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'o': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [6, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'p': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [6, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [6, 5], [7, 5], [0, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'q': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [1, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [7, 7]] },
    'r': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [6, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    's': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [1, 2], [7, 2], [0, 3], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [7, 5], [0, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    't': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [7, 1], [0, 2], [7, 2], [0, 3], [1, 3], [2, 3], [5, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'u': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [0, 6], [1, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'v': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [1, 5], [6, 5], [7, 5], [0, 6], [1, 6], [2, 6], [5, 6], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'w': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [3, 2], [4, 2], [5, 2], [0, 3], [3, 3], [5, 3], [0, 4], [0, 5], [1, 5], [7, 5], [0, 6], [1, 6], [4, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'x': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [1, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [6, 5], [7, 5], [0, 6], [3, 6], [4, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    'y': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [3, 3], [4, 3], [7, 3], [0, 4], [3, 4], [4, 4], [7, 4], [0, 5], [1, 5], [7, 5], [0, 6], [1, 6], [2, 6], [3, 6], [6, 6], [7, 6], [0, 7], [5, 7], [6, 7], [7, 7]] },
    'z': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [0, 2], [7, 2], [0, 3], [1, 3], [2, 3], [3, 3], [6, 3], [7, 3], [0, 4], [1, 4], [2, 4], [5, 4], [6, 4], [7, 4], [0, 5], [1, 5], [4, 5], [5, 5], [6, 5], [7, 5], [0, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] },
    '£': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [6, 0], [7, 0], [0, 1], [1, 1], [2, 1], [4, 1], [5, 1], [7, 1], [0, 2], [1, 2], [4, 2], [5, 2], [6, 2], [7, 2], [0, 3], [6, 3], [7, 3], [0, 4], [1, 4], [4, 4], [5, 4], [6, 4], [7, 4], [0, 5], [3, 5], [4, 5], [5, 5], [7, 5], [6, 6], [7, 6], [0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7], [7, 7]] }
};


/***/ }),

/***/ "./assets/CasioFX.ts":
/*!***************************!*\
  !*** ./assets/CasioFX.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "casioFx": () => (/* binding */ casioFx)
/* harmony export */ });
const casioFx = {
    'width': 6,
    'height': 8,
    'ᴄ': { data: [[1, 2], [2, 2], [3, 2], [0, 3], [0, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6]] },
    'ᴅ': { data: [[4, 0], [4, 1], [1, 2], [2, 2], [4, 2], [0, 3], [3, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6]] },
    'ᴛ': { data: [[1, 0], [0, 1], [1, 1], [2, 1], [1, 2], [1, 3], [1, 4], [1, 5], [4, 5], [2, 6], [3, 6]] },
    '𝐀': { data: [[1, 0], [2, 0], [3, 0], [0, 1], [1, 1], [4, 1], [0, 2], [1, 2], [4, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [0, 4], [1, 4], [4, 4], [0, 5], [1, 5], [4, 5], [0, 6], [1, 6], [4, 6]] },
    '𝐁': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [0, 1], [1, 1], [4, 1], [0, 2], [1, 2], [4, 2], [0, 3], [1, 3], [2, 3], [3, 3], [0, 4], [1, 4], [4, 4], [0, 5], [1, 5], [4, 5], [0, 6], [1, 6], [2, 6], [3, 6]] },
    '𝐂': { data: [[1, 0], [2, 0], [3, 0], [0, 1], [1, 1], [4, 1], [0, 2], [1, 2], [0, 3], [1, 3], [0, 4], [1, 4], [0, 5], [1, 5], [4, 5], [1, 6], [2, 6], [3, 6]] },
    '𝐃': { data: [[0, 0], [1, 0], [2, 0], [0, 1], [1, 1], [3, 1], [0, 2], [1, 2], [4, 2], [0, 3], [1, 3], [4, 3], [0, 4], [1, 4], [4, 4], [0, 5], [1, 5], [3, 5], [0, 6], [1, 6], [2, 6]] },
    '𝐄': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 1], [1, 1], [0, 2], [1, 2], [0, 3], [1, 3], [2, 3], [3, 3], [0, 4], [1, 4], [0, 5], [1, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6]] },
    '𝐅': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 1], [1, 1], [0, 2], [1, 2], [0, 3], [1, 3], [2, 3], [3, 3], [0, 4], [1, 4], [0, 5], [1, 5], [0, 6], [1, 6]] },
    '𝐛': { data: [[0, 0], [0, 1], [0, 2], [2, 2], [3, 2], [0, 3], [1, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [0, 6], [1, 6], [2, 6], [3, 6]] },
    '𝐝': { data: [[4, 0], [4, 1], [1, 2], [2, 2], [4, 2], [0, 3], [3, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6]] },
    '𝐡': { data: [[0, 0], [0, 1], [0, 2], [2, 2], [3, 2], [0, 3], [1, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [0, 6], [4, 6]] },
    '𝐨': { data: [[1, 2], [2, 2], [3, 2], [0, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6]] },
    '𝐫': { data: [[0, 2], [2, 2], [3, 2], [0, 3], [1, 3], [4, 3], [0, 4], [0, 5], [0, 6]] },
    '𝑎': { data: [[1, 2], [2, 2], [3, 2], [4, 3], [1, 4], [2, 4], [3, 4], [4, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6]] },
    '𝑏': { data: [[0, 0], [0, 1], [0, 2], [2, 2], [3, 2], [0, 3], [1, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [0, 6], [1, 6], [2, 6], [3, 6]] },
    '𝑟': { data: [[0, 2], [2, 2], [3, 2], [0, 3], [1, 3], [4, 3], [0, 4], [0, 5], [0, 6]] },
    'ᵍ': { data: [[1, 0], [2, 0], [3, 0], [0, 1], [3, 1], [1, 2], [2, 2], [3, 2], [3, 3], [1, 4], [2, 4]] },
    '𝕚': { data: [[1, 0], [2, 0], [0, 2], [1, 2], [2, 2], [1, 3], [2, 3], [1, 4], [2, 4], [1, 5], [2, 5], [0, 6], [1, 6], [2, 6], [3, 6]] },
    '𝖤': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [1, 1], [4, 1], [1, 2], [1, 3], [2, 3], [3, 3], [1, 4], [1, 5], [4, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6]] },
    '𝖦': { data: [[1, 0], [2, 0], [3, 0], [0, 1], [3, 1], [0, 2], [0, 3], [2, 3], [3, 3], [4, 3], [0, 4], [3, 4], [0, 5], [3, 5], [1, 6], [2, 6], [3, 6]] },
    '𝖬': { data: [[0, 0], [4, 0], [0, 1], [1, 1], [3, 1], [4, 1], [0, 2], [2, 2], [4, 2], [0, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [0, 6], [3, 6], [4, 6]] },
    '𝖯': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [1, 1], [4, 1], [1, 2], [4, 2], [1, 3], [2, 3], [3, 3], [1, 4], [1, 5], [0, 6], [1, 6], [2, 6]] },
    '𝖳': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 1], [2, 1], [4, 1], [2, 2], [2, 3], [2, 4], [2, 5], [1, 6], [2, 6], [3, 6]] },
    '𝖸': { data: [[0, 0], [4, 0], [0, 1], [4, 1], [0, 2], [4, 2], [1, 3], [3, 3], [2, 4], [2, 5], [2, 6]] },
    '𝖺': { data: [[1, 2], [2, 2], [3, 2], [4, 3], [1, 4], [2, 4], [3, 4], [4, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6]] },
    '𝖾': { data: [[1, 2], [2, 2], [3, 2], [0, 3], [4, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [0, 5], [1, 6], [2, 6], [3, 6]] },
    '𝖿': { data: [[3, 0], [4, 0], [2, 1], [1, 2], [2, 2], [3, 2], [2, 3], [2, 4], [2, 5], [2, 6]] },
    '𝗄': { data: [[1, 0], [1, 1], [1, 2], [4, 2], [1, 3], [3, 3], [1, 4], [2, 4], [1, 5], [3, 5], [1, 6], [4, 6]] },
    '𝗆': { data: [[0, 2], [1, 2], [3, 2], [0, 3], [2, 3], [4, 3], [0, 4], [2, 4], [4, 4], [0, 5], [2, 5], [4, 5], [0, 6], [2, 6], [4, 6]] },
    '𝗇': { data: [[0, 2], [2, 2], [3, 2], [0, 3], [1, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [0, 6], [4, 6]] },
    '𝗉': { data: [[0, 2], [1, 2], [2, 2], [3, 2], [0, 3], [4, 3], [0, 4], [1, 4], [2, 4], [3, 4], [0, 5], [0, 6]] },
    '𝗋': { data: [[0, 2], [1, 2], [3, 2], [4, 2], [1, 3], [2, 3], [1, 4], [1, 5], [0, 6], [1, 6], [2, 6]] },
    ' ': { data: [] },
    '⁻¹': { data: [[4, 0], [4, 1], [0, 2], [1, 2], [2, 2], [4, 2], [4, 3], [4, 4]] },
    '₀': { data: [[1, 3], [2, 3], [3, 3], [1, 4], [3, 4], [1, 5], [3, 5], [1, 6], [2, 6], [3, 6]] },
    '₁₀': { data: [[0, 2], [2, 2], [3, 2], [4, 2], [0, 3], [2, 3], [4, 3], [0, 4], [2, 4], [4, 4], [0, 5], [2, 5], [4, 5], [0, 6], [2, 6], [3, 6], [4, 6]] },
    '₁': { data: [[2, 3], [2, 4], [2, 5], [2, 6]] },
    '₂': { data: [[1, 3], [2, 3], [3, 4], [2, 5], [1, 6], [2, 6], [3, 6]] },
    '₋₁': { data: [[4, 2], [4, 3], [0, 4], [1, 4], [2, 4], [4, 4], [4, 5], [4, 6]] },
    'ₙ': { data: [[0, 3], [2, 3], [3, 3], [0, 4], [1, 4], [4, 4], [0, 5], [4, 5], [0, 6], [4, 6]] },
    '!': { data: [[2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 6]] },
    'ℂ': { data: [[1, 0], [2, 0], [3, 0], [0, 1], [1, 1], [4, 1], [0, 2], [1, 2], [0, 3], [1, 3], [0, 4], [1, 4], [0, 5], [1, 5], [4, 5], [1, 6], [2, 6], [3, 6]] },
    'ℙ': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [0, 1], [1, 1], [4, 1], [0, 2], [1, 2], [4, 2], [0, 3], [1, 3], [2, 3], [3, 3], [0, 4], [1, 4], [0, 5], [1, 5], [0, 6], [1, 6]] },
    '→': { data: [[2, 1], [3, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [3, 4], [2, 5]] },
    '⇒': { data: [[1, 0], [2, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 3], [0, 4], [1, 4], [2, 4], [3, 4], [2, 5], [1, 6]] },
    '"': { data: [[1, 0], [3, 0], [1, 1], [3, 1], [1, 2], [3, 2]] },
    '∊': { data: [[0, 2], [1, 2], [2, 2], [3, 2], [0, 3], [0, 4], [1, 4], [2, 4], [0, 5], [0, 6], [1, 6], [2, 6], [3, 6]] },
    '∑': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 1], [4, 1], [1, 2], [2, 3], [1, 4], [0, 5], [4, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6]] },
    '√': { data: [[2, 0], [3, 0], [4, 0], [2, 1], [2, 2], [2, 3], [0, 4], [2, 4], [1, 5], [2, 5], [2, 6]] },
    '∫': { data: [[3, 0], [2, 1], [4, 1], [2, 2], [2, 3], [2, 4], [0, 5], [2, 5], [1, 6]] },
    '≠': { data: [[1, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [2, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [3, 5]] },
    '≤': { data: [[3, 1], [2, 2], [1, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6]] },
    '≥': { data: [[1, 1], [2, 2], [3, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6]] },
    '#': { data: [[1, 0], [3, 0], [1, 1], [3, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [1, 3], [3, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [1, 5], [3, 5], [1, 6], [3, 6]] },
    '⌟': { data: [[3, 4], [3, 5], [1, 6], [2, 6], [3, 6]] },
    '$': { data: [[2, 0], [1, 1], [2, 1], [3, 1], [4, 1], [0, 2], [2, 2], [1, 3], [2, 3], [3, 3], [2, 4], [4, 4], [0, 5], [1, 5], [2, 5], [3, 5], [2, 6]] },
    '⑴': { data: [[2, 2], [1, 3], [2, 3], [2, 4], [2, 5], [1, 6], [2, 6], [3, 6]] },
    '⑵': { data: [[1, 2], [2, 2], [3, 2], [3, 3], [1, 4], [2, 4], [3, 4], [1, 5], [1, 6], [2, 6], [3, 6]] },
    '⑶': { data: [[1, 2], [2, 2], [3, 2], [3, 3], [1, 4], [2, 4], [3, 4], [3, 5], [1, 6], [2, 6], [3, 6]] },
    '⑷': { data: [[1, 2], [3, 2], [1, 3], [3, 3], [1, 4], [2, 4], [3, 4], [3, 5], [3, 6]] },
    '⑸': { data: [[1, 2], [2, 2], [3, 2], [1, 3], [1, 4], [2, 4], [3, 4], [3, 5], [1, 6], [2, 6], [3, 6]] },
    '⑹': { data: [[1, 2], [2, 2], [3, 2], [1, 3], [1, 4], [2, 4], [3, 4], [1, 5], [3, 5], [1, 6], [2, 6], [3, 6]] },
    '%': { data: [[0, 0], [1, 0], [0, 1], [1, 1], [4, 1], [3, 2], [2, 3], [1, 4], [0, 5], [3, 5], [4, 5], [3, 6], [4, 6]] },
    '▫': { data: [[0, 0], [1, 0], [2, 0], [0, 1], [2, 1], [0, 2], [1, 2], [2, 2]] },
    '◢': { data: [[2, 4], [1, 5], [2, 5], [0, 6], [1, 6], [2, 6]] },
    '&': { data: [[1, 0], [2, 0], [0, 1], [3, 1], [0, 2], [2, 2], [1, 3], [0, 4], [2, 4], [4, 4], [0, 5], [3, 5], [1, 6], [2, 6], [4, 6]] },
    '\'': { data: [[1, 0], [2, 0], [2, 1], [1, 2]] },
    '(': { data: [[3, 0], [2, 1], [1, 2], [1, 3], [1, 4], [2, 5], [3, 6]] },
    ')': { data: [[1, 0], [2, 1], [3, 2], [3, 3], [3, 4], [2, 5], [1, 6]] },
    'ʟ': { data: [[1, 0], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [1, 6], [2, 6], [3, 6]] },
    '*': { data: [[2, 1], [0, 2], [2, 2], [4, 2], [1, 3], [2, 3], [3, 3], [1, 4], [2, 4], [3, 4], [0, 5], [2, 5], [4, 5], [2, 6]] },
    '+': { data: [[2, 1], [2, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [2, 4], [2, 5]] },
    'ʳ': { data: [[0, 0], [2, 0], [3, 0], [0, 1], [1, 1], [0, 2], [0, 3]] },
    ',': { data: [[1, 4], [2, 4], [2, 5], [1, 6]] },
    '-': { data: [[0, 3], [1, 3], [2, 3], [3, 3], [4, 3]] },
    '.': { data: [[1, 5], [2, 5], [1, 6], [2, 6]] },
    'ˣ': { data: [[2, 0], [4, 0], [3, 1], [2, 2], [4, 2]] },
    '/': { data: [[4, 1], [3, 2], [2, 3], [1, 4], [0, 5]] },
    '0': { data: [[1, 0], [2, 0], [3, 0], [0, 1], [4, 1], [0, 2], [3, 2], [4, 2], [0, 3], [2, 3], [4, 3], [0, 4], [1, 4], [4, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6]] },
    '1': { data: [[2, 0], [1, 1], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [1, 6], [2, 6], [3, 6]] },
    '2': { data: [[1, 0], [2, 0], [3, 0], [0, 1], [4, 1], [4, 2], [3, 3], [2, 4], [1, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6]] },
    '3': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [3, 1], [2, 2], [3, 3], [4, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6]] },
    '4': { data: [[3, 0], [2, 1], [3, 1], [1, 2], [3, 2], [0, 3], [3, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [3, 5], [3, 6]] },
    '5': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 3], [4, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6]] },
    '6': { data: [[2, 0], [3, 0], [1, 1], [0, 2], [0, 3], [1, 3], [2, 3], [3, 3], [0, 4], [4, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6]] },
    '7': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [4, 1], [3, 2], [2, 3], [2, 4], [2, 5], [2, 6]] },
    '8': { data: [[1, 0], [2, 0], [3, 0], [0, 1], [4, 1], [0, 2], [4, 2], [1, 3], [2, 3], [3, 3], [0, 4], [4, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6]] },
    '9': { data: [[1, 0], [2, 0], [3, 0], [0, 1], [4, 1], [0, 2], [4, 2], [1, 3], [2, 3], [3, 3], [4, 3], [4, 4], [3, 5], [1, 6], [2, 6]] },
    ':': { data: [[1, 1], [2, 1], [1, 2], [2, 2], [1, 4], [2, 4], [1, 5], [2, 5]] },
    ';': { data: [[1, 1], [2, 1], [1, 2], [2, 2], [1, 4], [2, 4], [2, 5], [1, 6]] },
    'η': { data: [[0, 2], [2, 2], [3, 2], [0, 3], [1, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [0, 6], [3, 6], [4, 6]] },
    'θ': { data: [[1, 1], [2, 1], [0, 2], [3, 2], [0, 3], [1, 3], [2, 3], [3, 3], [0, 4], [3, 4], [0, 5], [3, 5], [1, 6], [2, 6]] },
    'μ': { data: [[0, 2], [3, 2], [0, 3], [3, 3], [0, 4], [1, 4], [2, 4], [4, 4], [0, 5], [0, 6]] },
    '<': { data: [[3, 0], [2, 1], [1, 2], [0, 3], [1, 4], [2, 5], [3, 6]] },
    'π': { data: [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [1, 3], [3, 3], [1, 4], [3, 4], [1, 5], [3, 5], [0, 6], [3, 6], [4, 6]] },
    'σ': { data: [[4, 0], [3, 1], [1, 2], [2, 2], [0, 3], [3, 3], [0, 4], [3, 4], [0, 5], [3, 5], [1, 6], [2, 6]] },
    '=': { data: [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4]] },
    '>': { data: [[1, 0], [2, 1], [3, 2], [4, 3], [3, 4], [2, 5], [1, 6]] },
    '?': { data: [[1, 0], [2, 0], [3, 0], [0, 1], [4, 1], [4, 2], [3, 3], [2, 4], [2, 6]] },
    '@': { data: [[1, 0], [2, 0], [3, 0], [0, 1], [4, 1], [4, 2], [1, 3], [2, 3], [4, 3], [0, 4], [2, 4], [4, 4], [0, 5], [2, 5], [4, 5], [1, 6], [2, 6], [3, 6]] },
    'A': { data: [[1, 0], [2, 0], [3, 0], [0, 1], [4, 1], [0, 2], [4, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [0, 6], [4, 6]] },
    'B': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [0, 1], [4, 1], [0, 2], [4, 2], [0, 3], [1, 3], [2, 3], [3, 3], [0, 4], [4, 4], [0, 5], [4, 5], [0, 6], [1, 6], [2, 6], [3, 6]] },
    'C': { data: [[1, 0], [2, 0], [3, 0], [0, 1], [4, 1], [0, 2], [0, 3], [0, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6]] },
    'D': { data: [[0, 0], [1, 0], [2, 0], [0, 1], [3, 1], [0, 2], [4, 2], [0, 3], [4, 3], [0, 4], [4, 4], [0, 5], [3, 5], [0, 6], [1, 6], [2, 6]] },
    'E': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 1], [0, 2], [0, 3], [1, 3], [2, 3], [3, 3], [0, 4], [0, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6]] },
    'F': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 1], [0, 2], [0, 3], [1, 3], [2, 3], [3, 3], [0, 4], [0, 5], [0, 6]] },
    'G': { data: [[1, 0], [2, 0], [3, 0], [0, 1], [4, 1], [0, 2], [0, 3], [2, 3], [3, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6]] },
    'H': { data: [[0, 0], [4, 0], [0, 1], [4, 1], [0, 2], [4, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [0, 6], [4, 6]] },
    'I': { data: [[1, 0], [2, 0], [3, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [1, 6], [2, 6], [3, 6]] },
    'J': { data: [[2, 0], [3, 0], [4, 0], [3, 1], [3, 2], [3, 3], [3, 4], [0, 5], [3, 5], [1, 6], [2, 6]] },
    'K': { data: [[0, 0], [4, 0], [0, 1], [3, 1], [0, 2], [2, 2], [0, 3], [1, 3], [0, 4], [2, 4], [0, 5], [3, 5], [0, 6], [4, 6]] },
    'L': { data: [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6]] },
    'M': { data: [[0, 0], [4, 0], [0, 1], [1, 1], [3, 1], [4, 1], [0, 2], [2, 2], [4, 2], [0, 3], [2, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [0, 6], [4, 6]] },
    'N': { data: [[0, 0], [4, 0], [0, 1], [4, 1], [0, 2], [1, 2], [4, 2], [0, 3], [2, 3], [4, 3], [0, 4], [3, 4], [4, 4], [0, 5], [4, 5], [0, 6], [4, 6]] },
    'O': { data: [[1, 0], [2, 0], [3, 0], [0, 1], [4, 1], [0, 2], [4, 2], [0, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6]] },
    'P': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [0, 1], [4, 1], [0, 2], [4, 2], [0, 3], [1, 3], [2, 3], [3, 3], [0, 4], [0, 5], [0, 6]] },
    'Q': { data: [[1, 0], [2, 0], [3, 0], [0, 1], [4, 1], [0, 2], [4, 2], [0, 3], [4, 3], [0, 4], [2, 4], [4, 4], [0, 5], [3, 5], [1, 6], [2, 6], [4, 6]] },
    'R': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [0, 1], [4, 1], [0, 2], [4, 2], [0, 3], [1, 3], [2, 3], [3, 3], [0, 4], [2, 4], [0, 5], [3, 5], [0, 6], [4, 6]] },
    'S': { data: [[1, 0], [2, 0], [3, 0], [0, 1], [4, 1], [0, 2], [1, 3], [2, 3], [3, 3], [4, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6]] },
    'T': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6]] },
    'U': { data: [[0, 0], [4, 0], [0, 1], [4, 1], [0, 2], [4, 2], [0, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6]] },
    'V': { data: [[0, 0], [4, 0], [0, 1], [4, 1], [0, 2], [4, 2], [0, 3], [4, 3], [0, 4], [4, 4], [1, 5], [3, 5], [2, 6]] },
    'W': { data: [[0, 0], [4, 0], [0, 1], [4, 1], [0, 2], [4, 2], [0, 3], [2, 3], [4, 3], [0, 4], [2, 4], [4, 4], [0, 5], [2, 5], [4, 5], [1, 6], [3, 6]] },
    'X': { data: [[0, 0], [4, 0], [0, 1], [4, 1], [1, 2], [3, 2], [2, 3], [1, 4], [3, 4], [0, 5], [4, 5], [0, 6], [4, 6]] },
    'Y': { data: [[0, 0], [4, 0], [0, 1], [4, 1], [0, 2], [4, 2], [1, 3], [3, 3], [2, 4], [2, 5], [2, 6]] },
    'Z': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [4, 1], [3, 2], [2, 3], [1, 4], [0, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6]] },
    '[': { data: [[1, 0], [2, 0], [3, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [2, 6], [3, 6]] },
    '\\': { data: [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]] },
    ']': { data: [[1, 0], [2, 0], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [1, 6], [2, 6], [3, 6]] },
    '^': { data: [[2, 0], [1, 1], [3, 1], [0, 2], [4, 2]] },
    '_': { data: [[0, 6], [1, 6], [2, 6], [3, 6], [4, 6]] },
    '`': { data: [[1, 0], [2, 0], [2, 1], [3, 2]] },
    'a': { data: [[1, 2], [2, 2], [3, 2], [4, 3], [1, 4], [2, 4], [3, 4], [4, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6]] },
    'b': { data: [[0, 0], [0, 1], [0, 2], [2, 2], [3, 2], [0, 3], [1, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [0, 6], [1, 6], [2, 6], [3, 6]] },
    'c': { data: [[1, 2], [2, 2], [3, 2], [0, 3], [0, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6]] },
    'd': { data: [[4, 0], [4, 1], [1, 2], [2, 2], [4, 2], [0, 3], [3, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6]] },
    'e': { data: [[1, 2], [2, 2], [3, 2], [0, 3], [4, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [0, 5], [1, 6], [2, 6], [3, 6]] },
    'f': { data: [[3, 0], [4, 0], [2, 1], [1, 2], [2, 2], [3, 2], [2, 3], [2, 4], [2, 5], [2, 6]] },
    'g': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [0, 3], [4, 3], [1, 4], [2, 4], [3, 4], [4, 4], [4, 5], [1, 6], [2, 6], [3, 6]] },
    'h': { data: [[0, 0], [0, 1], [0, 2], [2, 2], [3, 2], [0, 3], [1, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [0, 6], [4, 6]] },
    'i': { data: [[2, 0], [1, 2], [2, 2], [2, 3], [2, 4], [2, 5], [1, 6], [2, 6], [3, 6]] },
    'j': { data: [[3, 0], [2, 2], [3, 2], [3, 3], [3, 4], [0, 5], [3, 5], [1, 6], [2, 6]] },
    'k': { data: [[1, 0], [1, 1], [1, 2], [4, 2], [1, 3], [3, 3], [1, 4], [2, 4], [1, 5], [3, 5], [1, 6], [4, 6]] },
    'l': { data: [[1, 0], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [1, 6], [2, 6], [3, 6]] },
    'm': { data: [[0, 2], [1, 2], [3, 2], [0, 3], [2, 3], [4, 3], [0, 4], [2, 4], [4, 4], [0, 5], [2, 5], [4, 5], [0, 6], [2, 6], [4, 6]] },
    'n': { data: [[0, 2], [2, 2], [3, 2], [0, 3], [1, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [0, 6], [4, 6]] },
    'o': { data: [[1, 2], [2, 2], [3, 2], [0, 3], [4, 3], [0, 4], [4, 4], [0, 5], [4, 5], [1, 6], [2, 6], [3, 6]] },
    'p': { data: [[0, 2], [1, 2], [2, 2], [3, 2], [0, 3], [4, 3], [0, 4], [1, 4], [2, 4], [3, 4], [0, 5], [0, 6]] },
    'q': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [0, 3], [4, 3], [1, 4], [2, 4], [3, 4], [4, 4], [4, 5], [4, 6]] },
    'r': { data: [[0, 2], [2, 2], [3, 2], [0, 3], [1, 3], [4, 3], [0, 4], [0, 5], [0, 6]] },
    's': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [0, 3], [1, 4], [2, 4], [3, 4], [4, 5], [0, 6], [1, 6], [2, 6], [3, 6]] },
    't': { data: [[1, 0], [0, 1], [1, 1], [2, 1], [1, 2], [1, 3], [1, 4], [1, 5], [4, 5], [2, 6], [3, 6]] },
    'u': { data: [[0, 2], [4, 2], [0, 3], [4, 3], [0, 4], [4, 4], [0, 5], [3, 5], [4, 5], [1, 6], [2, 6], [4, 6]] },
    'v': { data: [[0, 2], [4, 2], [0, 3], [4, 3], [1, 4], [3, 4], [1, 5], [3, 5], [2, 6]] },
    'w': { data: [[0, 2], [4, 2], [0, 3], [4, 3], [0, 4], [2, 4], [4, 4], [0, 5], [2, 5], [4, 5], [1, 6], [3, 6]] },
    'x̂': { data: [[2, 0], [1, 1], [3, 1], [0, 3], [1, 3], [4, 3], [2, 4], [3, 4], [1, 5], [2, 5], [0, 6], [3, 6], [4, 6]] },
    'x̄': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 2], [1, 2], [4, 2], [2, 3], [3, 3], [2, 4], [1, 5], [2, 5], [0, 6], [3, 6], [4, 6]] },
    'x': { data: [[0, 2], [1, 2], [4, 2], [2, 3], [3, 3], [2, 4], [1, 5], [2, 5], [0, 6], [3, 6], [4, 6]] },
    'ŷ': { data: [[2, 0], [1, 1], [3, 1], [0, 3], [4, 3], [1, 4], [3, 4], [2, 5], [0, 6], [1, 6]] },
    'ȳ': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 2], [4, 2], [1, 3], [4, 3], [2, 4], [3, 4], [2, 5], [0, 6], [1, 6]] },
    'y': { data: [[0, 2], [4, 2], [1, 3], [4, 3], [2, 4], [3, 4], [2, 5], [0, 6], [1, 6]] },
    'z': { data: [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [3, 3], [2, 4], [1, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6]] },
    '{': { data: [[2, 0], [1, 1], [1, 2], [0, 3], [1, 4], [1, 5], [2, 6]] },
    '|': { data: [[2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6]] },
    '}': { data: [[2, 0], [3, 1], [3, 2], [4, 3], [3, 4], [3, 5], [2, 6]] },
    '~': { data: [[1, 2], [4, 2], [0, 3], [2, 3], [4, 3], [0, 4], [3, 4]] },
    '°': { data: [[1, 0], [2, 0], [0, 1], [3, 1], [0, 2], [3, 2], [1, 3], [2, 3]] },
    '²': { data: [[1, 0], [2, 0], [3, 0], [3, 1], [1, 2], [2, 2], [3, 2], [1, 3], [1, 4], [2, 4], [3, 4]] },
    '³': { data: [[1, 0], [2, 0], [3, 0], [4, 1], [2, 2], [3, 2], [4, 3], [1, 4], [2, 4], [3, 4]] },
    '×': { data: [[0, 1], [4, 1], [1, 2], [3, 2], [2, 3], [1, 4], [3, 4], [0, 5], [4, 5]] },
    '÷': { data: [[2, 1], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [2, 5]] },
    '﹣': { data: [[2, 3], [3, 3], [4, 3]] }
};


/***/ }),

/***/ "./assets/PressStart2P.ts":
/*!********************************!*\
  !*** ./assets/PressStart2P.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pressStart2P": () => (/* binding */ pressStart2P)
/* harmony export */ });
const pressStart2P = {
    'width': 8,
    'height': 8,
    ' ': { data: [] },
    '!': { data: [[2, 0], [3, 0], [4, 0], [2, 1], [3, 1], [4, 1], [2, 2], [3, 2], [4, 2], [2, 3], [3, 3], [2, 4], [3, 4], [2, 6], [3, 6]] },
    '"': { data: [[1, 0], [2, 0], [4, 0], [5, 0], [1, 1], [2, 1], [4, 1], [5, 1], [1, 2], [2, 2], [4, 2], [5, 2]] },
    '#': { data: [[1, 0], [2, 0], [4, 0], [5, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [1, 2], [2, 2], [4, 2], [5, 2], [1, 3], [2, 3], [4, 3], [5, 3], [1, 4], [2, 4], [4, 4], [5, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [1, 6], [2, 6], [4, 6], [5, 6]] },
    '$': { data: [[3, 0], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [0, 2], [1, 2], [3, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [3, 4], [5, 4], [6, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [3, 6]] },
    '%': { data: [[1, 0], [2, 0], [6, 0], [0, 1], [2, 1], [5, 1], [0, 2], [1, 2], [4, 2], [3, 3], [2, 4], [5, 4], [6, 4], [1, 5], [4, 5], [6, 5], [0, 6], [4, 6], [5, 6]] },
    '&': { data: [[1, 0], [2, 0], [3, 0], [0, 1], [1, 1], [3, 1], [4, 1], [0, 2], [1, 2], [3, 2], [4, 2], [1, 3], [2, 3], [3, 3], [0, 4], [1, 4], [3, 4], [4, 4], [6, 4], [0, 5], [1, 5], [4, 5], [5, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    '\'': { data: [[2, 0], [3, 0], [2, 1], [3, 1], [2, 2], [3, 2]] },
    '(': { data: [[4, 0], [5, 0], [3, 1], [4, 1], [2, 2], [3, 2], [2, 3], [3, 3], [2, 4], [3, 4], [3, 5], [4, 5], [4, 6], [5, 6]] },
    ')': { data: [[1, 0], [2, 0], [2, 1], [3, 1], [3, 2], [4, 2], [3, 3], [4, 3], [3, 4], [4, 4], [2, 5], [3, 5], [1, 6], [2, 6]] },
    '*': { data: [[1, 1], [2, 1], [4, 1], [5, 1], [2, 2], [3, 2], [4, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [2, 4], [3, 4], [4, 4], [1, 5], [2, 5], [4, 5], [5, 5]] },
    '+': { data: [[3, 1], [4, 1], [3, 2], [4, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [3, 4], [4, 4], [3, 5], [4, 5]] },
    ',': { data: [[2, 5], [3, 5], [2, 6], [3, 6], [1, 7], [2, 7]] },
    '-': { data: [[1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3]] },
    '.': { data: [[2, 5], [3, 5], [2, 6], [3, 6]] },
    '/': { data: [[6, 0], [5, 1], [4, 2], [3, 3], [2, 4], [1, 5], [0, 6]] },
    '0': { data: [[2, 0], [3, 0], [4, 0], [1, 1], [4, 1], [5, 1], [0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [2, 6], [3, 6], [4, 6]] },
    '1': { data: [[3, 0], [4, 0], [2, 1], [3, 1], [4, 1], [3, 2], [4, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    '2': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [0, 1], [1, 1], [5, 1], [6, 1], [4, 2], [5, 2], [6, 2], [2, 3], [3, 3], [4, 3], [5, 3], [1, 4], [2, 4], [3, 4], [4, 4], [0, 5], [1, 5], [2, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    '3': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [4, 1], [5, 1], [3, 2], [4, 2], [2, 3], [3, 3], [4, 3], [5, 3], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    '4': { data: [[3, 0], [4, 0], [5, 0], [2, 1], [3, 1], [4, 1], [5, 1], [1, 2], [2, 2], [4, 2], [5, 2], [0, 3], [1, 3], [4, 3], [5, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [4, 5], [5, 5], [4, 6], [5, 6]] },
    '5': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [0, 1], [1, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [5, 3], [6, 3], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    '6': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [0, 2], [1, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    '7': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [0, 1], [1, 1], [5, 1], [6, 1], [4, 2], [5, 2], [3, 3], [4, 3], [2, 4], [3, 4], [2, 5], [3, 5], [2, 6], [3, 6]] },
    '8': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [0, 1], [1, 1], [5, 1], [0, 2], [1, 2], [2, 2], [5, 2], [1, 3], [2, 3], [3, 3], [4, 3], [0, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    '9': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [0, 1], [1, 1], [5, 1], [6, 1], [0, 2], [1, 2], [5, 2], [6, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [5, 4], [6, 4], [4, 5], [5, 5], [1, 6], [2, 6], [3, 6], [4, 6]] },
    ':': { data: [[2, 1], [3, 1], [2, 2], [3, 2], [2, 4], [3, 4], [2, 5], [3, 5]] },
    ';': { data: [[2, 1], [3, 1], [2, 2], [3, 2], [2, 4], [3, 4], [2, 5], [3, 5], [1, 6], [2, 6]] },
    '<': { data: [[4, 0], [5, 0], [3, 1], [4, 1], [2, 2], [3, 2], [1, 3], [2, 3], [2, 4], [3, 4], [3, 5], [4, 5], [4, 6], [5, 6]] },
    '=': { data: [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4]] },
    '>': { data: [[1, 0], [2, 0], [2, 1], [3, 1], [3, 2], [4, 2], [4, 3], [5, 3], [3, 4], [4, 4], [2, 5], [3, 5], [1, 6], [2, 6]] },
    '?': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [0, 2], [1, 2], [5, 2], [6, 2], [4, 3], [5, 3], [2, 4], [3, 4], [4, 4], [2, 6], [3, 6], [4, 6]] },
    '@': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [0, 1], [6, 1], [0, 2], [2, 2], [3, 2], [4, 2], [6, 2], [0, 3], [2, 3], [4, 3], [6, 3], [0, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'A': { data: [[2, 0], [3, 0], [4, 0], [1, 1], [2, 1], [4, 1], [5, 1], [0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [0, 6], [1, 6], [5, 6], [6, 6]] },
    'B': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [0, 1], [1, 1], [5, 1], [6, 1], [0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'C': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [0, 2], [1, 2], [0, 3], [1, 3], [0, 4], [1, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'D': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [0, 1], [1, 1], [4, 1], [5, 1], [0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [4, 5], [5, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6]] },
    'E': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [0, 1], [1, 1], [0, 2], [1, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [0, 4], [1, 4], [0, 5], [1, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'F': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [0, 1], [1, 1], [0, 2], [1, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [0, 4], [1, 4], [0, 5], [1, 5], [0, 6], [1, 6]] },
    'G': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [1, 1], [2, 1], [0, 2], [1, 2], [0, 3], [1, 3], [4, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'H': { data: [[0, 0], [1, 0], [5, 0], [6, 0], [0, 1], [1, 1], [5, 1], [6, 1], [0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [0, 6], [1, 6], [5, 6], [6, 6]] },
    'I': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [3, 1], [4, 1], [3, 2], [4, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'J': { data: [[5, 0], [6, 0], [5, 1], [6, 1], [5, 2], [6, 2], [5, 3], [6, 3], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'K': { data: [[0, 0], [1, 0], [5, 0], [6, 0], [0, 1], [1, 1], [4, 1], [5, 1], [0, 2], [1, 2], [3, 2], [4, 2], [0, 3], [1, 3], [2, 3], [3, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [0, 5], [1, 5], [3, 5], [4, 5], [5, 5], [0, 6], [1, 6], [4, 6], [5, 6], [6, 6]] },
    'L': { data: [[1, 0], [2, 0], [1, 1], [2, 1], [1, 2], [2, 2], [1, 3], [2, 3], [1, 4], [2, 4], [1, 5], [2, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'M': { data: [[0, 0], [1, 0], [5, 0], [6, 0], [0, 1], [1, 1], [2, 1], [4, 1], [5, 1], [6, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [0, 4], [1, 4], [3, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [0, 6], [1, 6], [5, 6], [6, 6]] },
    'N': { data: [[0, 0], [1, 0], [5, 0], [6, 0], [0, 1], [1, 1], [2, 1], [5, 1], [6, 1], [0, 2], [1, 2], [2, 2], [3, 2], [5, 2], [6, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [0, 4], [1, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [4, 5], [5, 5], [6, 5], [0, 6], [1, 6], [5, 6], [6, 6]] },
    'O': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [0, 1], [1, 1], [5, 1], [6, 1], [0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'P': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [0, 1], [1, 1], [5, 1], [6, 1], [0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [0, 5], [1, 5], [0, 6], [1, 6]] },
    'Q': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [0, 1], [1, 1], [5, 1], [6, 1], [0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [4, 5], [5, 5], [1, 6], [2, 6], [3, 6], [4, 6], [6, 6]] },
    'R': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [0, 1], [1, 1], [5, 1], [6, 1], [0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [4, 3], [5, 3], [6, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [0, 5], [1, 5], [3, 5], [4, 5], [5, 5], [0, 6], [1, 6], [4, 6], [5, 6], [6, 6]] },
    'S': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [0, 1], [1, 1], [4, 1], [5, 1], [0, 2], [1, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'T': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [3, 1], [4, 1], [3, 2], [4, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [3, 6], [4, 6]] },
    'U': { data: [[0, 0], [1, 0], [5, 0], [6, 0], [0, 1], [1, 1], [5, 1], [6, 1], [0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'V': { data: [[0, 0], [1, 0], [5, 0], [6, 0], [0, 1], [1, 1], [5, 1], [6, 1], [0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [2, 3], [4, 3], [5, 3], [6, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [2, 5], [3, 5], [4, 5], [3, 6]] },
    'W': { data: [[0, 0], [1, 0], [5, 0], [6, 0], [0, 1], [1, 1], [5, 1], [6, 1], [0, 2], [1, 2], [3, 2], [5, 2], [6, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [2, 5], [4, 5], [5, 5], [6, 5], [0, 6], [1, 6], [5, 6], [6, 6]] },
    'X': { data: [[0, 0], [1, 0], [5, 0], [6, 0], [0, 1], [1, 1], [2, 1], [4, 1], [5, 1], [6, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [2, 3], [3, 3], [4, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [0, 5], [1, 5], [2, 5], [4, 5], [5, 5], [6, 5], [0, 6], [1, 6], [5, 6], [6, 6]] },
    'Y': { data: [[1, 0], [2, 0], [5, 0], [6, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [5, 2], [6, 2], [2, 3], [3, 3], [4, 3], [5, 3], [3, 4], [4, 4], [3, 5], [4, 5], [3, 6], [4, 6]] },
    'Z': { data: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [4, 1], [5, 1], [6, 1], [3, 2], [4, 2], [5, 2], [2, 3], [3, 3], [4, 3], [1, 4], [2, 4], [3, 4], [0, 5], [1, 5], [2, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    '[': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [2, 1], [3, 1], [2, 2], [3, 2], [2, 3], [3, 3], [2, 4], [3, 4], [2, 5], [3, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    '\\': { data: [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6]] },
    ']': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [3, 1], [4, 1], [3, 2], [4, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6]] },
    '^': { data: [[2, 0], [3, 0], [4, 0], [1, 1], [2, 1], [4, 1], [5, 1]] },
    '_': { data: [[0, 7], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7], [6, 7]] },
    '`': { data: [[3, 0], [4, 1]] },
    'a': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [5, 3], [6, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'b': { data: [[0, 0], [1, 0], [0, 1], [1, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'c': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [0, 3], [1, 3], [0, 4], [1, 4], [0, 5], [1, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'd': { data: [[5, 0], [6, 0], [5, 1], [6, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'e': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'f': { data: [[4, 0], [5, 0], [6, 0], [3, 1], [4, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [3, 6], [4, 6]] },
    'g': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [5, 6], [6, 6], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7]] },
    'h': { data: [[0, 0], [1, 0], [0, 1], [1, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [0, 6], [1, 6], [5, 6], [6, 6]] },
    'i': { data: [[3, 0], [4, 0], [2, 2], [3, 2], [4, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'j': { data: [[3, 0], [4, 0], [2, 2], [3, 2], [4, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [3, 6], [4, 6], [0, 7], [1, 7], [2, 7], [3, 7]] },
    'k': { data: [[0, 0], [1, 0], [0, 1], [1, 1], [0, 2], [1, 2], [4, 2], [5, 2], [6, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [0, 5], [1, 5], [3, 5], [4, 5], [5, 5], [0, 6], [1, 6], [4, 6], [5, 6], [6, 6]] },
    'l': { data: [[2, 0], [3, 0], [4, 0], [3, 1], [4, 1], [3, 2], [4, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'm': { data: [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [2, 3], [3, 3], [5, 3], [6, 3], [0, 4], [2, 4], [3, 4], [5, 4], [6, 4], [0, 5], [2, 5], [3, 5], [5, 5], [6, 5], [0, 6], [2, 6], [3, 6], [5, 6], [6, 6]] },
    'n': { data: [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [0, 6], [1, 6], [5, 6], [6, 6]] },
    'o': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'p': { data: [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [0, 6], [1, 6], [0, 7], [1, 7]] },
    'q': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [5, 6], [6, 6], [5, 7], [6, 7]] },
    'r': { data: [[1, 2], [2, 2], [4, 2], [5, 2], [6, 2], [1, 3], [2, 3], [3, 3], [1, 4], [2, 4], [1, 5], [2, 5], [1, 6], [2, 6]] },
    's': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [5, 5], [6, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    't': { data: [[3, 0], [4, 0], [3, 1], [4, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [3, 6], [4, 6]] },
    'u': { data: [[0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'v': { data: [[1, 2], [2, 2], [5, 2], [6, 2], [1, 3], [2, 3], [5, 3], [6, 3], [1, 4], [2, 4], [5, 4], [6, 4], [2, 5], [3, 5], [4, 5], [5, 5], [3, 6], [4, 6]] },
    'w': { data: [[0, 2], [2, 2], [3, 2], [5, 2], [6, 2], [0, 3], [2, 3], [3, 3], [5, 3], [6, 3], [0, 4], [2, 4], [3, 4], [5, 4], [6, 4], [0, 5], [2, 5], [3, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'x': { data: [[0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [2, 4], [3, 4], [4, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [0, 6], [1, 6], [5, 6], [6, 6]] },
    'y': { data: [[0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [5, 6], [6, 6], [1, 7], [2, 7], [3, 7], [4, 7], [5, 7]] },
    'z': { data: [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [3, 3], [4, 3], [5, 3], [2, 4], [3, 4], [4, 4], [1, 5], [2, 5], [3, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    '{': { data: [[4, 0], [5, 0], [3, 1], [4, 1], [3, 2], [4, 2], [2, 3], [3, 3], [3, 4], [4, 4], [3, 5], [4, 5], [4, 6], [5, 6]] },
    '|': { data: [[3, 0], [4, 0], [3, 1], [4, 1], [3, 2], [4, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [3, 6], [4, 6]] },
    '}': { data: [[1, 0], [2, 0], [2, 1], [3, 1], [2, 2], [3, 2], [3, 3], [4, 3], [2, 4], [3, 4], [2, 5], [3, 5], [1, 6], [2, 6]] },
    '~': { data: [[1, 2], [2, 2], [3, 2], [0, 3], [2, 3], [3, 3], [4, 3], [6, 3], [3, 4], [4, 4], [5, 4]] },
    '': { data: [[3, 0], [4, 0], [5, 0], [2, 1], [3, 1], [5, 1], [6, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [1, 3], [2, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [2, 5], [3, 5], [5, 5], [6, 5], [3, 6], [4, 6], [5, 6]] },
    '': { data: [[1, 0], [2, 0], [6, 0], [0, 1], [2, 1], [5, 1], [0, 2], [1, 2], [4, 2], [3, 3], [2, 4], [4, 4], [5, 4], [6, 4], [7, 4], [1, 5], [3, 5], [5, 5], [7, 5], [0, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    '': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [0, 1], [1, 1], [3, 1], [4, 1], [0, 2], [1, 2], [3, 2], [4, 2], [0, 3], [1, 3], [3, 3], [4, 3], [5, 3], [6, 3], [0, 4], [1, 4], [3, 4], [4, 4], [0, 5], [1, 5], [3, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    '': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [2, 1], [4, 1], [5, 1], [6, 1], [2, 2], [4, 2], [6, 2], [2, 3], [4, 3], [6, 3]] },
    '': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [3, 3], [5, 3], [6, 3], [0, 4], [1, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [3, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    '¡': { data: [[3, 0], [4, 0], [3, 2], [4, 2], [3, 3], [4, 3], [2, 4], [3, 4], [4, 4], [2, 5], [3, 5], [4, 5], [2, 6], [3, 6], [4, 6]] },
    '¢': { data: [[3, 0], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [0, 2], [1, 2], [3, 2], [5, 2], [6, 2], [0, 3], [1, 3], [3, 3], [0, 4], [1, 4], [3, 4], [5, 4], [6, 4], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [3, 6]] },
    '£': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [1, 4], [2, 4], [1, 5], [2, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    '¤': { data: [[1, 1], [3, 1], [4, 1], [6, 1], [2, 2], [5, 2], [2, 3], [5, 3], [2, 4], [5, 4], [1, 5], [3, 5], [4, 5], [6, 5]] },
    '¥': { data: [[1, 0], [2, 0], [5, 0], [6, 0], [1, 1], [2, 1], [5, 1], [6, 1], [2, 2], [3, 2], [4, 2], [5, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [3, 4], [4, 4], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [3, 6], [4, 6]] },
    '§': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [3, 2], [4, 2], [2, 3], [5, 3], [3, 4], [4, 4], [5, 4], [6, 4], [1, 5], [2, 5], [5, 5], [6, 5], [2, 6], [3, 6], [4, 6], [5, 6]] },
    '©': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [6, 1], [0, 2], [3, 2], [4, 2], [7, 2], [0, 3], [2, 3], [7, 3], [0, 4], [2, 4], [7, 4], [0, 5], [3, 5], [4, 5], [7, 5], [1, 6], [6, 6], [2, 7], [3, 7], [4, 7], [5, 7]] },
    '®': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [6, 1], [0, 2], [2, 2], [3, 2], [4, 2], [7, 2], [0, 3], [2, 3], [5, 3], [7, 3], [0, 4], [2, 4], [3, 4], [4, 4], [7, 4], [0, 5], [2, 5], [5, 5], [7, 5], [1, 6], [6, 6], [2, 7], [3, 7], [4, 7], [5, 7]] },
    'µ': { data: [[0, 2], [1, 2], [4, 2], [5, 2], [0, 3], [1, 3], [4, 3], [5, 3], [0, 4], [1, 4], [4, 4], [5, 4], [0, 5], [1, 5], [4, 5], [5, 5], [0, 6], [1, 6], [2, 6], [3, 6], [5, 6], [6, 6], [0, 7], [1, 7]] },
    '¶': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [1, 1], [2, 1], [4, 1], [6, 1], [1, 2], [4, 2], [6, 2], [1, 3], [2, 3], [4, 3], [6, 3], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [4, 5], [6, 5], [4, 6], [6, 6]] },
    '¿': { data: [[2, 0], [3, 0], [4, 0], [2, 2], [3, 2], [4, 2], [1, 3], [2, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'À': { data: [[2, 0], [3, 1], [2, 2], [3, 2], [4, 2], [1, 3], [2, 3], [4, 3], [5, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [0, 6], [1, 6], [5, 6], [6, 6]] },
    'Á': { data: [[4, 0], [3, 1], [2, 2], [3, 2], [4, 2], [1, 3], [2, 3], [4, 3], [5, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [0, 6], [1, 6], [5, 6], [6, 6]] },
    'Â': { data: [[2, 0], [3, 0], [4, 0], [1, 1], [2, 1], [4, 1], [5, 1], [2, 2], [3, 2], [4, 2], [1, 3], [2, 3], [4, 3], [5, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [0, 6], [1, 6], [5, 6], [6, 6]] },
    'Ã': { data: [[2, 0], [3, 0], [5, 0], [1, 1], [3, 1], [4, 1], [2, 2], [3, 2], [4, 2], [1, 3], [2, 3], [4, 3], [5, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [0, 6], [1, 6], [5, 6], [6, 6]] },
    'Ä': { data: [[1, 0], [2, 0], [4, 0], [5, 0], [2, 2], [3, 2], [4, 2], [1, 3], [2, 3], [4, 3], [5, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [0, 6], [1, 6], [5, 6], [6, 6]] },
    'Å': { data: [[3, 0], [2, 1], [4, 1], [2, 2], [3, 2], [4, 2], [1, 3], [2, 3], [4, 3], [5, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [0, 6], [1, 6], [5, 6], [6, 6]] },
    'Æ': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [1, 1], [2, 1], [3, 1], [4, 1], [0, 2], [1, 2], [3, 2], [4, 2], [0, 3], [1, 3], [3, 3], [4, 3], [5, 3], [6, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [0, 5], [1, 5], [3, 5], [4, 5], [0, 6], [1, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'Ç': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [0, 2], [1, 2], [0, 3], [1, 3], [1, 4], [2, 4], [5, 4], [6, 4], [2, 5], [3, 5], [4, 5], [5, 5], [4, 6], [2, 7], [3, 7]] },
    'È': { data: [[2, 0], [3, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [0, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [0, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'É': { data: [[4, 0], [3, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [0, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [0, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'Ê': { data: [[2, 0], [3, 0], [4, 0], [1, 1], [2, 1], [4, 1], [5, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [0, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [0, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'Ë': { data: [[1, 0], [2, 0], [4, 0], [5, 0], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [0, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [0, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'Ì': { data: [[3, 0], [4, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'Í': { data: [[4, 0], [3, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'Î': { data: [[3, 0], [4, 0], [2, 1], [3, 1], [4, 1], [5, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'Ï': { data: [[1, 0], [2, 0], [5, 0], [6, 0], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'Ñ': { data: [[2, 0], [3, 0], [5, 0], [1, 1], [3, 1], [4, 1], [0, 2], [1, 2], [2, 2], [5, 2], [6, 2], [0, 3], [1, 3], [2, 3], [3, 3], [5, 3], [6, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [3, 5], [4, 5], [5, 5], [6, 5], [0, 6], [1, 6], [4, 6], [5, 6], [6, 6]] },
    'Ò': { data: [[2, 0], [3, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'Ó': { data: [[4, 0], [3, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'Ô': { data: [[2, 0], [3, 0], [4, 0], [1, 1], [2, 1], [4, 1], [5, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'Õ': { data: [[2, 0], [3, 0], [5, 0], [1, 1], [3, 1], [4, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'Ö': { data: [[1, 0], [2, 0], [4, 0], [5, 0], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'Ø': { data: [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [0, 1], [1, 1], [5, 1], [6, 1], [0, 2], [1, 2], [4, 2], [5, 2], [6, 2], [0, 3], [1, 3], [3, 3], [5, 3], [6, 3], [0, 4], [1, 4], [2, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'Ù': { data: [[2, 0], [3, 1], [0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'Ú': { data: [[4, 0], [3, 1], [0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'Û': { data: [[2, 0], [3, 0], [4, 0], [1, 1], [2, 1], [4, 1], [5, 1], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'Ü': { data: [[1, 0], [2, 0], [4, 0], [5, 0], [0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'ß': { data: [[2, 0], [3, 0], [4, 0], [5, 0], [1, 1], [2, 1], [5, 1], [6, 1], [1, 2], [2, 2], [5, 2], [6, 2], [1, 3], [2, 3], [4, 3], [5, 3], [1, 4], [2, 4], [5, 4], [6, 4], [1, 5], [2, 5], [3, 5], [5, 5], [6, 5], [1, 6], [2, 6], [4, 6], [5, 6]] },
    'à': { data: [[2, 0], [3, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [5, 3], [6, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'á': { data: [[4, 0], [3, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [5, 3], [6, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'â': { data: [[2, 0], [3, 0], [4, 0], [1, 1], [2, 1], [4, 1], [5, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [5, 3], [6, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'ã': { data: [[2, 0], [3, 0], [5, 0], [1, 1], [3, 1], [4, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [5, 3], [6, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'ä': { data: [[1, 0], [2, 0], [4, 0], [5, 0], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [5, 3], [6, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'å': { data: [[3, 0], [2, 1], [4, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [5, 3], [6, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'æ': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [3, 3], [5, 3], [6, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [3, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'ç': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [0, 3], [1, 3], [0, 4], [1, 4], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [4, 6], [2, 7], [3, 7]] },
    'è': { data: [[2, 0], [3, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'é': { data: [[4, 0], [3, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'ê': { data: [[2, 0], [3, 0], [4, 0], [1, 1], [2, 1], [4, 1], [5, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'ë': { data: [[1, 0], [2, 0], [4, 0], [5, 0], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [0, 5], [1, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'ì': { data: [[2, 0], [3, 1], [2, 3], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'í': { data: [[4, 0], [3, 1], [2, 3], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'î': { data: [[2, 0], [3, 0], [4, 0], [1, 1], [2, 1], [4, 1], [5, 1], [2, 3], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'ï': { data: [[1, 0], [2, 0], [4, 0], [5, 0], [2, 2], [3, 2], [4, 2], [3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'ñ': { data: [[2, 0], [3, 0], [5, 0], [1, 1], [3, 1], [4, 1], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [0, 6], [1, 6], [5, 6], [6, 6]] },
    'ò': { data: [[2, 0], [3, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'ó': { data: [[4, 0], [3, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'ô': { data: [[2, 0], [3, 0], [4, 0], [1, 1], [2, 1], [4, 1], [5, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'õ': { data: [[2, 0], [3, 0], [5, 0], [1, 1], [3, 1], [4, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'ö': { data: [[1, 0], [2, 0], [4, 0], [5, 0], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    '÷': { data: [[3, 1], [4, 1], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3], [3, 5], [4, 5]] },
    'ø': { data: [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [0, 3], [1, 3], [4, 3], [5, 3], [6, 3], [0, 4], [1, 4], [3, 4], [5, 4], [6, 4], [0, 5], [1, 5], [2, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6]] },
    'ù': { data: [[2, 0], [3, 1], [0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'ú': { data: [[4, 0], [3, 1], [0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'û': { data: [[2, 0], [3, 0], [4, 0], [1, 1], [2, 1], [4, 1], [5, 1], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] },
    'ü': { data: [[1, 0], [2, 0], [4, 0], [5, 0], [0, 2], [1, 2], [5, 2], [6, 2], [0, 3], [1, 3], [5, 3], [6, 3], [0, 4], [1, 4], [5, 4], [6, 4], [0, 5], [1, 5], [5, 5], [6, 5], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6]] }
};


/***/ }),

/***/ "./src/libs/Body2d.ts":
/*!****************************!*\
  !*** ./src/libs/Body2d.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Body2d": () => (/* binding */ Body2d),
/* harmony export */   "Edge2d": () => (/* binding */ Edge2d),
/* harmony export */   "Point2d": () => (/* binding */ Point2d)
/* harmony export */ });
/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Color */ "./src/libs/Color.ts");
/* harmony import */ var _Geometry2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Geometry2d */ "./src/libs/Geometry2d.ts");


class Point2d extends _Geometry2d__WEBPACK_IMPORTED_MODULE_1__.Vector2d {
    index = 0;
    color = undefined;
    init(p) {
        this.initXY(p.x, p.y);
        this.index = p.index;
        this.color = p.color && new _Color__WEBPACK_IMPORTED_MODULE_0__.Color().init(p.color);
        return this;
    }
    initXYC(x, y, color) {
        this.initXY(x, y);
        this.index = 0;
        this.color = color;
        return this;
    }
}
class Edge2d {
    index = 0;
    points = [];
    color = new _Color__WEBPACK_IMPORTED_MODULE_0__.Color();
    init(e) {
        this.index = 0;
        this.points = [new Point2d().init(e.points[0]), new Point2d().init(e.points[1])];
        this.color = new _Color__WEBPACK_IMPORTED_MODULE_0__.Color().init(e.color);
        return this;
    }
    initPP(p0, p1, color) {
        this.index = 0;
        this.points = [p0, p1];
        this.color = color;
        return this;
    }
}
class Body2d {
    points = [];
    pointNormals = [];
    edges = [];
    edgeNormals = [];
    radius = 0;
    init(b) {
        this.points = b.points.map(p => new Point2d().init(p));
        this.pointNormals = b.pointNormals.map(pn => new _Geometry2d__WEBPACK_IMPORTED_MODULE_1__.Vector2d().init(pn));
        this.edges = b.edges.map(e => new Edge2d().init(e));
        this.edgeNormals = b.edgeNormals.map(en => new _Geometry2d__WEBPACK_IMPORTED_MODULE_1__.Vector2d().init(en));
        this.radius = b.radius;
        return this;
    }
    addPoint(point) {
        point.index = this.points.length;
        this.points.push(point);
        this.pointNormals.push(new _Geometry2d__WEBPACK_IMPORTED_MODULE_1__.Vector2d());
        return this;
    }
    addEdge(edge) {
        edge.index = this.edges.length;
        this.edges.push(edge);
        this.edgeNormals.push(new _Geometry2d__WEBPACK_IMPORTED_MODULE_1__.Vector2d());
        return this;
    }
    edgeExists(p0, p1) {
        return this.edges.some(e => (e.points[0].index === p0.index && e.points[1].index === p1.index) || (e.points[0].index === p1.index && e.points[1].index === p0.index));
    }
    calcNormals() {
        if (this.points.length > 0) {
            const center = new _Geometry2d__WEBPACK_IMPORTED_MODULE_1__.Vector2d();
            this.points.forEach(p => center.add(p));
            center.factor(1 / this.points.length);
            this.radius = 0;
            for (const p of this.points) {
                p.sub(center);
                if (p.abs() > this.radius)
                    this.radius = p.abs();
            }
        }
        if (this.edges.length > 0) {
            for (const e of this.edges) {
                this.edgeNormals[e.index].initXY(e.points[1].y - e.points[0].y, e.points[0].x - e.points[1].x).normalize();
            }
            for (const p of this.points) {
                for (const e of this.edges) {
                    if (p.index === e.points[0].index || p.index === e.points[1].index)
                        this.pointNormals[p.index].add(this.edgeNormals[e.index]);
                }
                this.pointNormals[p.index].normalize();
            }
        }
        return this;
    }
}


/***/ }),

/***/ "./src/libs/Canvas.ts":
/*!****************************!*\
  !*** ./src/libs/Canvas.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Canvas": () => (/* binding */ Canvas),
/* harmony export */   "Canvas2d": () => (/* binding */ Canvas2d),
/* harmony export */   "PixelCanvas": () => (/* binding */ PixelCanvas),
/* harmony export */   "WebglCanvas": () => (/* binding */ WebglCanvas)
/* harmony export */ });
/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Color */ "./src/libs/Color.ts");

class Canvas {
    canvas;
    context;
    setContext;
    setResWidth = 0;
    setResHeight = 0;
    aspectRatio = 0;
    fitToScreen = false;
    width = 0;
    height = 0;
    styleWidth = 0;
    styleHeight = 0;
    resizeCallbacks = [];
    constructor(canvasId, context) {
        this.canvas = document.getElementById(canvasId);
        this.setContext = context;
        this.context = this.canvas.getContext(this.setContext);
        this.resize = this.resize.bind(this);
        window.addEventListener('resize', this.resize, false);
        matchMedia(`(resolution: ${window.devicePixelRatio}dppx)`).addEventListener('change', this.resize, { once: true });
    }
    setResolution(width, height) {
        this.setResWidth = Math.max(Math.round(width), 1);
        this.setResHeight = Math.max(Math.round(height), 1);
        this.aspectRatio = 0;
        this.resize();
        return this;
    }
    setAspectRatio(aspectRatio) {
        this.setResWidth = 0;
        this.setResHeight = 0;
        this.aspectRatio = aspectRatio;
        this.resize();
        return this;
    }
    setUnrestricted() {
        this.setResWidth = 0;
        this.setResHeight = 0;
        this.aspectRatio = 0;
        this.resize();
        return this;
    }
    setFitToScreen(fitToScreen) {
        this.fitToScreen = fitToScreen;
        this.resize();
        return this;
    }
    resize() {
        const pixelRatio = window.devicePixelRatio;
        const innerWidth = window.innerWidth;
        const innerHeight = window.innerHeight;
        let width, height;
        if (this.setResWidth && this.setResHeight) {
            width = this.setResWidth;
            height = this.setResHeight;
        }
        else if (this.aspectRatio) {
            if (this.aspectRatio > innerWidth / innerHeight) {
                width = Math.floor(innerWidth * pixelRatio);
                height = Math.floor(innerWidth * pixelRatio / this.aspectRatio);
            }
            else {
                width = Math.floor(innerHeight * pixelRatio * this.aspectRatio);
                height = Math.floor(innerHeight * pixelRatio);
            }
        }
        else {
            width = Math.floor(innerWidth * pixelRatio);
            height = Math.floor(innerHeight * pixelRatio);
        }
        let styleWidth, styleHeight;
        if (this.fitToScreen) {
            const aspectRatio = width / height;
            if (aspectRatio > innerWidth / innerHeight) {
                styleWidth = innerWidth;
                styleHeight = Math.floor(innerWidth / aspectRatio);
            }
            else {
                styleWidth = Math.floor(innerHeight * aspectRatio);
                styleHeight = innerHeight;
            }
        }
        else {
            styleWidth = Math.floor(width / pixelRatio);
            styleHeight = Math.floor(height / pixelRatio);
        }
        const top = Math.floor((innerHeight - styleHeight) / 2);
        const left = Math.floor((innerWidth - styleWidth) / 2);
        this.canvas.width = width;
        this.canvas.height = height;
        this.canvas.style.width = styleWidth + 'px';
        this.canvas.style.height = styleHeight + 'px';
        this.canvas.style.top = top + 'px';
        this.canvas.style.left = left + 'px';
        this.width = width;
        this.height = height;
        this.styleWidth = styleWidth;
        this.styleHeight = styleHeight;
        this.context = this.canvas.getContext(this.setContext);
        for (const callback of this.resizeCallbacks) {
            callback(this);
        }
        return this;
    }
}
class Canvas2d extends Canvas {
    imageData;
    constructor(canvasId) {
        super(canvasId, '2d');
        this.imageData = this.context.createImageData(this.canvas.width, this.canvas.height);
        this.resize();
    }
    createImageData() {
        this.imageData = this.context.createImageData(this.canvas.width, this.canvas.height);
        return this;
    }
    putImageData() {
        this.context.putImageData(this.imageData, 0, 0);
        return this;
    }
    clear(color) {
        if (color.a === 0) {
            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        }
        else {
            this.context.fillStyle = color.rgba();
            this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
        }
        return this;
    }
}
class PixelCanvas extends Canvas {
    imageData;
    zBuffer = [];
    setResPixelSize = 1;
    pixelSize = 1;
    constructor(canvasId) {
        super(canvasId, '2d');
        this.context.scale(this.pixelSize, this.pixelSize);
        this.context.imageSmoothingEnabled = false;
        this.imageData = this.context.createImageData(this.canvas.width, this.canvas.height);
        this.zBuffer = new Array(this.width * this.height).fill(0);
        this.resize();
    }
    createImageData() {
        this.imageData = this.context.createImageData(this.canvas.width, this.canvas.height);
        this.zBuffer = new Array(this.width * this.height).fill(0);
        return this;
    }
    putImageData() {
        this.context.putImageData(this.imageData, 0, 0);
        return this;
    }
    setPixelSize(pixelSize) {
        this.setResPixelSize = pixelSize === 'optimal' ? pixelSize : Math.max(Math.round(pixelSize), 1);
        this.resize();
        return this;
    }
    resize() {
        const pixelRatio = window.devicePixelRatio;
        const innerWidth = window.innerWidth;
        const innerHeight = window.innerHeight;
        let width, height;
        if (this.setResPixelSize === 'optimal') {
            if (this.setResWidth && this.setResHeight) {
                if (this.setResWidth / this.setResHeight > innerWidth / innerHeight) {
                    this.pixelSize = Math.max(Math.floor(innerWidth * pixelRatio / this.setResWidth), 1);
                }
                else {
                    this.pixelSize = Math.max(Math.floor(innerHeight * pixelRatio / this.setResHeight), 1);
                }
            }
            else {
                throw new Error('Pixelsize "optimal" is only allowed in combination with setResolution.');
            }
        }
        else {
            this.pixelSize = this.setResPixelSize;
        }
        if (this.setResWidth && this.setResHeight) {
            width = this.setResWidth * this.pixelSize;
            height = this.setResHeight * this.pixelSize;
        }
        else if (this.aspectRatio) {
            if (this.aspectRatio > innerWidth / innerHeight) {
                width = Math.floor(innerWidth * pixelRatio / this.pixelSize) * this.pixelSize;
                height = Math.floor(innerWidth * pixelRatio / this.aspectRatio / this.pixelSize) * this.pixelSize;
            }
            else {
                width = Math.floor(innerHeight * pixelRatio * this.aspectRatio / this.pixelSize) * this.pixelSize;
                height = Math.floor(innerHeight * pixelRatio / this.pixelSize) * this.pixelSize;
            }
        }
        else {
            width = Math.floor(innerWidth * pixelRatio / this.pixelSize) * this.pixelSize;
            height = Math.floor(innerHeight * pixelRatio / this.pixelSize) * this.pixelSize;
        }
        let styleWidth, styleHeight;
        if (this.fitToScreen) {
            const aspectRatio = width / height;
            if (aspectRatio > innerWidth / innerHeight) {
                styleWidth = innerWidth;
                styleHeight = Math.floor(innerWidth / aspectRatio);
            }
            else {
                styleWidth = Math.floor(innerHeight * aspectRatio);
                styleHeight = innerHeight;
            }
        }
        else {
            styleWidth = Math.floor(width / pixelRatio);
            styleHeight = Math.floor(height / pixelRatio);
        }
        const top = Math.floor((innerHeight - styleHeight) / 2);
        const left = Math.floor((innerWidth - styleWidth) / 2);
        this.canvas.width = width;
        this.canvas.height = height;
        this.canvas.style.width = styleWidth + 'px';
        this.canvas.style.height = styleHeight + 'px';
        this.canvas.style.top = top + 'px';
        this.canvas.style.left = left + 'px';
        this.width = Math.floor(width / this.pixelSize);
        this.height = Math.floor(height / this.pixelSize);
        this.context = this.canvas.getContext('2d');
        this.context.scale(this.pixelSize, this.pixelSize);
        this.context.imageSmoothingEnabled = false;
        this.imageData = this.context.createImageData(this.canvas.width, this.canvas.height);
        this.zBuffer = new Array(this.width * this.height).fill(0);
        for (const callback of this.resizeCallbacks) {
            callback(this);
        }
        return this;
    }
    clear(color) {
        const data = new Uint32Array(this.imageData.data.buffer);
        const color32 = color.uint32();
        for (let i = 0; i < data.length; i++)
            data[i] = color32;
        return this;
    }
    pixel(x, y, color, clip = false) {
        if (clip) {
            if ((x < 0) || (x > this.width - 1) || (y < 0) || (y > this.height - 1))
                return this;
        }
        const data = new Uint32Array(this.imageData.data.buffer);
        let i = this.pixelSize * (x + y * this.pixelSize * this.width);
        const ldif = this.pixelSize * (this.width - 1);
        const color32 = color.a === 255 ? color.uint32() : _Color__WEBPACK_IMPORTED_MODULE_0__.Color.fromUint32(data[i]).mix(color, color.a / 255).uint32();
        for (let j = 0; j < this.pixelSize; j++, i += ldif) {
            for (let k = 0; k < this.pixelSize; k++, i++)
                data[i] = color32;
        }
        return this;
    }
    pixel3d(x, y, z, color, clip = false) {
        if (clip) {
            if ((x < 0) || (x > this.width - 1) || (y < 0) || (y > this.height - 1))
                return this;
        }
        if (x < 0)
            x = 0;
        else if (x > this.width - 1)
            x = this.width - 1;
        if (y < 0)
            y = 0;
        else if (y > this.height - 1)
            y = this.height - 1;
        const i = x + y * this.width;
        if (z < this.zBuffer[i]) {
            this.zBuffer[i] = z;
            this.pixel(x, y, color);
        }
        return this;
    }
    horLine(x1, x2, y, color, clip = false) {
        if (x1 > x2)
            [x1, x2] = [x2, x1];
        if (clip) {
            if ((x2 < 0) || (x1 > this.width - 1) || (y < 0) || (y > this.height - 1))
                return this;
            if (x1 < 0)
                x1 = 0;
            if (x2 > this.width - 1)
                x2 = this.width - 1;
        }
        const width = x2 - x1 + 1;
        for (let j = 0, x = x1; j < width; j++, x++) {
            this.pixel(x, y, color, false);
        }
        return this;
    }
    horLine3d(x1, x2, y, iz, diz, cz, dcz, color) {
        const width = x2 - x1 + 1;
        for (let j = 0, x = x1; j < width; j++, x++, iz += diz, cz += dcz) {
            this.pixel3d(x, y, 1 / iz, color.shadow(cz / iz), false);
        }
        return this;
    }
    horLineTex3d(x1, x2, y, iz, diz, cz, dcz, uz, duz, vz, dvz, texture) {
        const width = x2 - x1 + 1;
        for (let j = 0, x = x1; j < width; j++, x++, iz += diz, cz += dcz, uz += duz, vz += dvz) {
            let u = uz / iz;
            if (u < 0 || u > 1)
                u -= Math.floor(u);
            let v = vz / iz;
            if (v < 0 || v > 1)
                v -= Math.floor(v);
            const color = _Color__WEBPACK_IMPORTED_MODULE_0__.Color.fromUint32(texture.data[Math.round(u * (texture.height - 1)) * texture.width + Math.round(v * (texture.width - 1))]);
            this.pixel3d(x, y, 1 / iz, color.shadow(cz / iz), false);
        }
        return this;
    }
    vertLine(x, y1, y2, color, clip = false) {
        if (y1 > y2)
            [y1, y2] = [y2, y1];
        if (clip) {
            if ((x < 0) || (x > this.width - 1) || (y2 < 0) || (y1 > this.height - 1))
                return this;
            if (y1 < 0)
                y1 = 0;
            if (y2 > this.height - 1)
                y2 = this.height - 1;
        }
        const height = y2 - y1 + 1;
        for (let j = 0, y = y1; j < height; j++, y++) {
            this.pixel(x, y, color, false);
        }
        return this;
    }
}
class WebglCanvas extends Canvas {
    canvas2d;
    constructor(canvasId, context, canvas2dId) {
        super(canvasId, context);
        this.resize();
        this.canvas2d = new Canvas2d(canvas2dId);
    }
    setResolution(width, height) {
        super.setResolution(width, height);
        this.canvas2d.setResolution(width, height);
        return this;
    }
    setAspectRatio(aspectRatio) {
        super.setAspectRatio(aspectRatio);
        this.canvas2d.setAspectRatio(aspectRatio);
        return this;
    }
    setUnrestricted() {
        super.setUnrestricted();
        this.canvas2d.setUnrestricted();
        return this;
    }
    setFitToScreen(fitToScreen) {
        super.setFitToScreen(fitToScreen);
        this.canvas2d.setFitToScreen(fitToScreen);
        return this;
    }
    clear() {
        this.context.clearColor(0, 0, 0, 1);
        this.context.clear(this.context.COLOR_BUFFER_BIT);
        this.canvas2d.clear(_Color__WEBPACK_IMPORTED_MODULE_0__.Color.transparentBlack);
        return this;
    }
}


/***/ }),

/***/ "./src/libs/Color.ts":
/*!***************************!*\
  !*** ./src/libs/Color.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Color": () => (/* binding */ Color)
/* harmony export */ });
class Color {
    r = 0;
    g = 0;
    b = 0;
    a = 0;
    init(color) {
        this.r = color.r;
        this.g = color.g;
        this.b = color.b;
        this.a = color.a;
        return this;
    }
    initRgba(r, g, b, a = 255) {
        this.r = Math.max(Math.min(Math.round(r), 255), 0);
        this.g = Math.max(Math.min(Math.round(g), 255), 0);
        this.b = Math.max(Math.min(Math.round(b), 255), 0);
        this.a = Math.max(Math.min(Math.round(a), 255), 0);
        return this;
    }
    static color(r, g, b, a = 255) {
        return new Color().initRgba(r, g, b, a);
    }
    static greyScaleColor(c, a = 255) {
        return new Color().initRgba(c, c, c, a);
    }
    static color1(r, g, b, a = 1) {
        return new Color().initRgba(255 * r, 255 * g, 255 * b, 255 * a);
    }
    static greyScaleColor1(c, a = 1) {
        return new Color().initRgba(255 * c, 255 * c, 255 * c, 255 * a);
    }
    static fromUint32(color) {
        return new Color().initRgba(color & 255, (color >>> 8) & 255, (color >>> 16) & 255, color >>> 24);
    }
    static black = new Color().initRgba(0, 0, 0);
    static white = new Color().initRgba(255, 255, 255);
    static red = new Color().initRgba(255, 0, 0);
    static green = new Color().initRgba(0, 255, 0);
    static blue = new Color().initRgba(0, 0, 255);
    static transparentBlack = new Color().initRgba(0, 0, 0, 0);
    uint32() {
        return ((this.a << 24) | (this.b << 16) | (this.g << 8) | this.r);
    }
    rgba() {
        return `rgba(${this.r},${this.g},${this.b},${this.a / 255})`;
    }
    mix(color, f) {
        return new Color().initRgba((1 - f) * this.r + f * color.r, (1 - f) * this.g + f * color.g, (1 - f) * this.b + f * color.b);
    }
    shadow(sh) {
        const addShadow = (c, sh) => {
            const result = c + sh;
            return result > 255 ? 255 : result < 0 ? 0 : result;
        };
        return new Color().initRgba(addShadow(this.r, sh), addShadow(this.g, sh), addShadow(this.b, sh));
    }
}


/***/ }),

/***/ "./src/libs/Geometry2d.ts":
/*!********************************!*\
  !*** ./src/libs/Geometry2d.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Body2d": () => (/* binding */ Body2d),
/* harmony export */   "Line2d": () => (/* binding */ Line2d),
/* harmony export */   "Matrix2d": () => (/* binding */ Matrix2d),
/* harmony export */   "Point2d": () => (/* binding */ Point2d),
/* harmony export */   "Segment2d": () => (/* binding */ Segment2d),
/* harmony export */   "Vector2d": () => (/* binding */ Vector2d)
/* harmony export */ });
class Vector2d {
    x = 0;
    y = 0;
    z = 1;
    init(v) {
        this.x = v.x;
        this.y = v.y;
        this.z = v.z;
        return this;
    }
    initXY(x, y) {
        this.x = x;
        this.y = y;
        this.z = 1;
        return this;
    }
    normalize() {
        return this.factor(1 / this.abs());
    }
    abs() {
        return Math.sqrt(this.x ** 2 + this.y ** 2);
    }
    add(v) {
        this.x += v.x;
        this.y += v.y;
        return this;
    }
    sub(v) {
        this.x -= v.x;
        this.y -= v.y;
        return this;
    }
    factor(f) {
        this.x *= f;
        this.y *= f;
        return this;
    }
    dot(v) {
        return this.x * v.x + this.y * v.y;
    }
    mulLeft(m) {
        const x = m.m[0][0] * this.x + m.m[0][1] * this.y + m.m[0][2] * this.z;
        const y = m.m[1][0] * this.x + m.m[1][1] * this.y + m.m[1][2] * this.z;
        const z = m.m[2][0] * this.x + m.m[2][1] * this.y + m.m[2][2] * this.z;
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }
    mulRight(m) {
        const x = this.x * m.m[0][0] + this.y * m.m[1][0] + this.z * m.m[2][0];
        const y = this.x * m.m[0][1] + this.y * m.m[1][1] + this.z * m.m[2][1];
        const z = this.x * m.m[0][2] + this.y * m.m[1][2] + this.z * m.m[2][2];
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }
}
class Matrix2d {
    m = [];
    constructor() {
        this.initEmpty();
    }
    init(m) {
        this.m = [[m.m[0][0], m.m[0][1], m.m[0][2]], [m.m[1][0], m.m[1][1], m.m[1][2]], [m.m[2][0], m.m[2][1], m.m[2][2]]];
        return this;
    }
    initEmpty() {
        this.m = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];
        return this;
    }
    initUnity() {
        this.m = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
        return this;
    }
    initRot(phi) {
        this.m = [[Math.cos(phi), -Math.sin(phi), 0], [Math.sin(phi), Math.cos(phi), 0], [0, 0, 1]];
        return this;
    }
    initTrans(tx, ty) {
        this.m = [[1, 0, tx], [0, 1, ty], [0, 0, 1]];
        return this;
    }
    initScale(sx, sy) {
        this.m = [[sx, 0, 0], [0, sy, 0], [0, 0, 1]];
        return this;
    }
    mulLeft(m) {
        const t = [];
        t[0][0] = m.m[0][0] * this.m[0][0] + m.m[0][1] * this.m[1][0] + m.m[0][2] * this.m[2][0];
        t[0][1] = m.m[0][0] * this.m[0][1] + m.m[0][1] * this.m[1][1] + m.m[0][2] * this.m[2][1];
        t[0][2] = m.m[0][0] * this.m[0][2] + m.m[0][1] * this.m[1][2] + m.m[0][2] * this.m[2][2];
        t[1][0] = m.m[1][0] * this.m[0][0] + m.m[1][1] * this.m[1][0] + m.m[1][2] * this.m[2][0];
        t[1][1] = m.m[1][0] * this.m[0][1] + m.m[1][1] * this.m[1][1] + m.m[1][2] * this.m[2][1];
        t[1][2] = m.m[1][0] * this.m[0][2] + m.m[1][1] * this.m[1][2] + m.m[1][2] * this.m[2][2];
        t[2][0] = m.m[2][0] * this.m[0][0] + m.m[2][1] * this.m[1][0] + m.m[2][2] * this.m[2][0];
        t[2][1] = m.m[2][0] * this.m[0][1] + m.m[2][1] * this.m[1][1] + m.m[2][2] * this.m[2][1];
        t[2][2] = m.m[2][0] * this.m[0][2] + m.m[2][1] * this.m[1][2] + m.m[2][2] * this.m[2][2];
        this.m = t;
        return this;
    }
    mulRight(m) {
        const t = [];
        t[0][0] = this.m[0][0] * m.m[0][0] + this.m[0][1] * m.m[1][0] + this.m[0][2] * m.m[2][0];
        t[0][1] = this.m[0][0] * m.m[0][1] + this.m[0][1] * m.m[1][1] + this.m[0][2] * m.m[2][1];
        t[0][2] = this.m[0][0] * m.m[0][2] + this.m[0][1] * m.m[1][2] + this.m[0][2] * m.m[2][2];
        t[1][0] = this.m[1][0] * m.m[0][0] + this.m[1][1] * m.m[1][0] + this.m[1][2] * m.m[2][0];
        t[1][1] = this.m[1][0] * m.m[0][1] + this.m[1][1] * m.m[1][1] + this.m[1][2] * m.m[2][1];
        t[1][2] = this.m[1][0] * m.m[0][2] + this.m[1][1] * m.m[1][2] + this.m[1][2] * m.m[2][2];
        t[2][0] = this.m[2][0] * m.m[0][0] + this.m[2][1] * m.m[1][0] + this.m[2][2] * m.m[2][0];
        t[2][1] = this.m[2][0] * m.m[0][1] + this.m[2][1] * m.m[1][1] + this.m[2][2] * m.m[2][1];
        t[2][2] = this.m[2][0] * m.m[0][2] + this.m[2][1] * m.m[1][2] + this.m[2][2] * m.m[2][2];
        this.m = t;
        return this;
    }
}
class Point2d extends Vector2d {
    pointDistance(p) {
        return distancePointPoint(this, p);
    }
    lineDistance(l) {
        return distancePointLine(this, l);
    }
    segmentDistance(s) {
        return distancePointSegment(this, s);
    }
    reflect(l) {
        return new Point2d().initXY((this.x * (l.b ** 2 - l.a ** 2) - 2 * l.a * l.b * this.y - 2 * l.a * l.c) / (l.a ** 2 + l.b ** 2), (this.y * (l.a ** 2 - l.b ** 2) - 2 * l.a * l.b * this.x - 2 * l.b * l.c) / (l.a ** 2 + l.b ** 2));
    }
}
class Line2d {
    a = 0;
    b = 0;
    c = 0;
    init(l) {
        this.a = l.a;
        this.b = l.b;
        this.c = l.c;
        return this.normalize();
    }
    initXY(x1, y1, x2, y2) {
        this.a = y2 - y1;
        this.b = x1 - x2;
        this.c = x2 * y1 - x1 * y2;
        return this.normalize();
    }
    initABC(a, b, c) {
        this.a = a;
        this.b = b;
        this.c = c;
        return this.normalize();
    }
    initMN(m, n) {
        this.a = m;
        this.b = -1;
        this.c = n;
        return this.normalize();
    }
    initXYAlpha(x, y, alpha) {
        this.a = Math.sin(alpha);
        this.b = -Math.cos(alpha);
        this.c = y * Math.cos(alpha) - x * Math.sin(alpha);
        return this.normalize();
    }
    normal() {
        return new Vector2d().initXY(this.a, this.b);
    }
    normalize() {
        const abs = this.normal().abs();
        if (abs !== 0 && abs !== 1) {
            this.a /= abs;
            this.b /= abs;
            this.c /= abs;
        }
        return this;
    }
    intersect(l) {
        if ((this.a * l.b - l.a * this.b) == 0) {
            if (((l.a * this.c - this.a * l.c) == 0) && ((this.b * l.c - l.b * this.c) == 0)) {
                return;
            }
            else {
                return;
            }
        }
        else {
            return new Point2d().initXY((this.b * l.c - l.b * this.c) / (this.a * l.b - l.a * this.b), (l.a * this.c - this.a * l.c) / (this.a * l.b - l.a * this.b));
        }
    }
    angle(l) {
        return Math.acos(Math.abs(this.a * l.a + this.b * l.b) / Math.sqrt((this.a ** 2 + this.b ** 2) * (l.a ** 2 + l.b ** 2)));
    }
    perpendicular(p) {
        return new Line2d().initABC(this.b, -this.a, this.a * p.y - this.b * p.x);
    }
    reflect(l) {
        if (l.a * this.b - this.a * l.b === 0) {
            return;
        }
        const ps = this.intersect(l);
        const alpha = -Math.atan(l.a / l.b);
        const beta = -Math.atan(this.a / this.b);
        const gamma = 2 * alpha - beta;
        return new Line2d().initXYAlpha(ps.x, ps.y, gamma);
    }
    refract(l, n1, n2) {
        if (l.a * this.b - this.a * l.b === 0) {
            return;
        }
        const ps = this.intersect(l);
        const alpha = -Math.atan(l.a / l.b);
        const beta = -Math.atan(this.a / this.b);
        const gamma = alpha + Math.asin(n1 / n2 * Math.cos(alpha - beta)) - Math.PI / 2;
        return new Line2d().initXYAlpha(ps.x, ps.y, gamma);
    }
    pointDistance(p) {
        return distancePointLine(p, this);
    }
}
class Segment2d {
    p1 = new Point2d();
    p2 = new Point2d();
    init(s) {
        this.p1 = new Point2d().init(s.p1);
        this.p2 = new Point2d().init(s.p2);
        return this;
    }
    initXY(x1, y1, x2, y2) {
        this.p1 = new Point2d().initXY(x1, y1);
        this.p2 = new Point2d().initXY(x2, y2);
        return this;
    }
    length() {
        return new Vector2d().init(this.p2).sub(this.p1).abs();
    }
    toLine() {
        return new Line2d().initXY(this.p1.x, this.p1.y, this.p2.x, this.p2.y);
    }
    pointDistance(p) {
        return distancePointSegment(p, this);
    }
}
class Body2d {
    points = [];
    getArea() {
        let lastP = this.points.length - 1;
        let area = 0;
        for (let p = 0; p < this.points.length; p++) {
            area += ((this.points[p].x - this.points[lastP].x) * (this.points[p].y + this.points[lastP].y)) / 2;
            lastP = p;
        }
        return area;
    }
}
const distancePointPoint = (p1, p2) => {
    return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);
};
const distancePointLine = (p, l) => {
    return Math.abs(l.a * p.x + l.b * p.y + l.c) / Math.sqrt(l.a ** 2 + l.b ** 2);
};
const distancePointSegment = (p, s) => {
    const s1 = s.length();
    const s2 = p.pointDistance(s.p1);
    const s3 = p.pointDistance(s.p2);
    if (s2 ** 2 + s3 ** 2 <= s1 ** 2) {
        return p.lineDistance(s.toLine());
    }
    else {
        const s123 = [s1, s2, s3].sort((a, b) => a - b);
        if (s123[0] ** 2 + s123[1] ** 2 > s123[2] ** 2) {
            return p.lineDistance(s.toLine());
        }
        else {
            return Math.min(s2, s3);
        }
    }
};


/***/ }),

/***/ "./src/libs/Gpgpu.ts":
/*!***************************!*\
  !*** ./src/libs/Gpgpu.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMyTexture": () => (/* binding */ createMyTexture),
/* harmony export */   "deleteMyTexture": () => (/* binding */ deleteMyTexture),
/* harmony export */   "executeProgram": () => (/* binding */ executeProgram),
/* harmony export */   "getResult": () => (/* binding */ getResult),
/* harmony export */   "logResult": () => (/* binding */ logResult)
/* harmony export */ });
/* harmony import */ var _lib_twgl_js_twgl_min_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/twgl.js/twgl.min.js */ "./lib/twgl.js/twgl.min.js");
/* harmony import */ var _lib_twgl_js_twgl_min_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_twgl_js_twgl_min_js__WEBPACK_IMPORTED_MODULE_0__);

const executeProgram = (gl, program, buffers, uniforms, target) => {
    gl.useProgram(program.program);
    (0,_lib_twgl_js_twgl_min_js__WEBPACK_IMPORTED_MODULE_0__.setBuffersAndAttributes)(gl, program, buffers);
    uniforms && (0,_lib_twgl_js_twgl_min_js__WEBPACK_IMPORTED_MODULE_0__.setUniforms)(program, uniforms);
    target && gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, target.texture, 0);
    (0,_lib_twgl_js_twgl_min_js__WEBPACK_IMPORTED_MODULE_0__.drawBufferInfo)(gl, buffers);
};
const createMyTexture = (gl, format, channels, width, height, src) => {
    let texture;
    switch (format) {
        case 'BYTE':
            switch (channels) {
                case 1:
                    texture = (0,_lib_twgl_js_twgl_min_js__WEBPACK_IMPORTED_MODULE_0__.createTexture)(gl, { internalFormat: gl.R8, format: gl.RED, type: gl.UNSIGNED_BYTE, minMag: gl.NEAREST, wrap: gl.CLAMP_TO_EDGE, width, height, src });
                    break;
                case 2:
                    texture = (0,_lib_twgl_js_twgl_min_js__WEBPACK_IMPORTED_MODULE_0__.createTexture)(gl, { internalFormat: gl.RG8, format: gl.RG, type: gl.UNSIGNED_BYTE, minMag: gl.NEAREST, wrap: gl.CLAMP_TO_EDGE, width, height, src });
                    break;
                case 3:
                    texture = (0,_lib_twgl_js_twgl_min_js__WEBPACK_IMPORTED_MODULE_0__.createTexture)(gl, { internalFormat: gl.RGB8, format: gl.RGB, type: gl.UNSIGNED_BYTE, minMag: gl.NEAREST, wrap: gl.CLAMP_TO_EDGE, width, height, src });
                    break;
                case 4:
                    texture = (0,_lib_twgl_js_twgl_min_js__WEBPACK_IMPORTED_MODULE_0__.createTexture)(gl, { internalFormat: gl.RGBA8, format: gl.RGBA, type: gl.UNSIGNED_BYTE, minMag: gl.NEAREST, wrap: gl.CLAMP_TO_EDGE, width, height, src });
                    break;
                default:
                    throw new Error(`channels must be 1, 2, 3 or 4, received value '${channels}'`);
            }
            break;
        case 'FLOAT':
            switch (channels) {
                case 1:
                    texture = (0,_lib_twgl_js_twgl_min_js__WEBPACK_IMPORTED_MODULE_0__.createTexture)(gl, { internalFormat: gl.R32F, format: gl.RED, type: gl.FLOAT, minMag: gl.NEAREST, wrap: gl.CLAMP_TO_EDGE, width, height, src });
                    break;
                case 2:
                    texture = (0,_lib_twgl_js_twgl_min_js__WEBPACK_IMPORTED_MODULE_0__.createTexture)(gl, { internalFormat: gl.RG32F, format: gl.RG, type: gl.FLOAT, minMag: gl.NEAREST, wrap: gl.CLAMP_TO_EDGE, width, height, src });
                    break;
                case 3:
                    texture = (0,_lib_twgl_js_twgl_min_js__WEBPACK_IMPORTED_MODULE_0__.createTexture)(gl, { internalFormat: gl.RGB32F, format: gl.RGB, type: gl.FLOAT, minMag: gl.NEAREST, wrap: gl.CLAMP_TO_EDGE, width, height, src });
                    break;
                case 4:
                    texture = (0,_lib_twgl_js_twgl_min_js__WEBPACK_IMPORTED_MODULE_0__.createTexture)(gl, { internalFormat: gl.RGBA32F, format: gl.RGBA, type: gl.FLOAT, minMag: gl.NEAREST, wrap: gl.CLAMP_TO_EDGE, width, height, src });
                    break;
                default:
                    throw new Error(`channels must be 1, 2, 3 or 4, received value '${channels}'`);
            }
            break;
        default:
            throw new Error(`format must be 'BYTE' or 'FLOAT', received value '${format}'`);
    }
    return { texture, format, channels, width, height };
};
const deleteMyTexture = (gl, target) => {
    gl.deleteTexture(target.texture);
};
const getResult = (gl, fb, target) => {
    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
    gl.viewport(0, 0, target.width, target.height);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, target.texture, 0);
    let resultBuffer;
    switch (target.format) {
        case 'BYTE':
            switch (target.channels) {
                case 1:
                    resultBuffer = new Uint8Array(target.width * target.height);
                    gl.readPixels(0, 0, target.width, target.height, gl.RED, gl.UNSIGNED_BYTE, resultBuffer);
                    break;
                case 2:
                    resultBuffer = new Uint8Array(2 * target.width * target.height);
                    gl.readPixels(0, 0, target.width, target.height, gl.RG, gl.UNSIGNED_BYTE, resultBuffer);
                    break;
                case 3:
                    resultBuffer = new Uint8Array(3 * target.width * target.height);
                    gl.readPixels(0, 0, target.width, target.height, gl.RGB, gl.UNSIGNED_BYTE, resultBuffer);
                    break;
                case 4:
                    resultBuffer = new Uint8Array(4 * target.width * target.height);
                    gl.readPixels(0, 0, target.width, target.height, gl.RGBA, gl.UNSIGNED_BYTE, resultBuffer);
                    break;
                default:
                    throw new Error(`channels must be 1, 2, 3 or 4, received value '${target.channels}'`);
            }
            break;
        case 'FLOAT':
            switch (target.channels) {
                case 1:
                    resultBuffer = new Float32Array(target.width * target.height);
                    gl.readPixels(0, 0, target.width, target.height, gl.RED, gl.FLOAT, resultBuffer);
                    break;
                case 2:
                    resultBuffer = new Float32Array(2 * target.width * target.height);
                    gl.readPixels(0, 0, target.width, target.height, gl.RG, gl.FLOAT, resultBuffer);
                    break;
                case 3:
                    resultBuffer = new Float32Array(3 * target.width * target.height);
                    gl.readPixels(0, 0, target.width, target.height, gl.RGB, gl.FLOAT, resultBuffer);
                    break;
                case 4:
                    resultBuffer = new Float32Array(4 * target.width * target.height);
                    gl.readPixels(0, 0, target.width, target.height, gl.RGBA, gl.FLOAT, resultBuffer);
                    break;
                default:
                    throw new Error(`channels must be 1, 2, 3 or 4, received value '${target.channels}'`);
            }
            break;
        default:
            throw new Error(`format must be 'BYTE' or 'FLOAT', received value '${target.format}'`);
    }
    return Array.from(resultBuffer);
};
const logResult = (gl, fb, target) => {
    const result = getResult(gl, fb, target);
    const result2 = [...Array(target.channels)].map(() => [...Array(target.height)].map(() => Array(target.width).fill(0)));
    let index = 0;
    for (let y = 0; y < target.height; y++) {
        for (let x = 0; x < target.width; x++) {
            for (let c = 0; c < target.channels; c++) {
                result2[c][y][x] = result[index++];
            }
        }
    }
    console.log('resultx', result2[0]);
    throw new Error('getResult');
};


/***/ }),

/***/ "./src/libs/Graphics.ts":
/*!******************************!*\
  !*** ./src/libs/Graphics.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Graphics2d": () => (/* binding */ Graphics2d),
/* harmony export */   "PixelGraphics": () => (/* binding */ PixelGraphics),
/* harmony export */   "WebglGraphics": () => (/* binding */ WebglGraphics)
/* harmony export */ });
/* harmony import */ var _assets_CasioFX__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../assets/CasioFX */ "./assets/CasioFX.ts");
/* harmony import */ var _assets_PressStart2P__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../assets/PressStart2P */ "./assets/PressStart2P.ts");
/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Canvas */ "./src/libs/Canvas.ts");
/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Color */ "./src/libs/Color.ts");
/* harmony import */ var _assets_C64__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../assets/C64 */ "./assets/C64.ts");
/* harmony import */ var _assets_C64Inverse__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../assets/C64Inverse */ "./assets/C64Inverse.ts");
/* harmony import */ var _Body2d__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Body2d */ "./src/libs/Body2d.ts");







class PixelGraphics extends _Canvas__WEBPACK_IMPORTED_MODULE_2__.PixelCanvas {
    clipPoly = new _Body2d__WEBPACK_IMPORTED_MODULE_6__.Body2d();
    constructor(canvasId) {
        super(canvasId);
        this.resizeCallbacks.push(((graphics) => {
            this.clipPoly = new _Body2d__WEBPACK_IMPORTED_MODULE_6__.Body2d();
            this.clipPoly.points.push(new _Body2d__WEBPACK_IMPORTED_MODULE_6__.Point2d().initXY(0, 0), new _Body2d__WEBPACK_IMPORTED_MODULE_6__.Point2d().initXY(graphics.width - 1, 0), new _Body2d__WEBPACK_IMPORTED_MODULE_6__.Point2d().initXY(graphics.width - 1, graphics.height - 1), new _Body2d__WEBPACK_IMPORTED_MODULE_6__.Point2d().initXY(0, graphics.height - 1));
        }));
    }
    point(x, y, color, clip = true) {
        return this.pixel(Math.round(x), Math.round(y), color, clip);
    }
    point3d(x, y, z, color, clip = true) {
        return this.pixel3d(Math.round(x), Math.round(y), z, color, clip);
    }
    clip(x1, y1, x2, y2) {
        const CLIPLEFT = 1;
        const CLIPRIGHT = 2;
        const CLIPLOWER = 4;
        const CLIPUPPER = 8;
        let k1 = 0;
        let k2 = 0;
        const dx = x2 - x1;
        const dy = y2 - y1;
        const xmax = this.width - 1;
        const ymax = this.height - 1;
        if (y1 < 0)
            k1 = CLIPLOWER;
        if (y1 > ymax)
            k1 = CLIPUPPER;
        if (x1 < 0)
            k1 |= CLIPLEFT;
        if (x1 > xmax)
            k1 |= CLIPRIGHT;
        if (y2 < 0)
            k2 = CLIPLOWER;
        if (y2 > ymax)
            k2 = CLIPUPPER;
        if (x2 < 0)
            k2 |= CLIPLEFT;
        if (x2 > xmax)
            k2 |= CLIPRIGHT;
        while (k1 | k2) {
            if (k1 & k2)
                return undefined;
            if (k1) {
                if (k1 & CLIPLEFT) {
                    y1 -= x1 * dy / dx;
                    x1 = 0;
                }
                else if (k1 & CLIPRIGHT) {
                    y1 += (xmax - x1) * dy / dx;
                    x1 = xmax;
                }
                if (k1 & CLIPLOWER) {
                    x1 -= y1 * dx / dy;
                    y1 = 0;
                }
                else if (k1 & CLIPUPPER) {
                    x1 += (ymax - y1) * dx / dy;
                    y1 = ymax;
                }
                k1 = 0;
                if (y1 < 0)
                    k1 = CLIPLOWER;
                if (y1 > ymax)
                    k1 = CLIPUPPER;
                if (x1 < 0)
                    k1 |= CLIPLEFT;
                if (x1 > xmax)
                    k1 |= CLIPRIGHT;
            }
            if (k2) {
                if (k2 & CLIPLEFT) {
                    y2 -= x2 * dy / dx;
                    x2 = 0;
                }
                else if (k2 & CLIPRIGHT) {
                    y2 += (xmax - x2) * dy / dx;
                    x2 = xmax;
                }
                if (k2 & CLIPLOWER) {
                    x2 -= y2 * dx / dy;
                    y2 = 0;
                }
                else if (k2 & CLIPUPPER) {
                    x2 += (ymax - y2) * dx / dy;
                    y2 = ymax;
                }
                k2 = 0;
                if (y2 < 0)
                    k2 = CLIPLOWER;
                if (y2 > ymax)
                    k2 = CLIPUPPER;
                if (x2 < 0)
                    k2 |= CLIPLEFT;
                if (x2 > xmax)
                    k2 |= CLIPRIGHT;
            }
        }
        return { x1, y1, x2, y2 };
    }
    line(x1, y1, x2, y2, color, clip = true) {
        if (clip) {
            const clipResult = this.clip(x1, y1, x2, y2);
            if (clipResult === undefined)
                return this;
            ({ x1, y1, x2, y2 } = clipResult);
        }
        x1 = Math.round(x1);
        y1 = Math.round(y1);
        x2 = Math.round(x2);
        y2 = Math.round(y2);
        const dx = Math.abs(x2 - x1);
        const dy = Math.abs(y2 - y1);
        const sx = (x1 < x2) ? 1 : -1;
        const sy = (y1 < y2) ? 1 : -1;
        let err = dx - dy;
        while (true) {
            this.pixel(x1, y1, color);
            if ((x1 === x2) && (y1 === y2))
                break;
            const e2 = 2 * err;
            if (e2 > -dy) {
                err -= dy;
                x1 += sx;
            }
            if (e2 < dx) {
                err += dx;
                y1 += sy;
            }
        }
        return this;
    }
    line3d(x1, y1, z1, x2, y2, z2, color, clip = false) {
        if (clip) {
            const clipResult = this.clip(x1, y1, x2, y2);
            if (clipResult === undefined)
                return this;
            ({ x1, y1, x2, y2 } = clipResult);
        }
        x1 = Math.round(x1);
        y1 = Math.round(y1);
        x2 = Math.round(x2);
        y2 = Math.round(y2);
        if (x1 < 0)
            x1 = 0;
        else if (x1 > this.width - 1)
            x1 = this.width - 1;
        if (y1 < 0)
            y1 = 0;
        else if (y1 > this.height - 1)
            y1 = this.height - 1;
        if (x2 < 0)
            x2 = 0;
        else if (x2 > this.width - 1)
            x2 = this.width - 1;
        if (y2 < 0)
            y2 = 0;
        else if (y2 > this.height - 1)
            y2 = this.height - 1;
        const dx = Math.abs(x2 - x1);
        const dy = Math.abs(y2 - y1);
        const sx = (x1 < x2) ? 1 : -1;
        const sy = (y1 < y2) ? 1 : -1;
        const sz = (z2 - z1) / (dx + dy);
        let err = dx - dy;
        while (true) {
            this.pixel3d(x1, y1, z1, color);
            if ((x1 === x2) && (y1 === y2))
                break;
            const e2 = 2 * err;
            if (e2 > -dy) {
                err -= dy;
                x1 += sx;
            }
            if (e2 < dx) {
                err += dx;
                y1 += sy;
            }
            z1 += sz;
        }
        return this;
    }
    circleWire(x, y, r, color, clip = true) {
        if (r < 0)
            r = -r;
        x = Math.round(x);
        y = Math.round(y);
        r = Math.round(r);
        if (clip) {
            if ((x + r < 0) || (x - r > this.width - 1) || (y + r < 0) || (y - r > this.height - 1))
                return this;
            if ((x - r >= 0) && (x + r <= this.width - 1) && (y - r >= 0) && (y + r) <= this.height - 1)
                clip = false;
        }
        const draw = (x, y, xr, yr, color, clip) => {
            this.pixel(x + xr, y + yr, color, clip);
            this.pixel(x - xr, y + yr, color, clip);
            this.pixel(x + xr, y - yr, color, clip);
            this.pixel(x - xr, y - yr, color, clip);
            this.pixel(x + yr, y + xr, color, clip);
            this.pixel(x - yr, y + xr, color, clip);
            this.pixel(x + yr, y - xr, color, clip);
            this.pixel(x - yr, y - xr, color, clip);
        };
        let xr = 0;
        let yr = r;
        let d = 3 - 2 * r;
        draw(x, y, xr, yr, color, clip);
        while (yr >= xr) {
            xr++;
            if (d > 0) {
                yr--;
                d = d + 4 * (xr - yr) + 10;
            }
            else
                d = d + 4 * xr + 6;
            draw(x, y, xr, yr, color, clip);
        }
        return this;
    }
    circleFill(x, y, r, color, clip = true) {
        if (r < 0)
            r = -r;
        x = Math.round(x);
        y = Math.round(y);
        r = Math.round(r);
        if (clip) {
            if ((x + r < 0) || (x - r > this.width - 1) || (y + r < 0) || (y - r > this.height - 1))
                return this;
            if ((x - r >= 0) && (x + r <= this.width - 1) && (y - r >= 0) && (y + r) <= this.height - 1)
                clip = false;
        }
        const draw = (x, y, xr, yr, color, clip) => {
            this.horLine(x - xr, x + xr, y + yr, color, clip);
            this.horLine(x - xr, x + xr, y - yr, color, clip);
            this.horLine(x - yr, x + yr, y + xr, color, clip);
            this.horLine(x - yr, x + yr, y - xr, color, clip);
        };
        let xr = 0;
        let yr = r;
        let d = 3 - 2 * r;
        draw(x, y, xr, yr, color, clip);
        while (yr >= xr) {
            xr++;
            if (d > 0) {
                yr--;
                d = d + 4 * (xr - yr) + 10;
            }
            else
                d = d + 4 * xr + 6;
            draw(x, y, xr, yr, color, clip);
        }
        return this;
    }
    rectWire(x1, y1, x2, y2, color, clip = true) {
        if (x1 > x2)
            [x1, x2] = [x2, x1];
        if (y1 > y2)
            [y1, y2] = [y2, y1];
        x1 = Math.round(x1);
        y1 = Math.round(y1);
        x2 = Math.round(x2);
        y2 = Math.round(y2);
        if (clip) {
            if ((x2 < 0) || (x1 > this.width - 1) || (y2 < 0) || (y1 > this.height - 1))
                return this;
            if (y1 >= 0)
                this.horLine(x1, x2, y1, color, true);
            if (y2 <= this.height - 1)
                this.horLine(x1, x2, y2, color, true);
            if (x1 >= 0)
                this.vertLine(x1, y1, y2, color, true);
            if (x2 <= this.width - 1)
                this.vertLine(x2, y1, y2, color, true);
        }
        else {
            this.horLine(x1, x2, y1, color, false);
            this.horLine(x1, x2, y2, color, false);
            this.vertLine(x1, y1, y2, color, false);
            this.vertLine(x2, y1, y2, color, false);
        }
        return this;
    }
    rectFill(x1, y1, x2, y2, color, clip = true) {
        if (x1 > x2)
            [x1, x2] = [x2, x1];
        if (y1 > y2)
            [y1, y2] = [y2, y1];
        x1 = Math.round(x1);
        y1 = Math.round(y1);
        x2 = Math.round(x2);
        y2 = Math.round(y2);
        if (clip) {
            if ((x2 < 0) || (x1 > this.width - 1) || (y2 < 0) || (y1 > this.height - 1))
                return this;
            if (x1 < 0)
                x1 = 0;
            if (x2 > this.width - 1)
                x2 = this.width - 1;
            if (y1 < 0)
                y1 = 0;
            if (y2 > this.height - 1)
                y2 = this.height - 1;
        }
        for (let y = y1; y <= y2; y++) {
            this.horLine(x1, x2, y, color, false);
        }
        return this;
    }
    triFill(body, color) {
        body.sanitize(this.width - 1, this.height - 1);
        let i1;
        let i2;
        let i3;
        if (body.points[1].y < body.points[0].y) {
            if (body.points[2].y < body.points[1].y) {
                i1 = 2;
                i2 = 1;
                i3 = 0;
            }
            else if (body.points[2].y < body.points[0].y) {
                i1 = 1;
                i2 = 2;
                i3 = 0;
            }
            else {
                i1 = 1;
                i2 = 0;
                i3 = 2;
            }
        }
        else {
            if (body.points[2].y < body.points[0].y) {
                i1 = 2;
                i2 = 0;
                i3 = 1;
            }
            else if (body.points[2].y < body.points[1].y) {
                i1 = 0;
                i2 = 2;
                i3 = 1;
            }
            else {
                i1 = 0;
                i2 = 1;
                i3 = 2;
            }
        }
        const ry1 = Math.round(body.points[i1].y);
        const ry2 = Math.round(body.points[i2].y);
        const ry3 = Math.round(body.points[i3].y);
        if (ry1 === ry3)
            return this;
        const h12 = ry2 - ry1;
        const h13 = ry3 - ry1;
        const h23 = ry3 - ry2;
        const linewidth = Math.round(body.points[i1].x * h23 - body.points[i2].x * h13 + body.points[i3].x * h12);
        const diz = linewidth !== 0 ? (h23 / body.points[i1].z - h13 / body.points[i2].z + h12 / body.points[i3].z) / linewidth : 0;
        const dcz = linewidth !== 0 ? (body.points[i1].c / body.points[i1].z * h23 - body.points[i2].c / body.points[i2].z * h13 + body.points[i3].c / body.points[i3].z * h12) / linewidth : 0;
        if (linewidth > 0) {
            let x13 = body.points[i1].x;
            const dx13 = (body.points[i3].x - x13) / h13;
            let x12 = body.points[i1].x;
            let iz12 = 1 / body.points[i1].z;
            let cz12 = body.points[i1].c / body.points[i1].z;
            const dx12 = h12 !== 0 ? (body.points[i2].x - x12) / h12 : 0;
            const diz12 = h12 !== 0 ? (1 / body.points[i2].z - iz12) / h12 : 0;
            const dcz12 = h12 !== 0 ? (body.points[i2].c / body.points[i2].z - cz12) / h12 : 0;
            for (let y = ry1; y < ry2; y++, x13 += dx13, x12 += dx12, iz12 += diz12, cz12 += dcz12) {
                this.horLine3d(Math.round(x12), Math.round(x13), y, iz12, diz, cz12, dcz, color);
            }
            let x23 = body.points[i2].x;
            let iz23 = 1 / body.points[i2].z;
            let cz23 = body.points[i2].c / body.points[i2].z;
            const dx23 = h23 !== 0 ? (body.points[i3].x - x23) / h23 : 0;
            const diz23 = h23 !== 0 ? (1 / body.points[i3].z - iz23) / h23 : 0;
            const dcz23 = h23 !== 0 ? (body.points[i3].c / body.points[i3].z - cz23) / h23 : 0;
            for (let y = ry2; y <= ry3; y++, x13 += dx13, x23 += dx23, iz23 += diz23, cz23 += dcz23) {
                this.horLine3d(Math.round(x23), Math.round(x13), y, iz23, diz, cz23, dcz, color);
            }
        }
        else {
            let x13 = body.points[i1].x;
            let iz13 = 1 / body.points[i1].z;
            let cz13 = body.points[i1].c / body.points[i1].z;
            const dx13 = (body.points[i3].x - x13) / h13;
            const diz13 = (1 / body.points[i3].z - iz13) / h13;
            const dcz13 = (body.points[i3].c / body.points[i3].z - cz13) / h13;
            let x12 = body.points[i1].x;
            const dx12 = h12 !== 0 ? (body.points[i2].x - x12) / h12 : 0;
            for (let y = ry1; y < ry2; y++, x12 += dx12, x13 += dx13, iz13 += diz13, cz13 += dcz13) {
                this.horLine3d(Math.round(x13), Math.round(x12), y, iz13, diz, cz13, dcz, color);
            }
            let x23 = body.points[i2].x;
            const dx23 = h23 !== 0 ? (body.points[i3].x - x23) / h23 : 0;
            for (let y = ry2; y <= ry3; y++, x23 += dx23, x13 += dx13, iz13 += diz13, cz13 += dcz13) {
                this.horLine3d(Math.round(x13), Math.round(x23), y, iz13, diz, cz13, dcz, color);
            }
        }
        return this;
    }
    triTex(body, texture) {
        body.sanitize(this.width - 1, this.height - 1);
        let i1;
        let i2;
        let i3;
        if (body.points[1].y < body.points[0].y) {
            if (body.points[2].y < body.points[1].y) {
                i1 = 2;
                i2 = 1;
                i3 = 0;
            }
            else if (body.points[2].y < body.points[0].y) {
                i1 = 1;
                i2 = 2;
                i3 = 0;
            }
            else {
                i1 = 1;
                i2 = 0;
                i3 = 2;
            }
        }
        else {
            if (body.points[2].y < body.points[0].y) {
                i1 = 2;
                i2 = 0;
                i3 = 1;
            }
            else if (body.points[2].y < body.points[1].y) {
                i1 = 0;
                i2 = 2;
                i3 = 1;
            }
            else {
                i1 = 0;
                i2 = 1;
                i3 = 2;
            }
        }
        const ry1 = Math.round(body.points[i1].y);
        const ry2 = Math.round(body.points[i2].y);
        const ry3 = Math.round(body.points[i3].y);
        if (ry1 === ry3)
            return this;
        const h12 = ry2 - ry1;
        const h13 = ry3 - ry1;
        const h23 = ry3 - ry2;
        const linewidth = body.points[i1].x * h23 - body.points[i2].x * h13 + body.points[i3].x * h12;
        const diz = linewidth !== 0 ? (h23 / body.points[i1].z - h13 / body.points[i2].z + h12 / body.points[i3].z) / linewidth : 0;
        const dcz = linewidth !== 0 ? (body.points[i1].c / body.points[i1].z * h23 - body.points[i2].c / body.points[i2].z * h13 + body.points[i3].c / body.points[i3].z * h12) / linewidth : 0;
        const duz = linewidth !== 0 ? (body.points[i1].u / body.points[i1].z * h23 - body.points[i2].u / body.points[i2].z * h13 + body.points[i3].u / body.points[i3].z * h12) / linewidth : 0;
        const dvz = linewidth !== 0 ? (body.points[i1].v / body.points[i1].z * h23 - body.points[i2].v / body.points[i2].z * h13 + body.points[i3].v / body.points[i3].z * h12) / linewidth : 0;
        if (linewidth > 0) {
            let x13 = body.points[i1].x;
            const dx13 = (body.points[i3].x - x13) / h13;
            let x12 = body.points[i1].x;
            let iz12 = 1 / body.points[i1].z;
            let cz12 = body.points[i1].c / body.points[i1].z;
            let uz12 = body.points[i1].u / body.points[i1].z;
            let vz12 = body.points[i1].v / body.points[i1].z;
            const dx12 = h12 !== 0 ? (body.points[i2].x - x12) / h12 : 0;
            const diz12 = h12 !== 0 ? (1 / body.points[i2].z - iz12) / h12 : 0;
            const dcz12 = h12 !== 0 ? (body.points[i2].c / body.points[i2].z - cz12) / h12 : 0;
            const duz12 = h12 !== 0 ? (body.points[i2].u / body.points[i2].z - uz12) / h12 : 0;
            const dvz12 = h12 !== 0 ? (body.points[i2].v / body.points[i2].z - vz12) / h12 : 0;
            for (let y = ry1; y < ry2; y++, x13 += dx13, x12 += dx12, iz12 += diz12, cz12 += dcz12, uz12 += duz12, vz12 += dvz12) {
                this.horLineTex3d(Math.round(x12), Math.round(x13), y, iz12, diz, cz12, dcz, uz12, duz, vz12, dvz, texture);
            }
            let x23 = body.points[i2].x;
            let iz23 = 1 / body.points[i2].z;
            let cz23 = body.points[i2].c / body.points[i2].z;
            let uz23 = body.points[i2].u / body.points[i2].z;
            let vz23 = body.points[i2].v / body.points[i2].z;
            const dx23 = h23 !== 0 ? (body.points[i3].x - x23) / h23 : 0;
            const diz23 = h23 !== 0 ? (1 / body.points[i3].z - iz23) / h23 : 0;
            const dcz23 = h23 !== 0 ? (body.points[i3].c / body.points[i3].z - cz23) / h23 : 0;
            const duz23 = h23 !== 0 ? (body.points[i3].u / body.points[i3].z - uz23) / h23 : 0;
            const dvz23 = h23 !== 0 ? (body.points[i3].v / body.points[i3].z - vz23) / h23 : 0;
            for (let y = ry2; y <= ry3; y++, x13 += dx13, x23 += dx23, iz23 += diz23, cz23 += dcz23, uz23 += duz23, vz23 += dvz23) {
                this.horLineTex3d(Math.round(x23), Math.round(x13), y, iz23, diz, cz23, dcz, uz23, duz, vz23, dvz, texture);
            }
        }
        else {
            let x13 = body.points[i1].x;
            let iz13 = 1 / body.points[i1].z;
            let cz13 = body.points[i1].c / body.points[i1].z;
            let uz13 = body.points[i1].u / body.points[i1].z;
            let vz13 = body.points[i1].v / body.points[i1].z;
            const dx13 = (body.points[i3].x - x13) / h13;
            const diz13 = (1 / body.points[i3].z - iz13) / h13;
            const dcz13 = (body.points[i3].c / body.points[i3].z - cz13) / h13;
            const duz13 = (body.points[i3].u / body.points[i3].z - uz13) / h13;
            const dvz13 = (body.points[i3].v / body.points[i3].z - vz13) / h13;
            let x12 = body.points[i1].x;
            const dx12 = h12 !== 0 ? (body.points[i2].x - x12) / h12 : 0;
            for (let y = ry1; y < ry2; y++, x12 += dx12, x13 += dx13, iz13 += diz13, cz13 += dcz13, uz13 += duz13, vz13 += dvz13) {
                this.horLineTex3d(Math.round(x13), Math.round(x12), y, iz13, diz, cz13, dcz, uz13, duz, vz13, dvz, texture);
            }
            let x23 = body.points[i2].x;
            const dx23 = h23 !== 0 ? (body.points[i3].x - x23) / h23 : 0;
            for (let y = ry2; y <= ry3; y++, x23 += dx23, x13 += dx13, iz13 += diz13, cz13 += dcz13, uz13 += duz13, vz13 += dvz13) {
                this.horLineTex3d(Math.round(x13), Math.round(x23), y, iz13, diz, cz13, dcz, uz13, duz, vz13, dvz, texture);
            }
        }
    }
    polyWire(body, color, clip = true) {
        const { xmin, ymin, xmax, ymax } = body.getMinMax();
        if (clip) {
            if ((xmax < 0) || (xmin > this.width - 1) || (ymax < 0) || (ymin > this.height - 1))
                return this;
            if ((xmin >= 0) && (xmax <= this.width - 1) && (ymin >= 0) && (ymax <= this.height - 1))
                clip = false;
        }
        for (let i = 0; i < body.points.length - 1; i++) {
            this.line(body.points[i].x, body.points[i].y, body.points[i + 1].x, body.points[i + 1].y, color, clip);
        }
        this.line(body.points[body.points.length - 1].x, body.points[body.points.length - 1].y, body.points[0].x, body.points[0].y, color, clip);
        return this;
    }
    polyFill(body, color, clip = true) {
        const { xmin, ymin, xmax, ymax, ymini } = body.getMinMax();
        if (clip) {
            if ((xmax < 0) || (xmin > this.width - 1) || (ymax < 0) || (ymin > this.height - 1))
                return this;
            if ((xmin >= 0) && (xmax <= this.width - 1) && (ymin >= 0) && (ymax <= this.height - 1))
                clip = false;
            if (clip) {
                body.clip(this.clipPoly);
            }
        }
        body.sanitize(this.width - 1, this.height - 1);
        const rymin = Math.round(ymin);
        const rymax = Math.round(ymax);
        if (rymin === rymax)
            return this;
        let il1 = ymini;
        let ir1 = ymini + 1;
        if (ir1 === body.points.length)
            ir1 = 0;
        let il2 = ymini - 1;
        if (il2 === -1)
            il2 = body.points.length - 1;
        let ir2;
        const ry1 = ymini;
        const ry2 = Math.round(body.points[ir1].y);
        const ry3 = Math.round(body.points[il2].y);
        const h12 = ry2 - ry1;
        const h13 = ry1 - ry3;
        const h23 = ry3 - ry2;
        const linewidth = body.points[il1].x * h23 + body.points[ir1].x * h13 + body.points[il2].x * h12;
        const dizx = linewidth !== 0 ? (h23 / body.points[il1].z + h13 / body.points[ir1].z + h12 / body.points[il2].z) / linewidth : 0;
        const dczx = linewidth !== 0 ? (body.points[il1].c / body.points[il1].z * h23 + body.points[ir1].c / body.points[ir1].z * h13 + body.points[il2].c / body.points[il2].z * h12) / linewidth : 0;
        il2 = ymini;
        let yl2 = rymin;
        ir2 = ymini;
        let yr2 = rymin;
        let lr = 2;
        il1 = 0;
        let yl1 = 0;
        ir1 = 0;
        let yr1 = 0;
        let y = 0;
        let ys = 0;
        let ye = 0;
        let hl = 0;
        let hr = 0;
        let xl = 0;
        let xr = 0;
        let izl = 0;
        let czl = 0;
        let dxl = 0;
        let dxr = 0;
        let dizl = 0;
        let dczl = 0;
        do {
            if (lr === 0 || lr === 2) {
                il1 = il2;
                il2 -= 1;
                if (il2 === -1)
                    il2 = body.points.length - 1;
                yl1 = yl2;
                yl2 = Math.round(body.points[il2].y);
                hl = yl2 - yl1;
                xl = body.points[il1].x;
                izl = 1 / body.points[il1].z;
                czl = body.points[il1].c / body.points[il1].z;
                dxl = hl !== 0 ? (body.points[il2].x - xl) / hl : 0;
                dizl = hl !== 0 ? (1 / body.points[il2].z - izl) / hl : 0;
                dczl = hl !== 0 ? (body.points[il2].c / body.points[il2].z - czl) / hl : 0;
                ys = yl1;
            }
            if (lr === 1 || lr === 2) {
                ir1 = ir2;
                ir2 += 1;
                if (ir2 === body.points.length)
                    ir2 = 0;
                yr1 = yr2;
                yr2 = Math.round(body.points[ir2].y);
                hr = yr2 - yr1;
                xr = body.points[ir1].x;
                dxr = hr !== 0 ? (body.points[ir2].x - xr) / hr : 0;
                ys = yr1;
            }
            if (yl2 < yr2) {
                ye = yl2;
                lr = 0;
            }
            else if (yr2 < yl2) {
                ye = yr2;
                lr = 1;
            }
            else {
                ye = yl2;
                lr = 2;
            }
            for (y = ys; y < ye; y++, xl += dxl, xr += dxr, izl += dizl, czl += dczl) {
                this.horLine3d(Math.round(xl), Math.round(xr), y, izl, dizx, czl, dczx, color);
            }
        } while (ye < rymax);
        this.horLine3d(Math.round(xl), Math.round(xr), y, izl, dizx, czl, dczx, color);
        return this;
    }
    polyTex(body, texture) {
        body.sanitize(this.width - 1, this.height - 1);
        const { ymin, ymax, ymini } = body.getMinMax();
        const rymin = Math.round(ymin);
        const rymax = Math.round(ymax);
        if (rymin === rymax)
            return this;
        let il1 = ymini;
        let ir1 = ymini + 1;
        if (ir1 === body.points.length)
            ir1 = 0;
        let il2 = ymini - 1;
        if (il2 === -1)
            il2 = body.points.length - 1;
        let ir2;
        const ry1 = ymini;
        const ry2 = Math.round(body.points[ir1].y);
        const ry3 = Math.round(body.points[il2].y);
        const h12 = ry2 - ry1;
        const h13 = ry1 - ry3;
        const h23 = ry3 - ry2;
        const linewidth = body.points[il1].x * h23 + body.points[ir1].x * h13 + body.points[il2].x * h12;
        const dizx = linewidth !== 0 ? (h23 / body.points[il1].z + h13 / body.points[ir1].z + h12 / body.points[il2].z) / linewidth : 0;
        const dczx = linewidth !== 0 ? (body.points[il1].c / body.points[il1].z * h23 + body.points[ir1].c / body.points[ir1].z * h13 + body.points[il2].c / body.points[il2].z * h12) / linewidth : 0;
        const duzx = linewidth !== 0 ? (body.points[il1].u / body.points[il1].z * h23 + body.points[ir1].u / body.points[ir1].z * h13 + body.points[il2].u / body.points[il2].z * h12) / linewidth : 0;
        const dvzx = linewidth !== 0 ? (body.points[il1].v / body.points[il1].z * h23 + body.points[ir1].v / body.points[ir1].z * h13 + body.points[il2].v / body.points[il2].z * h12) / linewidth : 0;
        il2 = ymini;
        let yl2 = rymin;
        ir2 = ymini;
        let yr2 = rymin;
        let lr = 2;
        il1 = 0;
        let yl1 = 0;
        ir1 = 0;
        let yr1 = 0;
        let y = 0;
        let ys = 0;
        let ye = 0;
        let hl = 0;
        let hr = 0;
        let xl = 0;
        let xr = 0;
        let izl = 0;
        let czl = 0;
        let uzl = 0;
        let vzl = 0;
        let dxl = 0;
        let dxr = 0;
        let dizl = 0;
        let dczl = 0;
        let duzl = 0;
        let dvzl = 0;
        do {
            if (lr === 0 || lr === 2) {
                il1 = il2;
                il2 -= 1;
                if (il2 === -1)
                    il2 = body.points.length - 1;
                yl1 = yl2;
                yl2 = Math.round(body.points[il2].y);
                hl = yl2 - yl1;
                xl = body.points[il1].x;
                izl = 1 / body.points[il1].z;
                czl = body.points[il1].c / body.points[il1].z;
                uzl = body.points[il1].u / body.points[il1].z;
                vzl = body.points[il1].v / body.points[il1].z;
                dxl = hl !== 0 ? (body.points[il2].x - xl) / hl : 0;
                dizl = hl !== 0 ? (1 / body.points[il2].z - izl) / hl : 0;
                dczl = hl !== 0 ? (body.points[il2].c / body.points[il2].z - czl) / hl : 0;
                duzl = hl !== 0 ? (body.points[il2].u / body.points[il2].z - uzl) / hl : 0;
                dvzl = hl !== 0 ? (body.points[il2].v / body.points[il2].z - vzl) / hl : 0;
                ys = yl1;
            }
            if (lr === 1 || lr === 2) {
                ir1 = ir2;
                ir2 += 1;
                if (ir2 === body.points.length)
                    ir2 = 0;
                yr1 = yr2;
                yr2 = Math.round(body.points[ir2].y);
                hr = yr2 - yr1;
                xr = body.points[ir1].x;
                dxr = hr !== 0 ? (body.points[ir2].x - xr) / hr : 0;
                ys = yr1;
            }
            if (yl2 < yr2) {
                ye = yl2;
                lr = 0;
            }
            else if (yr2 < yl2) {
                ye = yr2;
                lr = 1;
            }
            else {
                ye = yl2;
                lr = 2;
            }
            for (y = ys; y < ye; y++, xl += dxl, xr += dxr, izl += dizl, czl += dczl, uzl += duzl, vzl += dvzl) {
                this.horLineTex3d(Math.round(xl), Math.round(xr), y, izl, dizx, czl, dczx, uzl, duzx, vzl, dvzx, texture);
            }
        } while (ye < rymax);
        this.horLineTex3d(Math.round(xl), Math.round(xr), y, izl, dizx, czl, dczx, uzl, duzx, vzl, dvzx, texture);
        return this;
    }
    text(x, y, color, align, fontName, text, clip = true) {
        let font;
        switch (fontName) {
            case 'CasioFX':
                font = _assets_CasioFX__WEBPACK_IMPORTED_MODULE_0__.casioFx;
                break;
            case 'PressStart2P':
                font = _assets_PressStart2P__WEBPACK_IMPORTED_MODULE_1__.pressStart2P;
                break;
            case 'C64':
                font = _assets_C64__WEBPACK_IMPORTED_MODULE_4__.c64;
                break;
            case 'C64Inverse':
                font = _assets_C64Inverse__WEBPACK_IMPORTED_MODULE_5__.c64Inverse;
                break;
            default:
                font = _assets_PressStart2P__WEBPACK_IMPORTED_MODULE_1__.pressStart2P;
                break;
        }
        let width = [...text].length * font.width;
        if (align === 'center') {
            x -= (width - 1) / 2;
        }
        else if (align === 'right') {
            x -= width - 1;
        }
        x = Math.round(x);
        y = Math.round(y);
        const draw = (x, y, color, char, clip) => {
            const coords = font[char]?.data || font['?']?.data || [];
            for (const coord of coords) {
                this.pixel(x + coord[0], y + coord[1], color, clip);
            }
        };
        if (clip) {
            if ((x + width - 1 < 0) || (x > this.width - 1) || (y + font.height - 1 < 0) || (y > this.height - 1))
                return this;
            if ((x >= 0) && (x + width - 1 <= this.width - 1) && (y >= 0) && (y + font.height - 1 <= this.height - 1)) {
                clip = false;
            }
            else {
                if (x < 0) {
                    const count = [...text].length - Math.floor((x + width) / font.width);
                    draw(x + (count - 1) * font.width, y, color, [...text][count - 1], true);
                    text = text.substr(count);
                    width = [...text].length * font.width;
                    x += count * font.width;
                    clip = false;
                }
                if (x + width - 1 > this.width - 1) {
                    const count = Math.floor((this.width - x) / font.width);
                    draw(x + count * font.width, y, color, [...text][count], true);
                    text = text.substr(0, count);
                    width = [...text].length * font.width;
                    clip = false;
                }
                if ((y < 0) || (y + font.height - 1 > this.height - 1))
                    clip = true;
            }
        }
        for (const char of text) {
            draw(x, y, color, char, clip);
            x += font.width;
        }
        return this;
    }
    image(x, y, image, clip = true) {
        x = Math.round(x);
        y = Math.round(y);
        const { width, height, data } = image;
        let u1 = 0;
        let v1 = 0;
        let u2 = width - 1;
        let v2 = height - 1;
        if (clip) {
            if ((x + u2 - u1 < 0) || (x > this.width - 1) || (y + v2 - v1 < 0) || (y > this.height - 1))
                return this;
            if (x < 0) {
                u1 -= x;
                x = 0;
            }
            if (x + u2 - u1 > this.width - 1)
                u2 -= x + u2 - u1 - this.width + 1;
            if (y < 0) {
                v1 -= y;
                y = 0;
            }
            if (y + v2 - v1 > this.width - 1)
                v2 -= y + v2 - v1 - this.width + 1;
        }
        let i = 4 * (u1 + v1 * width);
        const ldif = 4 * (width - u2 + u1 - 1);
        for (let j = v1; j <= v2; j++) {
            for (let k = u1; k <= u2; k++) {
                this.pixel(x + k - u1, y + j - v1, new _Color__WEBPACK_IMPORTED_MODULE_3__.Color().initRgba(data[i], data[i + 1], data[i + 2], data[i + 3]), false);
                i += 4;
            }
            i += ldif;
        }
        return this;
    }
}
class Graphics2d extends _Canvas__WEBPACK_IMPORTED_MODULE_2__.Canvas2d {
    point(x, y, color) {
        this.context.fillStyle = color.rgba();
        this.context.fillRect(x, y, 1, 1);
        return this;
    }
    line(x1, y1, x2, y2, color) {
        this.context.lineWidth = 1;
        this.context.beginPath();
        this.context.moveTo(x1, y1);
        this.context.lineTo(x2, y2);
        this.context.strokeStyle = color.rgba();
        this.context.stroke();
        return this;
    }
    circleWire(x, y, r, color) {
        this.context.beginPath();
        this.context.arc(x, y, r, 0, 2 * Math.PI, false);
        this.context.strokeStyle = color.rgba();
        this.context.stroke();
        return this;
    }
    circleFill(x, y, r, color) {
        this.context.beginPath();
        this.context.arc(x, y, r, 0, 2 * Math.PI, false);
        this.context.fillStyle = color.rgba();
        this.context.fill();
        return this;
    }
    rectWire(x1, y1, x2, y2, color) {
        this.context.strokeStyle = color.rgba();
        this.context.strokeRect(x1, y1, x2 - x1, y2 - y1);
        return this;
    }
    rectFill(x1, y1, x2, y2, color) {
        this.context.fillStyle = color.rgba();
        this.context.fillRect(x1, y1, x2 - x1, y2 - y1);
        return this;
    }
    polyWire(body, color) {
        this.context.beginPath();
        this.context.moveTo(body.points[0].x, body.points[0].y);
        for (let i = 1; i < body.points.length; i++) {
            this.context.lineTo(body.points[i].x, body.points[i].y);
        }
        this.context.lineTo(body.points[0].x, body.points[0].y);
        this.context.strokeStyle = color.rgba();
        this.context.stroke();
        return this;
    }
    polyFill(body, color) {
        this.context.beginPath();
        this.context.moveTo(body.points[0].x, body.points[0].y);
        for (let i = 1; i < body.points.length; i++) {
            this.context.lineTo(body.points[i].x, body.points[i].y);
        }
        this.context.lineTo(body.points[0].x, body.points[0].y);
        this.context.fillStyle = color.rgba();
        this.context.fill();
        return this;
    }
    text(x, y, color, align, fontName, text) {
        this.context.font = fontName;
        this.context.fillStyle = color.rgba();
        this.context.textAlign = align;
        this.context.textBaseline = 'top';
        this.context.fillText(text, x, y);
        return this;
    }
    image(x, y, image) {
        return this;
    }
}
class WebglGraphics extends _Canvas__WEBPACK_IMPORTED_MODULE_2__.WebglCanvas {
    graphics2d;
    constructor(canvasId, context, canvas2dId) {
        super(canvasId, context, canvas2dId);
        this.resize();
        this.graphics2d = new Graphics2d(canvas2dId);
        this.canvas2d = this.graphics2d;
    }
    text(x, y, color, align, font, text) {
        this.graphics2d.text(x, y, color, align, font, text);
        return this;
    }
}


/***/ }),

/***/ "./src/libs/Input.ts":
/*!***************************!*\
  !*** ./src/libs/Input.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Input": () => (/* binding */ Input)
/* harmony export */ });
class Input {
    ongoingTouches = [];
    touchStartCallbacks = [];
    touchMoveCallbacks = [];
    touchEndCallbacks = [];
    touchCancelCallbacks = [];
    tapCallbacks = [];
    longTapCallbacks = [];
    tapHoldCallbacks = [];
    panCallbacks = [];
    longTapTime = 500;
    tapHoldTime = 500;
    inputElement;
    keyDownCallbacks = [];
    keyUpCallbacks = [];
    inputKeyCallbacks = [];
    pressedKeys = [];
    mouseDownCallbacks = [];
    mouseUpCallbacks = [];
    mouseMoveCallbacks = [];
    mouseWheelCallbacks = [];
    constructor(inputId) {
        this.inputElement = (inputId && document.getElementById(inputId));
        document.addEventListener('touchstart', this.handleTouchStart, false);
        document.addEventListener('touchend', this.handleTouchEnd, false);
        document.addEventListener('touchcancel', this.handleTouchCancel, false);
        document.addEventListener('touchmove', this.handleTouchMove, false);
        document.addEventListener('keydown', this.handleKeyDown, false);
        document.addEventListener('keyup', this.handleKeyUp, false);
        document.addEventListener('input', this.handleInput, false);
        document.addEventListener('mousedown', this.handleMouseDown, false);
        document.addEventListener('mouseup', this.handleMouseUp, false);
        document.addEventListener('mousemove', this.handleMouseMove, false);
        document.addEventListener('wheel', this.handleMouseWheel, false);
    }
    handleTouchStart = (evt) => {
        for (const touch of evt.changedTouches) {
            const holdTimer = setTimeout(() => {
                const i = this.ongoingTouches.findIndex(t => touch.identifier === t.identifier);
                if (i !== -1) {
                    const ongoingTouch = this.ongoingTouches[i];
                    for (const callback of this.tapHoldCallbacks) {
                        callback(ongoingTouch, this.ongoingTouches);
                    }
                }
            }, this.tapHoldTime);
            const startTouch = { identifier: touch.identifier, screenX: touch.screenX, screenY: touch.screenY, clientX: touch.clientX, clientY: touch.clientY, pageX: touch.pageX, pageY: touch.pageY, time: Date.now(), moved: false, holdTimer };
            this.ongoingTouches.push(startTouch);
            for (const callback of this.touchStartCallbacks) {
                callback(startTouch, this.ongoingTouches);
            }
        }
    };
    handleTouchMove = (evt) => {
        for (const touch of evt.changedTouches) {
            const i = this.ongoingTouches.findIndex(t => touch.identifier === t.identifier);
            if (i !== -1) {
                const ongoingTouch = this.ongoingTouches[i];
                clearTimeout(ongoingTouch.holdTimer);
                const moveTouch = { identifier: touch.identifier, screenX: touch.screenX, screenY: touch.screenY, clientX: touch.clientX, clientY: touch.clientY, pageX: touch.pageX, pageY: touch.pageY, time: ongoingTouch.time, moved: true, holdTimer: ongoingTouch.holdTimer };
                this.ongoingTouches.splice(i, 1, moveTouch);
                for (const callback of this.panCallbacks) {
                    callback(touch.pageX - ongoingTouch.pageX, touch.pageY - ongoingTouch.pageY, moveTouch, this.ongoingTouches);
                }
                for (const callback of this.touchMoveCallbacks) {
                    callback(moveTouch, this.ongoingTouches);
                }
            }
        }
    };
    handleTouchEnd = (evt) => {
        for (const touch of evt.changedTouches) {
            const i = this.ongoingTouches.findIndex(t => touch.identifier === t.identifier);
            if (i !== -1) {
                const endTouch = this.ongoingTouches.splice(i, 1)[0];
                clearTimeout(endTouch.holdTimer);
                if (!endTouch.moved && (Date.now() - endTouch.time) < this.longTapTime) {
                    for (const callback of this.tapCallbacks) {
                        callback(endTouch, this.ongoingTouches);
                    }
                }
                else if (!endTouch.moved && (Date.now() - endTouch.time) >= this.longTapTime) {
                    for (const callback of this.longTapCallbacks) {
                        callback(endTouch, this.ongoingTouches);
                    }
                }
                for (const callback of this.touchEndCallbacks) {
                    callback(endTouch, this.ongoingTouches);
                }
            }
        }
    };
    handleTouchCancel = (evt) => {
        for (const touch of evt.changedTouches) {
            const i = this.ongoingTouches.findIndex(t => touch.identifier === t.identifier);
            if (i !== -1) {
                const ongoingTouch = this.ongoingTouches[i];
                clearTimeout(ongoingTouch.holdTimer);
                const cancelTouch = this.ongoingTouches.splice(i, 1)[0];
                for (const callback of this.touchCancelCallbacks) {
                    callback(cancelTouch, this.ongoingTouches);
                }
            }
        }
    };
    handleKeyDown = (evt) => {
        console.log(evt.key, evt.code, evt.which);
        this.keyDown(evt.key);
    };
    handleKeyUp = (evt) => {
        this.keyUp(evt.key);
    };
    keyDown = (key) => {
        if (!this.pressedKeys.includes(key)) {
            this.pressedKeys.push(key);
            for (const callback of this.keyDownCallbacks) {
                callback(key, this.pressedKeys);
            }
        }
        return this;
    };
    keyUp = (key) => {
        if (this.pressedKeys.includes(key)) {
            this.pressedKeys.splice(this.pressedKeys.indexOf(key), 1);
            for (const callback of this.keyUpCallbacks) {
                callback(key, this.pressedKeys);
            }
        }
        return this;
    };
    keyPressed = (key) => this.pressedKeys.includes(key);
    oldValue = '';
    handleInput = (evt) => {
        const difference = (oldValue, newValue) => {
            if (newValue.length > oldValue.length) {
                const lastChar = newValue[newValue.length - 1];
                if (lastChar === '\n') {
                    return 'Enter';
                }
                else {
                    return lastChar;
                }
            }
            else if (newValue.length < oldValue.length) {
                return 'Backspace';
            }
            else {
                return undefined;
            }
        };
        const newValue = evt.target.value || '';
        const key = difference(this.oldValue, newValue);
        this.oldValue = newValue;
        for (const callback of this.inputKeyCallbacks) {
            callback(key);
        }
        return this;
    };
    handleBlur = () => setTimeout(() => this.inputElement.focus(), 0);
    show = () => {
        this.inputElement.addEventListener('blur', this.handleBlur);
        setTimeout(() => this.inputElement.focus(), 0);
    };
    hide = () => {
        this.inputElement.removeEventListener('blur', this.handleBlur);
        setTimeout(() => window.focus(), 0);
    };
    clear = () => {
        this.inputElement.value = '';
        this.oldValue = '';
    };
    handleMouseDown = (evt) => {
        for (const callback of this.mouseDownCallbacks) {
            callback({ screenX: evt.screenX, screenY: evt.screenY, clientX: evt.clientX, clientY: evt.clientY, pageX: evt.pageX, pageY: evt.pageY });
        }
    };
    handleMouseUp = (evt) => {
        for (const callback of this.mouseUpCallbacks) {
            callback({ screenX: evt.screenX, screenY: evt.screenY, clientX: evt.clientX, clientY: evt.clientY, pageX: evt.pageX, pageY: evt.pageY });
        }
    };
    handleMouseMove = (evt) => {
        for (const callback of this.mouseMoveCallbacks) {
            callback(evt.movementX, evt.movementY, { screenX: evt.screenX, screenY: evt.screenY, clientX: evt.clientX, clientY: evt.clientY, pageX: evt.pageX, pageY: evt.pageY });
        }
    };
    handleMouseWheel = (evt) => {
        for (const callback of this.mouseWheelCallbacks) {
            callback(evt.deltaY, { screenX: evt.screenX, screenY: evt.screenY, clientX: evt.clientX, clientY: evt.clientY, pageX: evt.pageX, pageY: evt.pageY });
        }
    };
    getCanvasXY = (event, graphics) => {
        const rect = graphics.canvas.getBoundingClientRect();
        return [
            (event.pageX - rect.left) * graphics.width / graphics.styleWidth,
            (event.pageY - rect.top) * graphics.height / graphics.styleHeight,
        ];
    };
    getCanvasDXY = (dx, dy, graphics) => {
        return [
            dx * graphics.width / graphics.styleWidth,
            dy * graphics.height / graphics.styleHeight,
        ];
    };
}


/***/ }),

/***/ "./src/libs/Timer.ts":
/*!***************************!*\
  !*** ./src/libs/Timer.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Timer": () => (/* binding */ Timer)
/* harmony export */ });
class Timer {
    time = Date.now();
    count = 0;
    fps = 0;
    tick() {
        this.count++;
        if (Date.now() - this.time > 1000) {
            this.time = Date.now();
            this.fps = this.count;
            this.count = 0;
        }
        return this;
    }
    getFps() {
        return this.fps;
    }
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!***********************************!*\
  !*** ./src/fluiddynamik/gpgpu.ts ***!
  \***********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/twgl.js/twgl.js */ "./lib/twgl.js/twgl.js");
/* harmony import */ var _lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _libs_Graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../libs/Graphics */ "./src/libs/Graphics.ts");
/* harmony import */ var _libs_Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../libs/Color */ "./src/libs/Color.ts");
/* harmony import */ var _libs_Input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../libs/Input */ "./src/libs/Input.ts");
/* harmony import */ var _libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../libs/Gpgpu */ "./src/libs/Gpgpu.ts");
/* harmony import */ var _libs_Timer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../libs/Timer */ "./src/libs/Timer.ts");






const width = 200;
const height = 200;
const N = 100;
const h = 1 / N;
const diff = 0.001;
const visc = 0.001;
const place = [0.5, 0.5];
const radius = 0.05;
let speed = [0, 0];
const solverIters = 60;
const graphics = new _libs_Graphics__WEBPACK_IMPORTED_MODULE_1__.WebglGraphics('canvas', 'webgl2', 'canvas2d');
graphics.setResolution(width, height);
graphics.setFitToScreen(true);
const fps = new _libs_Timer__WEBPACK_IMPORTED_MODULE_5__.Timer();
graphics.resizeCallbacks.push(((graphics) => {
    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
    gl.viewport(0, 0, graphics.width, graphics.height);
    let newTexture = (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.createMyTexture)(gl, 'FLOAT', 2, graphics.width, graphics.height);
    copy(u, newTexture);
    gl.deleteTexture(u.texture);
    u = newTexture;
    newTexture = (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.createMyTexture)(gl, 'FLOAT', 2, graphics.width, graphics.height);
    copy(v, newTexture);
    gl.deleteTexture(v.texture);
    v = newTexture;
    newTexture = (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.createMyTexture)(gl, 'FLOAT', 2, graphics.width, graphics.height);
    copy(dens, newTexture);
    gl.deleteTexture(dens.texture);
    dens = newTexture;
    newTexture = (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.createMyTexture)(gl, 'FLOAT', 2, graphics.width, graphics.height);
    copy(u_prev, newTexture);
    gl.deleteTexture(u_prev.texture);
    u_prev = newTexture;
    newTexture = (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.createMyTexture)(gl, 'FLOAT', 2, graphics.width, graphics.height);
    copy(v_prev, newTexture);
    gl.deleteTexture(v_prev.texture);
    v_prev = newTexture;
    newTexture = (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.createMyTexture)(gl, 'FLOAT', 2, graphics.width, graphics.height);
    copy(dens_prev, newTexture);
    gl.deleteTexture(dens_prev.texture);
    dens_prev = newTexture;
    gl.deleteTexture(tmp.texture);
    tmp = (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.createMyTexture)(gl, 'FLOAT', 2, graphics.width, graphics.height);
    gl.deleteTexture(solid_uv.texture);
    solid_uv = (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.createMyTexture)(gl, 'FLOAT', 2, graphics.width, graphics.height);
    gl.deleteTexture(solid.texture);
    solid = (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.createMyTexture)(gl, 'FLOAT', 1, graphics.width, graphics.height);
}));
const gl = graphics.context;
if (!gl)
    throw new Error('Your browser doesn\'t support Webgl2.');
console.log(gl.getSupportedExtensions());
const canFloatTextures = !!gl.getExtension('EXT_color_buffer_float');
if (!canFloatTextures)
    throw new Error('Rendering to float textures not supported.');
const canFilterLinear = !!gl.getExtension('OES_texture_float_linear');
if (!canFilterLinear)
    console.warn('Linear filtering of float textures not supported.');
const vertexShaderSource = `#version 300 es

in vec4 position;

void main() {
  gl_Position = position;
}
`;
const initSolidShaderSource = `#version 300 es
precision highp int;
precision highp float;

uniform vec2 place;
uniform float radius;
uniform ivec2 outSize;
out vec4 outColor;

void main() {
  // int x = int(gl_FragCoord.x);
  // int y = int(gl_FragCoord.y);
  // if (x == 0 || x == outSize.x - 1 || y == 0 || y == outSize.y - 1) {
  //   outColor = vec4(1);
  // } else {
  //   outColor = vec4(0);
  // }

  // outColor = vec4(0);

  if (distance(gl_FragCoord.xy, place*vec2(outSize)) <= radius*float(outSize.x)) {
    outColor = vec4(1);
  } else {
    outColor = vec4(0);
  }
}
`;
const initSolidProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, initSolidShaderSource], ['position']);
const initSolid = () => (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, initSolidProgramInfo, bufferInfo, { place, radius, outSize: [solid.width, solid.height] }, solid);
const initSolidUvShaderSource = `#version 300 es
precision highp int;
precision highp float;

uniform vec2 place;
uniform float radius;
uniform vec2 speed;
uniform ivec2 outSize;
out vec4 outColor;

void main() {
  // outColor = vec4(0);

  if (distance(gl_FragCoord.xy, place*vec2(outSize)) <= radius*float(outSize.x)) {
    outColor = vec4(speed, 0, 1);
  } else {
    outColor = vec4(0);
  }
}
`;
const initSolidUvProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, initSolidUvShaderSource], ['position']);
const initSolidUv = () => (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, initSolidUvProgramInfo, bufferInfo, { place, radius, speed, outSize: [solid_uv.width, solid_uv.height] }, solid_uv);
const initDensShaderSource = `#version 300 es
precision highp int;
precision highp float;

uniform ivec2 outSize;
out vec4 outColor;

void main() {
  float x = gl_FragCoord.x/float(outSize.x);
  float y = gl_FragCoord.y/float(outSize.y);
  // if (x >= 0.45 && x <= 0.55 && y >= 0.70 && y <= 0.80) {
  //   outColor = vec4(1000, 1000, 0, 1);
  if (x >= 0.01 && x < 0.02 && y >= 0.1 && y < 0.11) {
    outColor = vec4(20000, 20000, 0, 1);
  } else if (x >= 0.01 && x < 0.02 && y >= 0.3 && y < 0.31) {
    outColor = vec4(20000, 20000, 0, 1);
  } else if (x >= 0.01 && x < 0.02 && y >= 0.5 && y < 0.51) {
    outColor = vec4(20000, 20000, 0, 1);
  } else if (x >= 0.01 && x < 0.02 && y >= 0.7 && y < 0.71) {
    outColor = vec4(20000, 20000, 0, 1);
  } else if (x >= 0.01 && x < 0.02 && y >= 0.9 && y < 0.91) {
    outColor = vec4(20000, 20000, 0, 1);
  } else {
    outColor = vec4(0);
  }
}
`;
const initDensProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, initDensShaderSource], ['position']);
const initDens = () => (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, initDensProgramInfo, bufferInfo, { outSize: [dens_prev.width, dens_prev.height] }, dens_prev);
const initUShaderSource = `#version 300 es
precision highp int;
precision highp float;

uniform ivec2 outSize;
out vec4 outColor;

void main() {
  int x = int(gl_FragCoord.x);
  int y = int(gl_FragCoord.y);
  // if (x >= 1 && x <= 11 && y >= outSize.y - 12 && y <= outSize.y - 2) {
  //   outColor = vec4(4, 4, 0, 1);
  if (x == 1 && y > 0 && y < outSize.y - 1) {
    outColor = vec4(0.5, 0.5, 0, 1);
  } else {
    outColor = vec4(0);
  }
}
`;
const initUProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, initUShaderSource], ['position']);
const initU = () => (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, initUProgramInfo, bufferInfo, { outSize: [u_prev.width, u_prev.height] }, u_prev);
const initVShaderSource = `#version 300 es
precision highp int;
precision highp float;

uniform ivec2 outSize;
out vec4 outColor;

void main() {
  // int x = int(gl_FragCoord.x);
  // int y = int(gl_FragCoord.y);
  // if (x >= 1 && x <= 11 && y >= outSize.y - 12 && y <= outSize.y - 2) {
  //   outColor = vec4(-2, -2, 0, 1);
  // } else {
  //   outColor = vec4(0);
  // }
  
  outColor = vec4(0);
}
`;
const initVProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, initVShaderSource], ['position']);
const initV = () => (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, initVProgramInfo, bufferInfo, { outSize: [v_prev.width, v_prev.height] }, v_prev);
const addSourceShaderSource = `#version 300 es
precision highp int;
precision highp float;

uniform sampler2D d;
uniform sampler2D s;
uniform float dt;
uniform ivec2 outSize;
out vec4 outColor;

void main() {
  int x = int(gl_FragCoord.x);
  int y = int(gl_FragCoord.y);
  outColor = vec4(texelFetch(d, ivec2(x, y), 0).xy + dt*texelFetch(s, ivec2(x, y), 0).xy, 0, 1);
}
`;
const addSourceProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, addSourceShaderSource], ['position']);
const addSource = (d, s, dt) => (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, addSourceProgramInfo, bufferInfo, { d: d.texture, s: s.texture, dt, outSize: [tmp.width, tmp.height] }, tmp);
const setSourceShaderSource = `#version 300 es
precision highp int;
precision highp float;

uniform sampler2D d;
uniform sampler2D s;
uniform ivec2 outSize;
out vec4 outColor;

void main() {
  int x = int(gl_FragCoord.x);
  int y = int(gl_FragCoord.y);
  vec4 sourceColor = texelFetch(s, ivec2(x, y), 0);
  if (sourceColor.x != 0.0) {
    outColor = sourceColor;
  } else {
    outColor = texelFetch(d, ivec2(x, y), 0);
  }
}
`;
const setSourceProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, setSourceShaderSource], ['position']);
const setSource = (d, s) => (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, setSourceProgramInfo, bufferInfo, { d: d.texture, s: s.texture, outSize: [tmp.width, tmp.height] }, tmp);
const wrap_boxed = {
    0: [1, 1],
    1: [-1, 1],
    2: [1, -1]
};
const wrap_borderless = {
    0: [0, 0],
    1: [1, 1],
    2: [1, 1]
};
const wrap_solid = {
    0: [1, 1, 0],
    1: [-1, 1, 1],
    2: [1, -1, 1]
};
const setBndShaderSource = `#version 300 es
precision highp int;
precision highp float;

// Multiplikator: -1 negativer Wert, 0 Null, 1 positiver Wert
uniform vec2 wrap_edge;
uniform vec3 wrap_solid;
uniform sampler2D d;
uniform sampler2D solid;
uniform sampler2D solid_d;
uniform ivec2 outSize;
out vec4 outColor;

void main() {
  int x = int(gl_FragCoord.x);
  int y = int(gl_FragCoord.y);
  vec2 color = vec2(0, 0);
  if (x == 0) {
    if (y == 0) {
      color = (wrap_edge.x*texelFetch(d, ivec2(1, 1), 0).xy + wrap_edge.y*texelFetch(d, ivec2(1, 1), 0).xy)/2.0;
    } else if (y == outSize.y - 1) {
      color = (wrap_edge.x*texelFetch(d, ivec2(1, y - 1), 0).xy + wrap_edge.y*texelFetch(d, ivec2(1, y - 1), 0).xy)/2.0;
    } else {
      color = wrap_edge.x*texelFetch(d, ivec2(1, y), 0).xy;
    }
  } else if (x == outSize.x - 1) {
    if (y == 0) {
      color = (wrap_edge.x*texelFetch(d, ivec2(x - 1, 1), 0).xy + wrap_edge.y*texelFetch(d, ivec2(x - 1, 1), 0).xy)/2.0;
    } else if (y == outSize.y - 1) {
      color = (wrap_edge.x*texelFetch(d, ivec2(x - 1, y - 1), 0).xy + wrap_edge.y*texelFetch(d, ivec2(x - 1, y - 1), 0).xy)/2.0;
    } else {
      color = wrap_edge.x*texelFetch(d, ivec2(x - 1, y), 0).xy;
    }
  } else if (y == 0) {
    color = wrap_edge.y*texelFetch(d, ivec2(x, 1), 0).xy;
  } else if (y == outSize.y - 1) {
    color = wrap_edge.y*texelFetch(d, ivec2(x, y - 1), 0).xy;
  } else if (texelFetch(solid, ivec2(x, y), 0).x == 1.0) {
    if (texelFetch(solid, ivec2(x - 1, y), 0).x == 0.0) {
      color.x = wrap_solid.z*texelFetch(solid_d, ivec2(x, y), 0).x + wrap_solid.x*texelFetch(d, ivec2(x - 1, y), 0).x;
    } else if (texelFetch(solid, ivec2(x + 1, y), 0).x == 0.0) {
      color.x = wrap_solid.z*texelFetch(solid_d, ivec2(x, y), 0).x + wrap_solid.x*texelFetch(d, ivec2(x + 1, y), 0).x;
    }
    if (texelFetch(solid, ivec2(x, y - 1), 0).x == 0.0) {
      color.y = wrap_solid.z*texelFetch(solid_d, ivec2(x, y), 0).y + wrap_solid.y*texelFetch(d, ivec2(x, y - 1), 0).y;
    } else if (texelFetch(solid, ivec2(x, y + 1), 0).x == 0.0) {
      color.y = wrap_solid.z*texelFetch(solid_d, ivec2(x, y), 0).y + wrap_solid.y*texelFetch(d, ivec2(x, y + 1), 0).y;
    }
  } else {
    color = texelFetch(d, ivec2(x, y), 0).xy;
  }
  outColor = vec4(color, 0, 1);
}
`;
const setBndProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, setBndShaderSource], ['position']);
const diffuseShaderSource = `#version 300 es
precision highp int;
precision highp float;

uniform sampler2D d;
uniform sampler2D d0;
uniform float a;
uniform ivec2 outSize;
out vec4 outColor;

void main() {
  float x = gl_FragCoord.x/float(outSize.x);
  float xm1 = (gl_FragCoord.x - 1.0)/float(outSize.x);
  float xp1 = (gl_FragCoord.x + 1.0)/float(outSize.x);
  float y = gl_FragCoord.y/float(outSize.y);
  float ym1 = (gl_FragCoord.y - 1.0)/float(outSize.y);
  float yp1 = (gl_FragCoord.y + 1.0)/float(outSize.y);
  float color = (texture(d0, vec2(x, y)).x + a*(texture(d, vec2(xm1, y)).x + texture(d, vec2(xp1, y)).x + texture(d, vec2(x, ym1)).y + texture(d, vec2(x, yp1)).y))/(1.0 + 4.0*a);
  outColor = vec4(color, color, 0, 1);
}
`;
const diffuseProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, diffuseShaderSource], ['position']);
const diffuse = (b, d, d0, solid_d, a) => {
    for (let i = 1; i <= solverIters; i++) {
        (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, diffuseProgramInfo, bufferInfo, { d: d.texture, d0: d0.texture, a, outSize: [tmp.width, tmp.height] }, tmp);
        (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, setBndProgramInfo, bufferInfo, { wrap_edge: wrap_borderless[b], wrap_solid: wrap_solid[b], d: tmp.texture, solid: solid.texture, solid_d: solid_d.texture, outSize: [d.width, d.height] }, d);
    }
};
const advectInterpolateShaderSource = `#version 300 es
precision highp int;
precision highp float;

uniform sampler2D d0;
uniform sampler2D u;
uniform sampler2D v;
uniform float dt0;
uniform ivec2 outSize;
out vec4 outColor;

void main() {
  int x = int(gl_FragCoord.x);
  int y = int(gl_FragCoord.y);
  if (x == 0 || x == outSize.x - 1 || y == 0 || y == outSize.y - 1) {
    outColor = vec4(0);
  } else {
    float x0 = min(max(float(x) - dt0*texelFetch(u, ivec2(x, y), 0).r, 0.5), float(outSize.x) - 1.5);
    float y0 = min(max(float(y) - dt0*texelFetch(v, ivec2(x, y), 0).r, 0.5), float(outSize.y) - 1.5);
    int i0 = int(x0);
    int i1 = i0 + 1;
    int j0 = int(y0);
    int j1 = j0 + 1;
    float s1 = x0 - float(i0);
    float s0 = 1.0 - s1;
    float t1 = y0 - float(j0);
    float t0 = 1.0 - t1;
    float color = s0*(t0*texelFetch(d0, ivec2(i0, j0), 0).r + t1*texelFetch(d0, ivec2(i0, j1), 0).r) + s1*(t0*texelFetch(d0, ivec2(i1, j0), 0).r + t1*texelFetch(d0, ivec2(i1, j1), 0).r);
    outColor = vec4(color, color, 0, 1);
  }

  // float x = gl_FragCoord.x/float(outSize.x);
  // float y = gl_FragCoord.y/float(outSize.y);
  // float x0 = gl_FragCoord.x - dt0*texture(u, vec2(x, y)).x;
  // float y0 = gl_FragCoord.y - dt0*texture(v, vec2(x, y)).x;
  // int i0 = int(floor(x0));
  // int i1 = i0 + 1;
  // int j0 = int(floor(y0));
  // int j1 = j0 + 1;
  // float s1 = x0 - float(i0);
  // float s0 = 1.0 - s1;
  // float t1 = y0 - float(j0);
  // float t0 = 1.0 - t1;
  // float i0f = float(i0)/float(outSize.x);
  // float i1f = float(i1)/float(outSize.x);
  // float j0f = float(j0)/float(outSize.y);
  // float j1f = float(j1)/float(outSize.y);
  // outColor = s0*(t0*texture(d0, vec2(i0f, j0f)) + t1*texture(d0, vec2(i0f, j1f))) + s1*(t0*texture(d0, vec2(i1f, j0f)) + t1*texture(d0, vec2(i1f, j1f)));
}
`;
const advectInterpolateProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, advectInterpolateShaderSource], ['position']);
const advectShaderSource = `#version 300 es
precision highp int;
precision highp float;

uniform sampler2D d0;
uniform sampler2D u;
uniform sampler2D v;
uniform float dt0;
uniform ivec2 outSize;
out vec4 outColor;

void main() {
  float x = gl_FragCoord.x/float(outSize.x);
  float y = gl_FragCoord.y/float(outSize.y);
  float x0 = (gl_FragCoord.x - dt0*texture(u, vec2(x, y)).x)/float(outSize.x);
  float y0 = (gl_FragCoord.y - dt0*texture(v, vec2(x, y)).x)/float(outSize.y);
  outColor = texture(d0, vec2(x0, y0));
}
`;
const advectProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, advectShaderSource], ['position']);
const advect = canFilterLinear ?
    (b, d, d0, solid_d, u, v, dt0) => {
        (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, advectProgramInfo, bufferInfo, { d0: { texture: d0.texture, sampler: linearSampler }, u: u.texture, v: v.texture, dt0, outSize: [tmp.width, tmp.height] }, tmp);
        (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, setBndProgramInfo, bufferInfo, { wrap_edge: wrap_borderless[b], wrap_solid: wrap_solid[b], d: tmp.texture, solid: solid.texture, solid_d: solid_d.texture, outSize: [d.width, d.height] }, d);
    }
    :
        (b, d, d0, solid_d, u, v, dt0) => {
            (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, advectInterpolateProgramInfo, bufferInfo, { d0: d0.texture, u: u.texture, v: v.texture, dt0, outSize: [tmp.width, tmp.height] }, tmp);
            (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, setBndProgramInfo, bufferInfo, { wrap_edge: wrap_borderless[b], wrap_solid: wrap_solid[b], d: tmp.texture, solid: solid.texture, solid_d: solid_d.texture, outSize: [d.width, d.height] }, d);
        };
const project1ShaderSource = `#version 300 es
precision highp int;
precision highp float;

uniform sampler2D u;
uniform sampler2D v;
uniform float h;
uniform ivec2 outSize;
out vec4 outColor;

void main() {
  float x = gl_FragCoord.x/float(outSize.x);
  float xm1 = (gl_FragCoord.x - 1.0)/float(outSize.x);
  float xp1 = (gl_FragCoord.x + 1.0)/float(outSize.x);
  float y = gl_FragCoord.y/float(outSize.y);
  float ym1 = (gl_FragCoord.y - 1.0)/float(outSize.y);
  float yp1 = (gl_FragCoord.y + 1.0)/float(outSize.y);
  float color = -0.5*h*(texture(u, vec2(xp1, y)).x - texture(u, vec2(xm1, y)).x + texture(v, vec2(x, yp1)).y - texture(v, vec2(x, ym1)).y);
  outColor = vec4(color, color, 0, 1);
}
`;
const project1ProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, project1ShaderSource], ['position']);
const initZeroShaderSource = `#version 300 es
precision highp int;
precision highp float;

out vec4 outColor;

void main() {
  outColor = vec4(0);
}
`;
const initZeroProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, initZeroShaderSource], ['position']);
const initZero = (dest) => (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, initZeroProgramInfo, bufferInfo, undefined, dest);
const project3ShaderSource = `#version 300 es
precision highp int;
precision highp float;

uniform sampler2D p;
uniform sampler2D pdiv;
uniform ivec2 outSize;
out vec4 outColor;

void main() {
  float x = gl_FragCoord.x/float(outSize.x);
  float xm1 = (gl_FragCoord.x - 1.0)/float(outSize.x);
  float xp1 = (gl_FragCoord.x + 1.0)/float(outSize.x);
  float y = gl_FragCoord.y/float(outSize.y);
  float ym1 = (gl_FragCoord.y - 1.0)/float(outSize.y);
  float yp1 = (gl_FragCoord.y + 1.0)/float(outSize.y);
  float color = (texture(pdiv, vec2(x, y)).x + texture(p, vec2(xm1, y)).x + texture(p, vec2(xp1, y)).x + texture(p, vec2(x, ym1)).y + texture(p, vec2(x, yp1)).y)/4.0;
  outColor = vec4(color, color, 0, 1);
}
`;
const project3ProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, project3ShaderSource], ['position']);
const project4ShaderSource = `#version 300 es
precision highp int;
precision highp float;

uniform sampler2D u;
uniform sampler2D p;
uniform float h;
uniform ivec2 outSize;
out vec4 outColor;

void main() {
  float x = gl_FragCoord.x/float(outSize.x);
  float xm1 = (gl_FragCoord.x - 1.0)/float(outSize.x);
  float xp1 = (gl_FragCoord.x + 1.0)/float(outSize.x);
  float y = gl_FragCoord.y/float(outSize.y);
  float color = texture(u, vec2(x, y)).x - 0.5*(texture(p, vec2(xp1, y)).x - texture(p, vec2(xm1, y)).x)/h;
  outColor = vec4(color, color, 0, 1);
}
`;
const project4ProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, project4ShaderSource], ['position']);
const project5ShaderSource = `#version 300 es
precision highp int;
precision highp float;

uniform sampler2D v;
uniform sampler2D p;
uniform float h;
uniform ivec2 outSize;
out vec4 outColor;

void main() {
  float x = gl_FragCoord.x/float(outSize.x);
  float y = gl_FragCoord.y/float(outSize.y);
  float ym1 = (gl_FragCoord.y - 1.0)/float(outSize.y);
  float yp1 = (gl_FragCoord.y + 1.0)/float(outSize.y);
  float color = texture(v, vec2(x, y)).x - 0.5*(texture(p, vec2(x, yp1)).y - texture(p, vec2(x, ym1)).y)/h;
  outColor = vec4(color, color, 0, 1);
}
`;
const project5ProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, project5ShaderSource], ['position']);
const project = (u, v, p, pdiv, h) => {
    (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, project1ProgramInfo, bufferInfo, { u: u.texture, v: v.texture, h, outSize: [tmp.width, tmp.height] }, tmp);
    (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, setBndProgramInfo, bufferInfo, { wrap_edge: wrap_borderless[0], wrap_solid: wrap_solid[0], d: tmp.texture, solid: solid.texture, solid_d: solid_uv.texture, outSize: [pdiv.width, pdiv.height] }, pdiv);
    (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, initZeroProgramInfo, bufferInfo, undefined, p);
    for (let i = 1; i <= solverIters; i++) {
        (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, project3ProgramInfo, bufferInfo, { p: p.texture, pdiv: pdiv.texture, outSize: [tmp.width, tmp.height] }, tmp);
        (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, setBndProgramInfo, bufferInfo, { wrap_edge: wrap_borderless[0], wrap_solid: wrap_solid[0], d: tmp.texture, solid: solid.texture, solid_d: solid_uv.texture, outSize: [p.width, p.height] }, p);
    }
    (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, project4ProgramInfo, bufferInfo, { u: u.texture, p: p.texture, h, outSize: [tmp.width, tmp.height] }, tmp);
    (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, setBndProgramInfo, bufferInfo, { wrap_edge: wrap_borderless[1], wrap_solid: wrap_solid[1], d: tmp.texture, solid: solid.texture, solid_d: solid_uv.texture, outSize: [u.width, u.height] }, u);
    (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, project5ProgramInfo, bufferInfo, { v: v.texture, p: p.texture, h, outSize: [tmp.width, tmp.height] }, tmp);
    (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, setBndProgramInfo, bufferInfo, { wrap_edge: wrap_borderless[2], wrap_solid: wrap_solid[2], d: tmp.texture, solid: solid.texture, solid_d: solid_uv.texture, outSize: [v.width, v.height] }, v);
};
const renderShaderSource = `#version 300 es
precision highp int;
precision highp float;

uniform sampler2D dens;
uniform sampler2D solid;
uniform ivec2 outSize;
out vec4 outColor;

void main() {
  float x = gl_FragCoord.x/float(outSize.x);
  float y = gl_FragCoord.y/float(outSize.y);
  if (texture(solid, vec2(x, 1.0 - y)).x == 0.0) {
    float c = max(min(texture(dens, vec2(x, 1.0 - y)).r, 255.0), 0.0)/255.0;
    outColor = vec4(c, c, c, 1);
  } else {
    outColor = vec4(1, 0, 0, 1);
  }
}
`;
const renderProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, renderShaderSource], ['position']);
const render = (dens) => (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, renderProgramInfo, bufferInfo, { dens: dens.texture, solid: solid.texture, outSize: [graphics.width, graphics.height] }, undefined);
const copyInterpolateShaderSource = `#version 300 es
precision highp int;
precision highp float;

uniform sampler2D source;
uniform ivec2 outSize;
out vec4 outColor;

void main() {
  ivec2 inSize = textureSize(source, 0);
  float x0 = gl_FragCoord.x/float(outSize.x)*float(inSize.x);
  float y0 = gl_FragCoord.y/float(outSize.y)*float(inSize.y);
  int i0 = int(x0);
  int i1 = i0 + 1;
  int j0 = int(y0);
  int j1 = j0 + 1;
  float s1 = x0 - float(i0);
  float s0 = 1.0 - s1;
  float t1 = y0 - float(j0);
  float t0 = 1.0 - t1;
  outColor = vec4(s0*(t0*texelFetch(source, ivec2(i0, j0), 0).xy + t1*texelFetch(source, ivec2(i0, j1), 0).xy) + s1*(t0*texelFetch(source, ivec2(i1, j0), 0).xy + t1*texelFetch(source, ivec2(i1, j1), 0).xy), 0, 1);
}
`;
const copyInterpolateProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, copyInterpolateShaderSource], ['position']);
const copyShaderSource = `#version 300 es
precision highp int;
precision highp float;

uniform sampler2D source;
uniform ivec2 outSize;
out vec4 outColor;

void main() {
  float x = gl_FragCoord.x/float(outSize.x);
  float y = gl_FragCoord.y/float(outSize.y);
  outColor = texture(source, vec2(x, y));
}
`;
const copyProgramInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createProgramInfo)(gl, [vertexShaderSource, copyShaderSource], ['position']);
const copy = canFilterLinear ?
    (source, target) => (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, copyProgramInfo, bufferInfo, { source: { texture: source.texture, sampler: linearSampler }, outSize: [target.width, target.height] }, target)
    :
        (source, target) => (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.executeProgram)(gl, copyInterpolateProgramInfo, bufferInfo, { source: source.texture, outSize: [target.width, target.height] }, target);
const bufferInfo = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createBufferInfoFromArrays)(gl, { position: [-1, -1, 0, 1, -1, 0, -1, 1, 0, -1, 1, 0, 1, -1, 0, 1, 1, 0] });
let u_prev = (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.createMyTexture)(gl, 'FLOAT', 2, graphics.width, graphics.height);
let v_prev = (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.createMyTexture)(gl, 'FLOAT', 2, graphics.width, graphics.height);
let dens_prev = (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.createMyTexture)(gl, 'FLOAT', 2, graphics.width, graphics.height);
let u = (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.createMyTexture)(gl, 'FLOAT', 2, graphics.width, graphics.height);
let v = (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.createMyTexture)(gl, 'FLOAT', 2, graphics.width, graphics.height);
let dens = (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.createMyTexture)(gl, 'FLOAT', 2, graphics.width, graphics.height);
let tmp = (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.createMyTexture)(gl, 'FLOAT', 2, graphics.width, graphics.height);
let solid_uv = (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.createMyTexture)(gl, 'FLOAT', 2, graphics.width, graphics.height);
let solid = (0,_libs_Gpgpu__WEBPACK_IMPORTED_MODULE_4__.createMyTexture)(gl, 'FLOAT', 1, graphics.width, graphics.height);
const linearSampler = (0,_lib_twgl_js_twgl_js__WEBPACK_IMPORTED_MODULE_0__.createSampler)(gl, { minMag: gl.LINEAR, wrap: gl.CLAMP_TO_EDGE });
const fb = gl.createFramebuffer();
gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
gl.viewport(0, 0, tmp.width, tmp.height);
gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tmp.texture, 0);
if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) !== gl.FRAMEBUFFER_COMPLETE)
    throw new Error(gl.checkFramebufferStatus(gl.FRAMEBUFFER).toString());
let oldTime = performance.now();
const loop = (time) => {
    graphics.clear();
    fps.tick();
    const dt = (time - oldTime) / 1000;
    oldTime = time;
    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
    gl.viewport(0, 0, graphics.width, graphics.height);
    initU();
    initV();
    initDens();
    initSolidUv();
    initSolid();
    setSource(u, u_prev);
    [u, tmp] = [tmp, u];
    setSource(v, v_prev);
    [v, tmp] = [tmp, v];
    [u, u_prev] = [u_prev, u];
    diffuse(1, u, u_prev, solid_uv, dt * visc * N * N);
    [v, v_prev] = [v_prev, v];
    diffuse(2, v, v_prev, solid_uv, dt * visc * N * N);
    project(u, v, u_prev, v_prev, h);
    [u, u_prev] = [u_prev, u];
    [v, v_prev] = [v_prev, v];
    advect(1, u, u_prev, solid_uv, u_prev, v_prev, dt * N);
    advect(2, v, v_prev, solid_uv, u_prev, v_prev, dt * N);
    project(u, v, u_prev, v_prev, h);
    addSource(dens, dens_prev, dt);
    [dens, tmp] = [tmp, dens];
    [dens, dens_prev] = [dens_prev, dens];
    diffuse(0, dens, dens_prev, solid, dt * diff * N * N);
    [dens, dens_prev] = [dens_prev, dens];
    advect(0, dens, dens_prev, solid, u, v, dt * N);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.viewport(0, 0, graphics.width, graphics.height);
    render(dens);
    graphics.text(graphics.width - 1, 1, _libs_Color__WEBPACK_IMPORTED_MODULE_2__.Color.color(255, 0, 0, 128), 'right', 'Arial', `${graphics.width}x${graphics.height}`);
    graphics.text(graphics.width - 1, 10, _libs_Color__WEBPACK_IMPORTED_MODULE_2__.Color.color(255, 0, 0, 128), 'right', 'Arial', fps.getFps() + ' fps');
    speed = [0, 0];
    requestAnimationFrame(loop);
};
requestAnimationFrame(loop);
let panning = false;
const panStartFn = (event) => {
    const mouseXY = input.getCanvasXY(event, graphics);
    const distance = Math.sqrt(Math.pow(place[0] * graphics.width - mouseXY[0], 2) + Math.pow(place[1] * graphics.height - mouseXY[1], 2));
    if (distance <= radius * graphics.width)
        panning = true;
};
const panFn = (dx, dy) => {
    speed = input.getCanvasDXY(dx, dy, graphics);
    place[0] += speed[0] / graphics.width;
    place[1] += speed[1] / graphics.height;
};
const input = new _libs_Input__WEBPACK_IMPORTED_MODULE_3__.Input();
input.touchStartCallbacks.push((touch) => panStartFn(touch));
input.touchEndCallbacks.push(() => panning = false);
input.touchCancelCallbacks.push(() => panning = false);
input.panCallbacks.push((dx, dy) => {
    if (panning)
        panFn(dx, dy);
});
input.mouseDownCallbacks.push((mouse) => panStartFn(mouse));
input.mouseUpCallbacks.push(() => panning = false);
input.mouseMoveCallbacks.push((dx, dy) => {
    if (panning)
        panFn(dx, dy);
});

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,